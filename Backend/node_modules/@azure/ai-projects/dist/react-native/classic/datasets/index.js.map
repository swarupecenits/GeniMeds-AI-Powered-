{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/classic/datasets/index.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAClC,iCAAiC;AAkBjC,OAAO,EACL,cAAc,EACd,aAAa,EACb,cAAc,EACd,OAAO,EACP,GAAG,EACH,IAAI,EACJ,YAAY,EACZ,UAAU,EACV,YAAY,GACb,MAAM,kCAAkC,CAAC;AA6D1C,SAAS,YAAY,CAAC,OAAyB;IAC7C,OAAO;QACL,cAAc,EAAE,CACd,IAAY,EACZ,OAAe,EACf,OAA8C,EAC9C,EAAE,CAAC,cAAc,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,CAAC;QACpD,aAAa,EAAE,CACb,IAAY,EACZ,OAAe,EACf,IAA0B,EAC1B,OAA6C,EAC7C,EAAE,CAAC,aAAa,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC;QACzD,cAAc,EAAE,CACd,IAAY,EACZ,OAAe,EACf,IAAyB,EACzB,OAA8C,EAC9C,EAAE,CAAC,cAAc,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC;QAC1D,MAAM,EAAE,CAAC,IAAY,EAAE,OAAe,EAAE,OAAsC,EAAE,EAAE,CAChF,OAAO,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,CAAC;QAC1C,GAAG,EAAE,CAAC,IAAY,EAAE,OAAe,EAAE,OAAmC,EAAE,EAAE,CAC1E,GAAG,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,CAAC;QACtC,IAAI,EAAE,CAAC,OAAoC,EAAE,EAAE,CAAC,IAAI,CAAC,OAAO,EAAE,OAAO,CAAC;QACtE,YAAY,EAAE,CAAC,IAAY,EAAE,OAA4C,EAAE,EAAE,CAC3E,YAAY,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC;QACtC,UAAU,EAAE,CAAC,IAAY,EAAE,OAAe,EAAE,QAAgB,EAAE,cAAuB,EAAE,EAAE,CACvF,UAAU,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE,cAAc,CAAC;QAC9D,YAAY,EAAE,CAAC,IAAY,EAAE,OAAe,EAAE,UAAkB,EAAE,cAAuB,EAAE,EAAE,CAC3F,YAAY,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,UAAU,EAAE,cAAc,CAAC;KACnE,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,sBAAsB,CAAC,OAAyB;IAC9D,yBACK,YAAY,CAAC,OAAO,CAAC,EACxB;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/* eslint-disable tsdoc/syntax */\n\nimport { AIProjectContext } from \"../../api/aiProjectContext.js\";\nimport {\n  DatasetVersionUnion,\n  PendingUploadRequest,\n  PendingUploadResponse,\n  AssetCredentialResponse,\n} from \"../../models/models.js\";\nimport {\n  DatasetsGetCredentialsOptionalParams,\n  DatasetsPendingUploadOptionalParams,\n  DatasetsCreateOrUpdateOptionalParams,\n  DatasetsDeleteOptionalParams,\n  DatasetsGetOptionalParams,\n  DatasetsListOptionalParams,\n  DatasetsListVersionsOptionalParams,\n} from \"../../api/datasets/options.js\";\nimport {\n  getCredentials,\n  pendingUpload,\n  createOrUpdate,\n  $delete,\n  get,\n  list,\n  listVersions,\n  uploadFile,\n  uploadFolder,\n} from \"../../api/datasets/operations.js\";\nimport { PagedAsyncIterableIterator } from \"../../static-helpers/pagingHelpers.js\";\n\n/** Interface representing a Datasets operations. */\nexport interface DatasetsOperations {\n  /** Get the SAS credential to access the storage account associated with a Dataset version. */\n  getCredentials: (\n    name: string,\n    version: string,\n    options?: DatasetsGetCredentialsOptionalParams,\n  ) => Promise<AssetCredentialResponse>;\n  /** Start a new or get an existing pending upload of a dataset for a specific version. */\n  pendingUpload: (\n    name: string,\n    version: string,\n    body: PendingUploadRequest,\n    options?: DatasetsPendingUploadOptionalParams,\n  ) => Promise<PendingUploadResponse>;\n  /** Create a new or update an existing DatasetVersion with the given version id */\n  createOrUpdate: (\n    name: string,\n    version: string,\n    body: DatasetVersionUnion,\n    options?: DatasetsCreateOrUpdateOptionalParams,\n  ) => Promise<DatasetVersionUnion>;\n  /** Delete the specific version of the DatasetVersion */\n  /**\n   *  @fixme delete is a reserved word that cannot be used as an operation name.\n   *         Please add @clientName(\"clientName\") or @clientName(\"<JS-Specific-Name>\", \"javascript\")\n   *         to the operation to override the generated name.\n   */\n  delete: (name: string, version: string, options?: DatasetsDeleteOptionalParams) => Promise<void>;\n  /** Get the specific version of the DatasetVersion */\n  get: (\n    name: string,\n    version: string,\n    options?: DatasetsGetOptionalParams,\n  ) => Promise<DatasetVersionUnion>;\n  /** List the latest version of each DatasetVersion */\n  list: (options?: DatasetsListOptionalParams) => PagedAsyncIterableIterator<DatasetVersionUnion>;\n  /** List all versions of the given DatasetVersion */\n  listVersions: (\n    name: string,\n    options?: DatasetsListVersionsOptionalParams,\n  ) => PagedAsyncIterableIterator<DatasetVersionUnion>;\n  /** Upload a file to the DatasetVersion */\n  uploadFile: (\n    name: string,\n    version: string,\n    filePath: string,\n    connectionName?: string,\n  ) => Promise<DatasetVersionUnion>;\n  /** Upload a folder to the DatasetVersion */\n  uploadFolder: (\n    name: string,\n    version: string,\n    folderPath: string,\n    connectionName?: string,\n  ) => Promise<DatasetVersionUnion>;\n}\n\nfunction _getDatasets(context: AIProjectContext) {\n  return {\n    getCredentials: (\n      name: string,\n      version: string,\n      options?: DatasetsGetCredentialsOptionalParams,\n    ) => getCredentials(context, name, version, options),\n    pendingUpload: (\n      name: string,\n      version: string,\n      body: PendingUploadRequest,\n      options?: DatasetsPendingUploadOptionalParams,\n    ) => pendingUpload(context, name, version, body, options),\n    createOrUpdate: (\n      name: string,\n      version: string,\n      body: DatasetVersionUnion,\n      options?: DatasetsCreateOrUpdateOptionalParams,\n    ) => createOrUpdate(context, name, version, body, options),\n    delete: (name: string, version: string, options?: DatasetsDeleteOptionalParams) =>\n      $delete(context, name, version, options),\n    get: (name: string, version: string, options?: DatasetsGetOptionalParams) =>\n      get(context, name, version, options),\n    list: (options?: DatasetsListOptionalParams) => list(context, options),\n    listVersions: (name: string, options?: DatasetsListVersionsOptionalParams) =>\n      listVersions(context, name, options),\n    uploadFile: (name: string, version: string, filePath: string, connectionName?: string) =>\n      uploadFile(context, name, version, filePath, connectionName),\n    uploadFolder: (name: string, version: string, folderPath: string, connectionName?: string) =>\n      uploadFolder(context, name, version, folderPath, connectionName),\n  };\n}\n\nexport function _getDatasetsOperations(context: AIProjectContext): DatasetsOperations {\n  return {\n    ..._getDatasets(context),\n  };\n}\n"]}
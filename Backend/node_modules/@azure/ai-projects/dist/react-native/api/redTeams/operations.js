// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { redTeamSerializer, redTeamDeserializer, _pagedRedTeamDeserializer, } from "../../models/models.js";
import { expandUrlTemplate } from "../../static-helpers/urlTemplate.js";
import { buildPagedAsyncIterator, } from "../../static-helpers/pagingHelpers.js";
import { createRestError, operationOptionsToRequestParameters, } from "@azure-rest/core-client";
export function _createSend(context, redTeam, options = { requestOptions: {} }) {
    var _a, _b;
    const path = expandUrlTemplate("/redTeams/runs:run{?api-version}", {
        "api-version": context.apiVersion,
    }, {
        allowReserved: (_a = options === null || options === void 0 ? void 0 : options.requestOptions) === null || _a === void 0 ? void 0 : _a.skipUrlEncoding,
    });
    return context.path(path).post(Object.assign(Object.assign({}, operationOptionsToRequestParameters(options)), { contentType: "application/json", headers: Object.assign({ accept: "application/json" }, (_b = options.requestOptions) === null || _b === void 0 ? void 0 : _b.headers), body: redTeamSerializer(redTeam) }));
}
export async function _createDeserialize(result) {
    const expectedStatuses = ["201"];
    if (!expectedStatuses.includes(result.status)) {
        throw createRestError(result);
    }
    return redTeamDeserializer(result.body);
}
/** Creates a redteam run. */
export async function create(context, redTeam, options = { requestOptions: {} }) {
    const result = await _createSend(context, redTeam, options);
    return _createDeserialize(result);
}
export function _listSend(context, options = { requestOptions: {} }) {
    var _a, _b;
    const path = expandUrlTemplate("/redTeams/runs{?api-version}", {
        "api-version": context.apiVersion,
    }, {
        allowReserved: (_a = options === null || options === void 0 ? void 0 : options.requestOptions) === null || _a === void 0 ? void 0 : _a.skipUrlEncoding,
    });
    return context.path(path).get(Object.assign(Object.assign({}, operationOptionsToRequestParameters(options)), { headers: Object.assign(Object.assign(Object.assign({}, ((options === null || options === void 0 ? void 0 : options.clientRequestId) !== undefined
            ? { "x-ms-client-request-id": options === null || options === void 0 ? void 0 : options.clientRequestId }
            : {})), { accept: "application/json" }), (_b = options.requestOptions) === null || _b === void 0 ? void 0 : _b.headers) }));
}
export async function _listDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        throw createRestError(result);
    }
    return _pagedRedTeamDeserializer(result.body);
}
/** List a redteam by name. */
export function list(context, options = { requestOptions: {} }) {
    return buildPagedAsyncIterator(context, () => _listSend(context, options), _listDeserialize, ["200"], { itemName: "value", nextLinkName: "nextLink" });
}
export function _getSend(context, name, options = { requestOptions: {} }) {
    var _a, _b;
    const path = expandUrlTemplate("/redTeams/runs/{name}{?api-version}", {
        name: name,
        "api-version": context.apiVersion,
    }, {
        allowReserved: (_a = options === null || options === void 0 ? void 0 : options.requestOptions) === null || _a === void 0 ? void 0 : _a.skipUrlEncoding,
    });
    return context.path(path).get(Object.assign(Object.assign({}, operationOptionsToRequestParameters(options)), { headers: Object.assign(Object.assign(Object.assign({}, ((options === null || options === void 0 ? void 0 : options.clientRequestId) !== undefined
            ? { "x-ms-client-request-id": options === null || options === void 0 ? void 0 : options.clientRequestId }
            : {})), { accept: "application/json" }), (_b = options.requestOptions) === null || _b === void 0 ? void 0 : _b.headers) }));
}
export async function _getDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        throw createRestError(result);
    }
    return redTeamDeserializer(result.body);
}
/** Get a redteam by name. */
export async function get(context, name, options = { requestOptions: {} }) {
    const result = await _getSend(context, name, options);
    return _getDeserialize(result);
}
//# sourceMappingURL=operations.js.map
{"version":3,"file":"operations.js","sourceRoot":"","sources":["../../../../src/api/connections/operations.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;;AAGlC,OAAO,EAEL,sBAAsB,EAEtB,4BAA4B,GAE7B,MAAM,wBAAwB,CAAC;AAMhC,OAAO,EAAE,iBAAiB,EAAE,MAAM,qCAAqC,CAAC;AACxE,OAAO,EAEL,uBAAuB,GACxB,MAAM,uCAAuC,CAAC;AAC/C,OAAO,EAGL,eAAe,EACf,mCAAmC,GACpC,MAAM,yBAAyB,CAAC;AAEjC,MAAM,UAAU,SAAS,CACvB,OAAe,EACf,UAAyC,EAAE,cAAc,EAAE,EAAE,EAAE;;IAE/D,MAAM,IAAI,GAAG,iBAAiB,CAC5B,6DAA6D,EAC7D;QACE,aAAa,EAAE,OAAO,CAAC,UAAU;QACjC,cAAc,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,cAAc;QACvC,iBAAiB,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,iBAAiB;KAC9C,EACD;QACE,aAAa,EAAE,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,cAAc,0CAAE,eAAe;KACxD,CACF,CAAC;IACF,OAAO,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,iCACxB,mCAAmC,CAAC,OAAO,CAAC,KAC/C,OAAO,gDACF,CAAC,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,eAAe,MAAK,SAAS;YACxC,CAAC,CAAC,EAAE,wBAAwB,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,eAAe,EAAE;YACxD,CAAC,CAAC,EAAE,CAAC,KACP,MAAM,EAAE,kBAAkB,KACvB,MAAA,OAAO,CAAC,cAAc,0CAAE,OAAO,KAEpC,CAAC;AACL,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,gBAAgB,CAAC,MAA6B;IAClE,MAAM,gBAAgB,GAAG,CAAC,KAAK,CAAC,CAAC;IACjC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC;QAC9C,MAAM,eAAe,CAAC,MAAM,CAAC,CAAC;IAChC,CAAC;IAED,OAAO,4BAA4B,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACnD,CAAC;AAED,qFAAqF;AACrF,MAAM,UAAU,IAAI,CAClB,OAAe,EACf,UAAyC,EAAE,cAAc,EAAE,EAAE,EAAE;IAE/D,OAAO,uBAAuB,CAC5B,OAAO,EACP,GAAG,EAAE,CAAC,SAAS,CAAC,OAAO,EAAE,OAAO,CAAC,EACjC,gBAAgB,EAChB,CAAC,KAAK,CAAC,EACP,EAAE,QAAQ,EAAE,OAAO,EAAE,YAAY,EAAE,UAAU,EAAE,CAChD,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,uBAAuB,CACrC,OAAe,EACf,IAAY,EACZ,UAAuD,EAAE,cAAc,EAAE,EAAE,EAAE;;IAE7E,MAAM,IAAI,GAAG,iBAAiB,CAC5B,gEAAgE,EAChE;QACE,IAAI,EAAE,IAAI;QACV,aAAa,EAAE,OAAO,CAAC,UAAU;KAClC,EACD;QACE,aAAa,EAAE,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,cAAc,0CAAE,eAAe;KACxD,CACF,CAAC;IACF,OAAO,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,iCACzB,mCAAmC,CAAC,OAAO,CAAC,KAC/C,OAAO,gDACF,CAAC,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,eAAe,MAAK,SAAS;YACxC,CAAC,CAAC,EAAE,wBAAwB,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,eAAe,EAAE;YACxD,CAAC,CAAC,EAAE,CAAC,KACP,MAAM,EAAE,kBAAkB,KACvB,MAAA,OAAO,CAAC,cAAc,0CAAE,OAAO,KAEpC,CAAC;AACL,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,8BAA8B,CAClD,MAA6B;IAE7B,MAAM,gBAAgB,GAAG,CAAC,KAAK,CAAC,CAAC;IACjC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC;QAC9C,MAAM,eAAe,CAAC,MAAM,CAAC,CAAC;IAChC,CAAC;IAED,OAAO,sBAAsB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAC7C,CAAC;AAED,gEAAgE;AAChE,MAAM,CAAC,KAAK,UAAU,kBAAkB,CACtC,OAAe,EACf,IAAY,EACZ,UAAuD,EAAE,cAAc,EAAE,EAAE,EAAE;IAE7E,MAAM,MAAM,GAAG,MAAM,uBAAuB,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;IACrE,OAAO,8BAA8B,CAAC,MAAM,CAAC,CAAC;AAChD,CAAC;AAED,MAAM,UAAU,QAAQ,CACtB,OAAe,EACf,IAAY,EACZ,UAAwC,EAAE,cAAc,EAAE,EAAE,EAAE;;IAE9D,MAAM,IAAI,GAAG,iBAAiB,CAC5B,mCAAmC,EACnC;QACE,IAAI,EAAE,IAAI;QACV,aAAa,EAAE,OAAO,CAAC,UAAU;KAClC,EACD;QACE,aAAa,EAAE,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,cAAc,0CAAE,eAAe;KACxD,CACF,CAAC;IACF,OAAO,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,iCACxB,mCAAmC,CAAC,OAAO,CAAC,KAC/C,OAAO,gDACF,CAAC,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,eAAe,MAAK,SAAS;YACxC,CAAC,CAAC,EAAE,wBAAwB,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,eAAe,EAAE;YACxD,CAAC,CAAC,EAAE,CAAC,KACP,MAAM,EAAE,kBAAkB,KACvB,MAAA,OAAO,CAAC,cAAc,0CAAE,OAAO,KAEpC,CAAC;AACL,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,eAAe,CAAC,MAA6B;IACjE,MAAM,gBAAgB,GAAG,CAAC,KAAK,CAAC,CAAC;IACjC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC;QAC9C,MAAM,eAAe,CAAC,MAAM,CAAC,CAAC;IAChC,CAAC;IAED,OAAO,sBAAsB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAC7C,CAAC;AAED,0EAA0E;AAC1E,MAAM,CAAC,KAAK,UAAU,GAAG,CACvB,OAAe,EACf,IAAY,EACZ,kBAA4B,EAC5B,UAAwC,EAAE,cAAc,EAAE,EAAE,EAAE;IAE9D,IAAI,kBAAkB,EAAE,CAAC;QACvB,OAAO,kBAAkB,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;IACpD,CAAC;IACD,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;IACtD,OAAO,eAAe,CAAC,MAAM,CAAC,CAAC;AACjC,CAAC;AAED;;;;;;;;GAQG;AACH,MAAM,CAAC,KAAK,UAAU,UAAU,CAC9B,OAAe,EACf,cAA8B,EAC9B,qBAA8B,KAAK;;IAEnC,MAAM,WAAW,GAAG;QAClB,cAAc;QACd,iBAAiB,EAAE,IAAI;KACxB,CAAC;IAEF,0EAA0E;IAC1E,MAAM,WAAW,GAAG,IAAI,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;;QAE/C,oCAAoC;QACpC,KAA+B,eAAA,gBAAA,cAAA,WAAW,CAAA,iBAAA,2FAAE,CAAC;YAAd,2BAAW;YAAX,WAAW;YAA/B,MAAM,UAAU,KAAA,CAAA;YACzB,IAAI,kBAAkB,EAAE,CAAC;gBACvB,oEAAoE;gBACpE,OAAO,kBAAkB,CAAC,OAAO,EAAE,UAAU,CAAC,IAAI,CAAC,CAAC;YACtD,CAAC;YACD,OAAO,UAAU,CAAC;QACpB,CAAC;;;;;;;;;IAED,MAAM,IAAI,KAAK,CAAC,yCAAyC,cAAc,GAAG,CAAC,CAAC;AAC9E,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { AIProjectContext as Client } from \"../index.js\";\nimport {\n  Connection,\n  connectionDeserializer,\n  _PagedConnection,\n  _pagedConnectionDeserializer,\n  ConnectionType,\n} from \"../../models/models.js\";\nimport {\n  ConnectionsListOptionalParams,\n  ConnectionsGetWithCredentialsOptionalParams,\n  ConnectionsGetOptionalParams,\n} from \"./options.js\";\nimport { expandUrlTemplate } from \"../../static-helpers/urlTemplate.js\";\nimport {\n  PagedAsyncIterableIterator,\n  buildPagedAsyncIterator,\n} from \"../../static-helpers/pagingHelpers.js\";\nimport {\n  StreamableMethod,\n  PathUncheckedResponse,\n  createRestError,\n  operationOptionsToRequestParameters,\n} from \"@azure-rest/core-client\";\n\nexport function _listSend(\n  context: Client,\n  options: ConnectionsListOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  const path = expandUrlTemplate(\n    \"/connections{?api-version,connectionType,defaultConnection}\",\n    {\n      \"api-version\": context.apiVersion,\n      connectionType: options?.connectionType,\n      defaultConnection: options?.defaultConnection,\n    },\n    {\n      allowReserved: options?.requestOptions?.skipUrlEncoding,\n    },\n  );\n  return context.path(path).get({\n    ...operationOptionsToRequestParameters(options),\n    headers: {\n      ...(options?.clientRequestId !== undefined\n        ? { \"x-ms-client-request-id\": options?.clientRequestId }\n        : {}),\n      accept: \"application/json\",\n      ...options.requestOptions?.headers,\n    },\n  });\n}\n\nexport async function _listDeserialize(result: PathUncheckedResponse): Promise<_PagedConnection> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    throw createRestError(result);\n  }\n\n  return _pagedConnectionDeserializer(result.body);\n}\n\n/** List all connections in the project, without populating connection credentials */\nexport function list(\n  context: Client,\n  options: ConnectionsListOptionalParams = { requestOptions: {} },\n): PagedAsyncIterableIterator<Connection> {\n  return buildPagedAsyncIterator(\n    context,\n    () => _listSend(context, options),\n    _listDeserialize,\n    [\"200\"],\n    { itemName: \"value\", nextLinkName: \"nextLink\" },\n  );\n}\n\nexport function _getWithCredentialsSend(\n  context: Client,\n  name: string,\n  options: ConnectionsGetWithCredentialsOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  const path = expandUrlTemplate(\n    \"/connections/{name}/getConnectionWithCredentials{?api-version}\",\n    {\n      name: name,\n      \"api-version\": context.apiVersion,\n    },\n    {\n      allowReserved: options?.requestOptions?.skipUrlEncoding,\n    },\n  );\n  return context.path(path).post({\n    ...operationOptionsToRequestParameters(options),\n    headers: {\n      ...(options?.clientRequestId !== undefined\n        ? { \"x-ms-client-request-id\": options?.clientRequestId }\n        : {}),\n      accept: \"application/json\",\n      ...options.requestOptions?.headers,\n    },\n  });\n}\n\nexport async function _getWithCredentialsDeserialize(\n  result: PathUncheckedResponse,\n): Promise<Connection> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    throw createRestError(result);\n  }\n\n  return connectionDeserializer(result.body);\n}\n\n/** Get a connection by name, with its connection credentials */\nexport async function getWithCredentials(\n  context: Client,\n  name: string,\n  options: ConnectionsGetWithCredentialsOptionalParams = { requestOptions: {} },\n): Promise<Connection> {\n  const result = await _getWithCredentialsSend(context, name, options);\n  return _getWithCredentialsDeserialize(result);\n}\n\nexport function _getSend(\n  context: Client,\n  name: string,\n  options: ConnectionsGetOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  const path = expandUrlTemplate(\n    \"/connections/{name}{?api-version}\",\n    {\n      name: name,\n      \"api-version\": context.apiVersion,\n    },\n    {\n      allowReserved: options?.requestOptions?.skipUrlEncoding,\n    },\n  );\n  return context.path(path).get({\n    ...operationOptionsToRequestParameters(options),\n    headers: {\n      ...(options?.clientRequestId !== undefined\n        ? { \"x-ms-client-request-id\": options?.clientRequestId }\n        : {}),\n      accept: \"application/json\",\n      ...options.requestOptions?.headers,\n    },\n  });\n}\n\nexport async function _getDeserialize(result: PathUncheckedResponse): Promise<Connection> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    throw createRestError(result);\n  }\n\n  return connectionDeserializer(result.body);\n}\n\n/** Get a connection by name, without populating connection credentials */\nexport async function get(\n  context: Client,\n  name: string,\n  includeCredentials?: boolean,\n  options: ConnectionsGetOptionalParams = { requestOptions: {} },\n): Promise<Connection> {\n  if (includeCredentials) {\n    return getWithCredentials(context, name, options);\n  }\n  const result = await _getSend(context, name, options);\n  return _getDeserialize(result);\n}\n\n/**\n * Get the default connection for a given connection type.\n *\n * @param context - The AIProjectContext client\n * @param connectionType - The type of the connection. Required.\n * @param includeCredentials - Whether to include credentials in the response. Default is false.\n * @returns A Connection object\n * @throws Error if no default connection is found for the given type.\n */\nexport async function getDefault(\n  context: Client,\n  connectionType: ConnectionType,\n  includeCredentials: boolean = false,\n): Promise<Connection> {\n  const listOptions = {\n    connectionType,\n    defaultConnection: true,\n  };\n\n  // Use the list function to find default connections of the specified type\n  const connections = list(context, listOptions);\n\n  // Find the first default connection\n  for await (const connection of connections) {\n    if (includeCredentials) {\n      // If credentials are requested, get the connection with credentials\n      return getWithCredentials(context, connection.name);\n    }\n    return connection;\n  }\n\n  throw new Error(`No default connection found for type: ${connectionType}.`);\n}\n"]}
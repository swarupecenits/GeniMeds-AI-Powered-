{"version":3,"file":"operations.js","sourceRoot":"","sources":["../../../../src/api/telemetry/operations.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;;AAElC,OAAO,EAAE,SAAS,EAAE,MAAM,2BAA2B,CAAC;AAYtD;;;;GAIG;AACH,MAAM,UAAU,yBAAyB,CACvC,gBAAuC;IAEvC,MAAM,KAAK,GAA6B;QACtC,iBAAiB,EAAE,SAAS;KAC7B,CAAC;IAEF,OAAO;QACL;;;;;WAKG;QACH,KAAK,CAAC,mBAAmB;;;YACvB,IAAI,CAAC,KAAK,CAAC,iBAAiB,EAAE,CAAC;gBAC7B,sEAAsE;gBACtE,MAAM,WAAW,GAAiB,EAAE,CAAC;;oBACrC,KAA+B,eAAA,KAAA,cAAA,gBAAgB,CAAC,IAAI,CAAC;wBACnD,cAAc,EAAE,aAAa;wBAC7B,iBAAiB,EAAE,IAAI;qBACxB,CAAC,CAAA,IAAA,sDAAE,CAAC;wBAH0B,cAG7B;wBAH6B,WAG7B;wBAHS,MAAM,UAAU,KAAA,CAAA;wBAIzB,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;oBAC/B,CAAC;;;;;;;;;gBAED,0DAA0D;gBAC1D,MAAM,cAAc,GAAG,MAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAG,CAAC,CAAC,0CAAE,IAAI,CAAC;gBAE9C,IAAI,CAAC,cAAc,EAAE,CAAC;oBACpB,MAAM,IAAI,SAAS,CAAC,2CAA2C,EAAE;wBAC/D,IAAI,EAAE,kBAAkB;wBACxB,UAAU,EAAE,GAAG;qBAChB,CAAC,CAAC;gBACL,CAAC;gBAED,sCAAsC;gBACtC,MAAM,UAAU,GAAG,MAAM,gBAAgB,CAAC,kBAAkB,CAAC,cAAc,CAAC,CAAC;gBAE7E,IAAI,CAAA,MAAA,UAAU,CAAC,WAAW,0CAAE,IAAI,MAAK,QAAQ,EAAE,CAAC;oBAC9C,MAAM,iBAAiB,GAAG,UAAU,CAAC,WAAgC,CAAC;oBACtE,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC;wBAC9B,MAAM,IAAI,KAAK,CAAC,oEAAoE,CAAC,CAAC;oBACxF,CAAC;oBACD,KAAK,CAAC,iBAAiB,GAAG,iBAAiB,CAAC,MAAM,CAAC;gBACrD,CAAC;qBAAM,CAAC;oBACN,MAAM,IAAI,KAAK,CAAC,mEAAmE,CAAC,CAAC;gBACvF,CAAC;YACH,CAAC;YAED,OAAO,KAAK,CAAC,iBAAiB,CAAC;QACjC,CAAC;KACF,CAAC;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { RestError } from \"@azure/core-rest-pipeline\";\nimport type { Connection, ApiKeyCredentials } from \"../../models/models.js\";\nimport type { ConnectionsOperations } from \"../../classic/index.js\";\n\n/**\n * Interface for CreateTelemetryOperations internal state\n * @internal\n */\ninterface TelemetryOperationsState {\n  _connectionString?: string;\n}\n\n/**\n * Creates a new instance of the CreateTelemetryOperations class.\n * @param connectionClient - The connections client to use for operations.\n * @returns A new instance of CreateTelemetryOperations.\n */\nexport function createTelemetryOperations(\n  connectionClient: ConnectionsOperations,\n): CreateTelemetryOperations {\n  const state: TelemetryOperationsState = {\n    _connectionString: undefined,\n  };\n\n  return {\n    /**\n     * Get the Application Insights connection string associated with the Project's Application Insights resource.\n     * @param options - The options parameters.\n     * @returns The Application Insights connection string.\n     * @throws RestError if an Application Insights connection does not exist for this project.\n     */\n    async getConnectionString(): Promise<string> {\n      if (!state._connectionString) {\n        // Get all Application Insights connections that are marked as default\n        const connections: Connection[] = [];\n        for await (const connection of connectionClient.list({\n          connectionType: \"AppInsights\",\n          defaultConnection: true,\n        })) {\n          connections.push(connection);\n        }\n\n        // Find the first connection that is of type \"AppInsights\"\n        const connectionName = connections?.[0]?.name;\n\n        if (!connectionName) {\n          throw new RestError(\"No Application Insights connection found.\", {\n            code: \"ResourceNotFound\",\n            statusCode: 404,\n          });\n        }\n\n        // Get the connection with credentials\n        const connection = await connectionClient.getWithCredentials(connectionName);\n\n        if (connection.credentials?.type === \"ApiKey\") {\n          const apiKeyCredentials = connection.credentials as ApiKeyCredentials;\n          if (!apiKeyCredentials.apiKey) {\n            throw new Error(\"Application Insights connection does not have a connection string.\");\n          }\n          state._connectionString = apiKeyCredentials.apiKey;\n        } else {\n          throw new Error(\"Application Insights connection does not use API Key credentials.\");\n        }\n      }\n\n      return state._connectionString;\n    },\n  };\n}\n\n/**\n * CreateTelemetryOperations provides operations for working with Application Insights telemetry.\n * DO NOT instantiate this class directly.\n * Instead, you should access these operations through the AIProjectClient's telemetry attribute.\n */\nexport interface CreateTelemetryOperations {\n  /**\n   * Get the Application Insights connection string associated with the Project's Application Insights resource.\n   * @param options - The options parameters.\n   * @returns The Application Insights connection string.\n   * @throws RestError if an Application Insights connection does not exist for this project.\n   */\n  getConnectionString(): Promise<string>;\n}\n"]}
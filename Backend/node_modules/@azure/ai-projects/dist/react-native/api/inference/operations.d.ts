import type { GetChatCompletions, GetEmbeddings, GetImageEmbeddings, ModelClient, ModelClientOptions } from "@azure-rest/ai-inference";
import type { AIProjectContext as Client } from "../index.js";
import { AzureOpenAI } from "openai";
import { ConnectionsOperations } from "../../classic/index.js";
import type { AzureOpenAIClientOptions } from "./options.js";
/**
 * Converts an input URL in the format:
 * https://<host-name>/<some-path>
 * to:
 * https://<host-name>/api/models
 *
 * @param url - The input endpoint URL used to construct AIProjectClient.
 * @returns The endpoint URL required to construct inference clients from the @azure-rest/ai-inference package.
 * @throws Error if the URL is not a valid HTTPS URL with a host.
 */
export declare function _getInferenceURL(url: string): string;
/**
 * a generic function to get the inference client for making inference requests.
 * @param context - The AIProjectContext used to construct the client.
 * @param options - Optional parameters for the model client.
 * @returns The ModelClient instance for making inference requests.
 */
export declare function _getInferenceClient(context: Client, options?: ModelClientOptions): ModelClient;
/**
 * Get the chat completions client for making chat completion requests.
 * @param context - The AIProjectContext used to construct the client.
 * @param options - Optional parameters for the model client.
 * @returns The GetChatCompletions instance for making chat completion requests.
 */
export declare function _getChatCompletionsClient(context: Client, options?: ModelClientOptions): GetChatCompletions;
/**
 * Get the embedding client for making embedding requests.
 * @param context - The AIProjectContext used to construct the client.
 * @param options - Optional parameters for the model client.
 * @returns The GetEmbeddings instance for making embedding requests.
 */
export declare function _getEmbeddingClient(context: Client, options?: ModelClientOptions): GetEmbeddings;
/**
 * Get the image embedding client for making image embedding requests.
 * @param context - The AIProjectContext used to construct the client.
 * @param options - Optional parameters for the model client.
 * @returns The GetImageEmbeddings instance for making image embedding requests.
 */
export declare function _getImageEmbeddingClient(context: Client, options?: ModelClientOptions): GetImageEmbeddings;
/**
 * Get an authenticated AzureOpenAI client (from the `openai` package) for the default
 * Azure OpenAI connection (if `connectionName` is not specified), or from the Azure OpenAI
 * resource given by its connection name.
 *
 * @param context - The AIProjectContext used to construct the client.
 * @param connections - The ConnectionsOperations used to manage connections.
 * @param options - Optional parameters.
 * @returns An authenticated AzureOpenAI client.
 * @throws ResourceNotFoundError if an Azure OpenAI connection does not exist.
 * @throws Error if the connection name is an empty string.
 * @throws HttpResponseError for other HTTP-related errors.
 */
export declare function _getAzureOpenAIClient(context: Client, connections: ConnectionsOperations, options?: AzureOpenAIClientOptions): Promise<AzureOpenAI>;
//# sourceMappingURL=operations.d.ts.map
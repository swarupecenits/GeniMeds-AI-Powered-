// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
/* eslint-disable tsdoc/syntax */
import { AgentsClient } from "@azure/ai-agents";
import { createAIProject } from "./api/index.js";
import { _getRedTeamsOperations } from "./classic/redTeams/index.js";
import { _getDeploymentsOperations } from "./classic/deployments/index.js";
import { _getIndexesOperations } from "./classic/indexes/index.js";
import { _getDatasetsOperations } from "./classic/datasets/index.js";
import { _getEvaluationsOperations } from "./classic/evaluations/index.js";
import { _getConnectionsOperations } from "./classic/connections/index.js";
import { _getInferenceOperations } from "./classic/inference/index.js";
import { _getTelemetryOperations, enableTelemetry, } from "./classic/telemetry/index.js";
/**
 * The main client for the AIProjectClient service. It provides access to the various operations available in the service.
 * @class AIProjectClient
 * @extends {AIProjectContext}
 * @description The main client for the AIProjectClient
 * @constructor
 * @param {string} endpoint - The endpoint to use
 * @param {TokenCredential} credential - The credential to use
 * @param {AIProjectClientOptionalParams} [options] - Optional parameters for the client.
 * @property {RedTeamsOperations} redTeams - The operation groups for redTeams
 * @property {DeploymentsOperations} deployments - The operation groups for deployments
 * @property {IndexesOperations} indexes - The operation groups for indexes
 * @property {DatasetsOperations} datasets - The operation groups for datasets
 * @property {EvaluationsOperations} evaluations - The operation groups for evaluations
 * @property {ConnectionsOperations} connections - The operation groups for connections
 * @property {InferenceOperations} inference - The operation groups for inference
 * @property {TelemetryOperations} telemetry - The operation groups for telemetry
 * @property {EnableTelemetryType} enableTelemetry - The operation groups for enabling telemetry
 */
export class AIProjectClient {
    constructor(endpointParam, credential, options = {}) {
        var _a;
        this._endpoint = endpointParam;
        this._credential = credential;
        const prefixFromOptions = (_a = options === null || options === void 0 ? void 0 : options.userAgentOptions) === null || _a === void 0 ? void 0 : _a.userAgentPrefix;
        const userAgentPrefix = prefixFromOptions
            ? `${prefixFromOptions} azsdk-js-client`
            : `azsdk-js-client`;
        this._cognitiveScopeClient = createAIProject(endpointParam, credential, Object.assign(Object.assign({}, options), { userAgentOptions: { userAgentPrefix } }));
        this._azureScopeClient = createAIProject(endpointParam, credential, Object.assign(Object.assign({}, options), { credentials: Object.assign(Object.assign({}, options.credentials), { scopes: ["https://ai.azure.com/.default"] }), userAgentOptions: { userAgentPrefix } }));
        this.pipeline = this._cognitiveScopeClient.pipeline;
        this.redTeams = _getRedTeamsOperations(this._azureScopeClient);
        this.deployments = _getDeploymentsOperations(this._azureScopeClient);
        this.indexes = _getIndexesOperations(this._azureScopeClient);
        this.datasets = _getDatasetsOperations(this._azureScopeClient);
        this.evaluations = _getEvaluationsOperations(this._azureScopeClient);
        this.connections = _getConnectionsOperations(this._azureScopeClient);
        this.inference = _getInferenceOperations(this._cognitiveScopeClient, this.connections);
        this.telemetry = _getTelemetryOperations(this.connections);
        this.enableTelemetry = enableTelemetry;
    }
    /**
     * gets the endpoint of the client
     * @returns the endpoint of the client
     */
    getEndpointUrl() {
        return this._endpoint;
    }
    /**
     * Creates a new instance of AzureAIProjectClient
     * @param endpoint - The endpoint to use
     * @param credential - The credential to use
     * @param options - The parameter for all optional parameters
     */
    static fromEndpoint(endpoint, credential, options = {}) {
        return new AIProjectClient(endpoint, credential, options);
    }
    /**
     * Get the AgentsClient associated with this AIProjectClient.
     *
     * @returns The AgentsClient associated with this AIProjectClient
     */
    // eslint-disable-next-line @azure/azure-sdk/ts-naming-subclients
    get agents() {
        if (!this._agents) {
            this._agents = new AgentsClient(this._endpoint, this._credential, {
                userAgentOptions: this._cognitiveScopeClient.getUserAgent(),
            });
        }
        return this._agents;
    }
}
//# sourceMappingURL=aiProjectClient.js.map
import { AIProjectContext } from "../../api/aiProjectContext.js";
import { IndexUnion } from "../../models/models.js";
import { IndexesCreateOrUpdateOptionalParams, IndexesDeleteOptionalParams, IndexesGetOptionalParams, IndexesListOptionalParams, IndexesListVersionsOptionalParams } from "../../api/indexes/options.js";
import { PagedAsyncIterableIterator } from "../../static-helpers/pagingHelpers.js";
/** Interface representing a Indexes operations. */
export interface IndexesOperations {
    /** Create a new or update an existing Index with the given version id */
    createOrUpdate: (name: string, version: string, body: IndexUnion, options?: IndexesCreateOrUpdateOptionalParams) => Promise<IndexUnion>;
    /** Delete the specific version of the Index */
    /**
     *  @fixme delete is a reserved word that cannot be used as an operation name.
     *         Please add @clientName("clientName") or @clientName("<JS-Specific-Name>", "javascript")
     *         to the operation to override the generated name.
     */
    delete: (name: string, version: string, options?: IndexesDeleteOptionalParams) => Promise<void>;
    /** Get the specific version of the Index */
    get: (name: string, version: string, options?: IndexesGetOptionalParams) => Promise<IndexUnion>;
    /** List the latest version of each Index */
    list: (options?: IndexesListOptionalParams) => PagedAsyncIterableIterator<IndexUnion>;
    /** List all versions of the given Index */
    listVersions: (name: string, options?: IndexesListVersionsOptionalParams) => PagedAsyncIterableIterator<IndexUnion>;
}
export declare function _getIndexesOperations(context: AIProjectContext): IndexesOperations;
//# sourceMappingURL=index.d.ts.map
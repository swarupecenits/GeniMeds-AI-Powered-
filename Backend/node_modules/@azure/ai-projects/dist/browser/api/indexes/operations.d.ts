import { AIProjectContext as Client } from "../index.js";
import { _PagedIndex, IndexUnion } from "../../models/models.js";
import { IndexesCreateOrUpdateOptionalParams, IndexesDeleteOptionalParams, IndexesGetOptionalParams, IndexesListOptionalParams, IndexesListVersionsOptionalParams } from "./options.js";
import { PagedAsyncIterableIterator } from "../../static-helpers/pagingHelpers.js";
import { StreamableMethod, PathUncheckedResponse } from "@azure-rest/core-client";
export declare function _createOrUpdateSend(context: Client, name: string, version: string, body: IndexUnion, options?: IndexesCreateOrUpdateOptionalParams): StreamableMethod;
export declare function _createOrUpdateDeserialize(result: PathUncheckedResponse): Promise<IndexUnion>;
/** Create a new or update an existing Index with the given version id */
export declare function createOrUpdate(context: Client, name: string, version: string, body: IndexUnion, options?: IndexesCreateOrUpdateOptionalParams): Promise<IndexUnion>;
export declare function _$deleteSend(context: Client, name: string, version: string, options?: IndexesDeleteOptionalParams): StreamableMethod;
export declare function _$deleteDeserialize(result: PathUncheckedResponse): Promise<void>;
/** Delete the specific version of the Index */
/**
 *  @fixme delete is a reserved word that cannot be used as an operation name.
 *         Please add @clientName("clientName") or @clientName("<JS-Specific-Name>", "javascript")
 *         to the operation to override the generated name.
 */
export declare function $delete(context: Client, name: string, version: string, options?: IndexesDeleteOptionalParams): Promise<void>;
export declare function _getSend(context: Client, name: string, version: string, options?: IndexesGetOptionalParams): StreamableMethod;
export declare function _getDeserialize(result: PathUncheckedResponse): Promise<IndexUnion>;
/** Get the specific version of the Index */
export declare function get(context: Client, name: string, version: string, options?: IndexesGetOptionalParams): Promise<IndexUnion>;
export declare function _listSend(context: Client, options?: IndexesListOptionalParams): StreamableMethod;
export declare function _listDeserialize(result: PathUncheckedResponse): Promise<_PagedIndex>;
/** List the latest version of each Index */
export declare function list(context: Client, options?: IndexesListOptionalParams): PagedAsyncIterableIterator<IndexUnion>;
export declare function _listVersionsSend(context: Client, name: string, options?: IndexesListVersionsOptionalParams): StreamableMethod;
export declare function _listVersionsDeserialize(result: PathUncheckedResponse): Promise<_PagedIndex>;
/** List all versions of the given Index */
export declare function listVersions(context: Client, name: string, options?: IndexesListVersionsOptionalParams): PagedAsyncIterableIterator<IndexUnion>;
//# sourceMappingURL=operations.d.ts.map
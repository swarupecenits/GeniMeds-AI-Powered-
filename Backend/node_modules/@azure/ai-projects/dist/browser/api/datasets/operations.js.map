{"version":3,"file":"operations.js","sourceRoot":"","sources":["../../../../src/api/datasets/operations.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAClC,iCAAiC;AAEjC,OAAO,KAAK,EAAE,MAAM,IAAI,CAAC;AACzB,OAAO,KAAK,QAAQ,MAAM,MAAM,CAAC;AAEjC,OAAO,EAEL,gCAAgC,EAChC,6BAA6B,EAC7B,+BAA+B,EAG/B,8BAA8B,EAE9B,iCAAiC,EAEjC,mCAAmC,GACpC,MAAM,wBAAwB,CAAC;AAUhC,OAAO,EAAE,iBAAiB,EAAE,MAAM,qCAAqC,CAAC;AACxE,OAAO,EAEL,uBAAuB,GACxB,MAAM,uCAAuC,CAAC;AAC/C,OAAO,EAGL,eAAe,EACf,mCAAmC,GACpC,MAAM,yBAAyB,CAAC;AACjC,OAAO,EAAE,eAAe,EAAE,MAAM,qBAAqB,CAAC;AAEtD,MAAM,UAAU,mBAAmB,CACjC,OAAe,EACf,IAAY,EACZ,OAAe,EACf,UAAgD,EAAE,cAAc,EAAE,EAAE,EAAE;;IAEtE,MAAM,IAAI,GAAG,iBAAiB,CAC5B,+DAA+D,EAC/D;QACE,IAAI,EAAE,IAAI;QACV,OAAO,EAAE,OAAO;QAChB,aAAa,EAAE,OAAO,CAAC,UAAU;KAClC,EACD;QACE,aAAa,EAAE,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,cAAc,0CAAE,eAAe;KACxD,CACF,CAAC;IACF,OAAO,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,iCACzB,mCAAmC,CAAC,OAAO,CAAC,KAC/C,OAAO,kBACL,MAAM,EAAE,kBAAkB,IACvB,MAAA,OAAO,CAAC,cAAc,0CAAE,OAAO,KAEpC,CAAC;AACL,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,0BAA0B,CAC9C,MAA6B;IAE7B,MAAM,gBAAgB,GAAG,CAAC,KAAK,CAAC,CAAC;IACjC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC;QAC9C,MAAM,eAAe,CAAC,MAAM,CAAC,CAAC;IAChC,CAAC;IAED,OAAO,mCAAmC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAC1D,CAAC;AAED,8FAA8F;AAC9F,MAAM,CAAC,KAAK,UAAU,cAAc,CAClC,OAAe,EACf,IAAY,EACZ,OAAe,EACf,UAAgD,EAAE,cAAc,EAAE,EAAE,EAAE;IAEtE,MAAM,MAAM,GAAG,MAAM,mBAAmB,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;IAC1E,OAAO,0BAA0B,CAAC,MAAM,CAAC,CAAC;AAC5C,CAAC;AAED,MAAM,UAAU,kBAAkB,CAChC,OAAe,EACf,IAAY,EACZ,OAAe,EACf,IAA0B,EAC1B,UAA+C,EAAE,cAAc,EAAE,EAAE,EAAE;;IAErE,MAAM,IAAI,GAAG,iBAAiB,CAC5B,sEAAsE,EACtE;QACE,IAAI,EAAE,IAAI;QACV,OAAO,EAAE,OAAO;QAChB,aAAa,EAAE,OAAO,CAAC,UAAU;KAClC,EACD;QACE,aAAa,EAAE,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,cAAc,0CAAE,eAAe;KACxD,CACF,CAAC;IACF,OAAO,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,iCACzB,mCAAmC,CAAC,OAAO,CAAC,KAC/C,WAAW,EAAE,kBAAkB,EAC/B,OAAO,kBACL,MAAM,EAAE,kBAAkB,IACvB,MAAA,OAAO,CAAC,cAAc,0CAAE,OAAO,GAEpC,IAAI,EAAE,8BAA8B,CAAC,IAAI,CAAC,IAC1C,CAAC;AACL,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,yBAAyB,CAC7C,MAA6B;IAE7B,MAAM,gBAAgB,GAAG,CAAC,KAAK,CAAC,CAAC;IACjC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC;QAC9C,MAAM,eAAe,CAAC,MAAM,CAAC,CAAC;IAChC,CAAC;IAED,OAAO,iCAAiC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACxD,CAAC;AAED,yFAAyF;AACzF,MAAM,CAAC,KAAK,UAAU,aAAa,CACjC,OAAe,EACf,IAAY,EACZ,OAAe,EACf,IAA0B,EAC1B,UAA+C,EAAE,cAAc,EAAE,EAAE,EAAE;IAErE,MAAM,MAAM,GAAG,MAAM,kBAAkB,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;IAC/E,OAAO,yBAAyB,CAAC,MAAM,CAAC,CAAC;AAC3C,CAAC;AAED,8IAA8I;AAC9I,KAAK,UAAU,+BAA+B,CAC5C,OAAe,EACf,IAAY,EACZ,OAAe;AACf,8DAA8D;AAC9D,cAAuB;;IAEvB,iEAAiE;IACjE,MAAM,qBAAqB,GAAG,MAAM,aAAa,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE;QACxE,iBAAiB,EAAE,eAAe;QAClC,cAAc;KACS,CAAC,CAAC;IAE3B,MAAM,aAAa,GAAG,qBAAqB,CAAC,aAAa,CAAC;IAC1D,wBAAwB;IACxB,IAAI,CAAC,aAAa,EAAE,CAAC;QACnB,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC,CAAC;IACnE,CAAC;IAED,IAAI,CAAC,CAAA,MAAA,aAAa,CAAC,UAAU,0CAAE,IAAI,CAAA,EAAE,CAAC;QACpC,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;IACpD,CAAC;IAED,IAAI,aAAa,CAAC,UAAU,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC;QAC5C,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;IAChD,CAAC;IAED,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC;QAC3B,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;IACtD,CAAC;IAED,yBAAyB;IACzB,OAAO,CAAC,KAAK,CACX,6EAA6E,qBAAqB,CAAC,eAAe,EAAE,CACrH,CAAC;IACF,OAAO,CAAC,KAAK,CACX,+EAA+E,qBAAqB,CAAC,iBAAiB,EAAE,CACzH,CAAC;IACF,OAAO,CAAC,KAAK,CACX,6DAA6D,aAAa,CAAC,OAAO,EAAE,CACrF,CAAC;IACF,OAAO,CAAC,KAAK,CACX,yEAAyE,aAAa,CAAC,mBAAmB,EAAE,CAC7G,CAAC;IACF,OAAO,CAAC,KAAK,CACX,uEAAuE,aAAa,CAAC,UAAU,CAAC,MAAM,EAAE,CACzG,CAAC;IACF,OAAO,CAAC,KAAK,CACX,qEAAqE,aAAa,CAAC,UAAU,CAAC,IAAI,EAAE,CACrG,CAAC;IAEF,2EAA2E;IAC3E,MAAM,eAAe,GAAG,IAAI,eAAe,CAAC,aAAa,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;IAE7E,OAAO;QACL,eAAe;QACf,OAAO;KACR,CAAC;AACJ,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,UAAU,CAC9B,OAAe,EACf,IAAY,EACZ,OAAe,EACf,QAAgB,EAChB,cAAuB;IAEvB,yBAAyB;IAEzB,MAAM,UAAU,GAAG,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;IAC3C,IAAI,CAAC,UAAU,EAAE,CAAC;QAChB,MAAM,IAAI,KAAK,CAAC,gCAAgC,QAAQ,EAAE,CAAC,CAAC;IAC9D,CAAC;IACD,mCAAmC;IACnC,MAAM,WAAW,GAAG,EAAE,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,WAAW,EAAE,CAAC;IACzD,IAAI,WAAW,EAAE,CAAC;QAChB,MAAM,IAAI,KAAK,CAAC,yEAAyE,CAAC,CAAC;IAC7F,CAAC;IAED,MAAM,EAAE,eAAe,EAAE,OAAO,EAAE,aAAa,EAAE,GAAG,MAAM,+BAA+B,CACvF,OAAO,EACP,IAAI,EACJ,OAAO,EACP,cAAc,CACf,CAAC;IACF,yBAAyB;IACzB,MAAM,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IAC7C,MAAM,eAAe,GAAG,eAAe,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC;IACrE,MAAM,eAAe,CAAC,YAAY,CAAC,EAAE,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC,CAAC;IAElE,MAAM,cAAc,GAAG,MAAM,cAAc,CAAC,OAAO,EAAE,IAAI,EAAE,aAAa,EAAE;QACxE,IAAI,EAAE,IAAI;QACV,OAAO,EAAE,aAAa;QACtB,IAAI,EAAE,UAAU;QAChB,OAAO,EAAE,eAAe,CAAC,GAAG;KAC7B,CAAC,CAAC;IACH,OAAO,cAAc,CAAC;AACxB,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,YAAY,CAChC,OAAe,EACf,IAAY,EACZ,OAAe,EACf,UAAkB,EAClB,cAAuB;IAEvB,6BAA6B;IAC7B,MAAM,YAAY,GAAG,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;IAC/C,IAAI,CAAC,YAAY,EAAE,CAAC;QAClB,MAAM,IAAI,KAAK,CAAC,kCAAkC,UAAU,EAAE,CAAC,CAAC;IAClE,CAAC;IACD,gCAAgC;IAChC,MAAM,MAAM,GAAG,EAAE,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,MAAM,EAAE,CAAC;IACjD,IAAI,MAAM,EAAE,CAAC;QACX,MAAM,IAAI,KAAK,CAAC,qEAAqE,CAAC,CAAC;IACzF,CAAC;IAED,MAAM,EAAE,eAAe,EAAE,OAAO,EAAE,aAAa,EAAE,GAAG,MAAM,+BAA+B,CACvF,OAAO,EACP,IAAI,EACJ,OAAO,EACP,cAAc,CACf,CAAC;IAEF,8DAA8D;IAC9D,KAAK,UAAU,WAAW,CAAC,GAAW,EAAE,WAAqB,EAAE;QAC7D,MAAM,KAAK,GAAG,MAAM,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAE7C,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;YACzB,MAAM,QAAQ,GAAG,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC;YAClC,MAAM,IAAI,GAAG,MAAM,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YAE/C,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,CAAC;gBACvB,MAAM,WAAW,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;YACxC,CAAC;iBAAM,CAAC;gBACN,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC1B,CAAC;QACH,CAAC;QAED,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED,8BAA8B;IAC9B,MAAM,QAAQ,GAAG,MAAM,WAAW,CAAC,UAAU,CAAC,CAAC;IAC/C,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;QAC1B,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;IACnD,CAAC;IAED,oEAAoE;IACpE,KAAK,MAAM,QAAQ,IAAI,QAAQ,EAAE,CAAC;QAChC,yDAAyD;QACzD,MAAM,YAAY,GAAG,QAAQ,CAAC,QAAQ,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAE3F,OAAO,CAAC,KAAK,CACX,iDAAiD,QAAQ,cAAc,YAAY,GAAG,CACvF,CAAC;QAEF,gDAAgD;QAChD,MAAM,UAAU,GAAG,eAAe,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;QAEpE,iEAAiE;QACjE,MAAM,UAAU,GAAG,EAAE,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;QACjD,MAAM,UAAU,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;QAC1C,OAAO,CAAC,KAAK,CACX,gDAAgD,QAAQ,cAAc,YAAY,GAAG,CACtF,CAAC;IACJ,CAAC;IAED,qDAAqD;IACrD,MAAM,cAAc,GAAG,MAAM,cAAc,CAAC,OAAO,EAAE,IAAI,EAAE,aAAa,EAAE;QACxE,IAAI,EAAE,IAAI;QACV,OAAO,EAAE,aAAa;QACtB,IAAI,EAAE,YAAY;QAClB,OAAO,EAAE,eAAe,CAAC,GAAG;KAC7B,CAAC,CAAC;IAEH,OAAO,cAAc,CAAC;AACxB,CAAC;AAED,MAAM,UAAU,mBAAmB,CACjC,OAAe,EACf,IAAY,EACZ,OAAe,EACf,IAAyB,EACzB,UAAgD,EAAE,cAAc,EAAE,EAAE,EAAE;;IAEtE,MAAM,IAAI,GAAG,iBAAiB,CAC5B,mDAAmD,EACnD;QACE,IAAI,EAAE,IAAI;QACV,OAAO,EAAE,OAAO;QAChB,aAAa,EAAE,OAAO,CAAC,UAAU;KAClC,EACD;QACE,aAAa,EAAE,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,cAAc,0CAAE,eAAe;KACxD,CACF,CAAC;IACF,OAAO,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,KAAK,iCAC1B,mCAAmC,CAAC,OAAO,CAAC,KAC/C,WAAW,EAAE,8BAA8B,EAC3C,OAAO,kBACL,MAAM,EAAE,kBAAkB,IACvB,MAAA,OAAO,CAAC,cAAc,0CAAE,OAAO,GAEpC,IAAI,EAAE,6BAA6B,CAAC,IAAI,CAAC,IACzC,CAAC;AACL,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,0BAA0B,CAC9C,MAA6B;IAE7B,MAAM,gBAAgB,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IACxC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC;QAC9C,MAAM,eAAe,CAAC,MAAM,CAAC,CAAC;IAChC,CAAC;IAED,OAAO,+BAA+B,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACtD,CAAC;AAED,kFAAkF;AAClF,MAAM,CAAC,KAAK,UAAU,cAAc,CAClC,OAAe,EACf,IAAY,EACZ,OAAe,EACf,IAAyB,EACzB,UAAgD,EAAE,cAAc,EAAE,EAAE,EAAE;IAEtE,MAAM,MAAM,GAAG,MAAM,mBAAmB,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;IAChF,OAAO,0BAA0B,CAAC,MAAM,CAAC,CAAC;AAC5C,CAAC;AAED,MAAM,UAAU,YAAY,CAC1B,OAAe,EACf,IAAY,EACZ,OAAe,EACf,UAAwC,EAAE,cAAc,EAAE,EAAE,EAAE;;IAE9D,MAAM,IAAI,GAAG,iBAAiB,CAC5B,mDAAmD,EACnD;QACE,IAAI,EAAE,IAAI;QACV,OAAO,EAAE,OAAO;QAChB,aAAa,EAAE,OAAO,CAAC,UAAU;KAClC,EACD;QACE,aAAa,EAAE,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,cAAc,0CAAE,eAAe;KACxD,CACF,CAAC;IACF,OAAO,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,iCAC3B,mCAAmC,CAAC,OAAO,CAAC,KAC/C,OAAO,kBACL,MAAM,EAAE,kBAAkB,IACvB,MAAA,OAAO,CAAC,cAAc,0CAAE,OAAO,KAEpC,CAAC;AACL,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,mBAAmB,CAAC,MAA6B;IACrE,MAAM,gBAAgB,GAAG,CAAC,KAAK,CAAC,CAAC;IACjC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC;QAC9C,MAAM,eAAe,CAAC,MAAM,CAAC,CAAC;IAChC,CAAC;IAED,OAAO;AACT,CAAC;AAED,wDAAwD;AACxD;;;;GAIG;AACH,MAAM,CAAC,KAAK,UAAU,OAAO,CAC3B,OAAe,EACf,IAAY,EACZ,OAAe,EACf,UAAwC,EAAE,cAAc,EAAE,EAAE,EAAE;IAE9D,MAAM,MAAM,GAAG,MAAM,YAAY,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;IACnE,OAAO,mBAAmB,CAAC,MAAM,CAAC,CAAC;AACrC,CAAC;AAED,MAAM,UAAU,QAAQ,CACtB,OAAe,EACf,IAAY,EACZ,OAAe,EACf,UAAqC,EAAE,cAAc,EAAE,EAAE,EAAE;;IAE3D,MAAM,IAAI,GAAG,iBAAiB,CAC5B,mDAAmD,EACnD;QACE,IAAI,EAAE,IAAI;QACV,OAAO,EAAE,OAAO;QAChB,aAAa,EAAE,OAAO,CAAC,UAAU;KAClC,EACD;QACE,aAAa,EAAE,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,cAAc,0CAAE,eAAe;KACxD,CACF,CAAC;IACF,OAAO,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,iCACxB,mCAAmC,CAAC,OAAO,CAAC,KAC/C,OAAO,kBACL,MAAM,EAAE,kBAAkB,IACvB,MAAA,OAAO,CAAC,cAAc,0CAAE,OAAO,KAEpC,CAAC;AACL,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,eAAe,CAAC,MAA6B;IACjE,MAAM,gBAAgB,GAAG,CAAC,KAAK,CAAC,CAAC;IACjC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC;QAC9C,MAAM,eAAe,CAAC,MAAM,CAAC,CAAC;IAChC,CAAC;IAED,OAAO,+BAA+B,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACtD,CAAC;AAED,qDAAqD;AACrD,MAAM,CAAC,KAAK,UAAU,GAAG,CACvB,OAAe,EACf,IAAY,EACZ,OAAe,EACf,UAAqC,EAAE,cAAc,EAAE,EAAE,EAAE;IAE3D,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;IAC/D,OAAO,eAAe,CAAC,MAAM,CAAC,CAAC;AACjC,CAAC;AAED,MAAM,UAAU,SAAS,CACvB,OAAe,EACf,UAAsC,EAAE,cAAc,EAAE,EAAE,EAAE;;IAE5D,MAAM,IAAI,GAAG,iBAAiB,CAC5B,yBAAyB,EACzB;QACE,aAAa,EAAE,OAAO,CAAC,UAAU;KAClC,EACD;QACE,aAAa,EAAE,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,cAAc,0CAAE,eAAe;KACxD,CACF,CAAC;IACF,OAAO,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,iCACxB,mCAAmC,CAAC,OAAO,CAAC,KAC/C,OAAO,kBACL,MAAM,EAAE,kBAAkB,IACvB,MAAA,OAAO,CAAC,cAAc,0CAAE,OAAO,KAEpC,CAAC;AACL,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,gBAAgB,CACpC,MAA6B;IAE7B,MAAM,gBAAgB,GAAG,CAAC,KAAK,CAAC,CAAC;IACjC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC;QAC9C,MAAM,eAAe,CAAC,MAAM,CAAC,CAAC;IAChC,CAAC;IAED,OAAO,gCAAgC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACvD,CAAC;AAED,qDAAqD;AACrD,MAAM,UAAU,IAAI,CAClB,OAAe,EACf,UAAsC,EAAE,cAAc,EAAE,EAAE,EAAE;IAE5D,OAAO,uBAAuB,CAC5B,OAAO,EACP,GAAG,EAAE,CAAC,SAAS,CAAC,OAAO,EAAE,OAAO,CAAC,EACjC,gBAAgB,EAChB,CAAC,KAAK,CAAC,EACP,EAAE,QAAQ,EAAE,OAAO,EAAE,YAAY,EAAE,UAAU,EAAE,CAChD,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,iBAAiB,CAC/B,OAAe,EACf,IAAY,EACZ,UAA8C,EAAE,cAAc,EAAE,EAAE,EAAE;;IAEpE,MAAM,IAAI,GAAG,iBAAiB,CAC5B,yCAAyC,EACzC;QACE,IAAI,EAAE,IAAI;QACV,aAAa,EAAE,OAAO,CAAC,UAAU;KAClC,EACD;QACE,aAAa,EAAE,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,cAAc,0CAAE,eAAe;KACxD,CACF,CAAC;IACF,OAAO,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,iCACxB,mCAAmC,CAAC,OAAO,CAAC,KAC/C,OAAO,kBACL,MAAM,EAAE,kBAAkB,IACvB,MAAA,OAAO,CAAC,cAAc,0CAAE,OAAO,KAEpC,CAAC;AACL,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,wBAAwB,CAC5C,MAA6B;IAE7B,MAAM,gBAAgB,GAAG,CAAC,KAAK,CAAC,CAAC;IACjC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC;QAC9C,MAAM,eAAe,CAAC,MAAM,CAAC,CAAC;IAChC,CAAC;IAED,OAAO,gCAAgC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACvD,CAAC;AAED,oDAAoD;AACpD,MAAM,UAAU,YAAY,CAC1B,OAAe,EACf,IAAY,EACZ,UAA8C,EAAE,cAAc,EAAE,EAAE,EAAE;IAEpE,OAAO,uBAAuB,CAC5B,OAAO,EACP,GAAG,EAAE,CAAC,iBAAiB,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,EAC/C,wBAAwB,EACxB,CAAC,KAAK,CAAC,EACP,EAAE,QAAQ,EAAE,OAAO,EAAE,YAAY,EAAE,UAAU,EAAE,CAChD,CAAC;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/* eslint-disable tsdoc/syntax */\n\nimport * as fs from \"fs\";\nimport * as nodePath from \"path\";\nimport { AIProjectContext as Client } from \"../index.js\";\nimport {\n  _PagedDatasetVersion,\n  _pagedDatasetVersionDeserializer,\n  datasetVersionUnionSerializer,\n  datasetVersionUnionDeserializer,\n  DatasetVersionUnion,\n  PendingUploadRequest,\n  pendingUploadRequestSerializer,\n  PendingUploadResponse,\n  pendingUploadResponseDeserializer,\n  AssetCredentialResponse,\n  assetCredentialResponseDeserializer,\n} from \"../../models/models.js\";\nimport {\n  DatasetsGetCredentialsOptionalParams,\n  DatasetsPendingUploadOptionalParams,\n  DatasetsCreateOrUpdateOptionalParams,\n  DatasetsDeleteOptionalParams,\n  DatasetsGetOptionalParams,\n  DatasetsListOptionalParams,\n  DatasetsListVersionsOptionalParams,\n} from \"./options.js\";\nimport { expandUrlTemplate } from \"../../static-helpers/urlTemplate.js\";\nimport {\n  PagedAsyncIterableIterator,\n  buildPagedAsyncIterator,\n} from \"../../static-helpers/pagingHelpers.js\";\nimport {\n  StreamableMethod,\n  PathUncheckedResponse,\n  createRestError,\n  operationOptionsToRequestParameters,\n} from \"@azure-rest/core-client\";\nimport { ContainerClient } from \"@azure/storage-blob\";\n\nexport function _getCredentialsSend(\n  context: Client,\n  name: string,\n  version: string,\n  options: DatasetsGetCredentialsOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  const path = expandUrlTemplate(\n    \"/datasets/{name}/versions/{version}/credentials{?api-version}\",\n    {\n      name: name,\n      version: version,\n      \"api-version\": context.apiVersion,\n    },\n    {\n      allowReserved: options?.requestOptions?.skipUrlEncoding,\n    },\n  );\n  return context.path(path).post({\n    ...operationOptionsToRequestParameters(options),\n    headers: {\n      accept: \"application/json\",\n      ...options.requestOptions?.headers,\n    },\n  });\n}\n\nexport async function _getCredentialsDeserialize(\n  result: PathUncheckedResponse,\n): Promise<AssetCredentialResponse> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    throw createRestError(result);\n  }\n\n  return assetCredentialResponseDeserializer(result.body);\n}\n\n/** Get the SAS credential to access the storage account associated with a Dataset version. */\nexport async function getCredentials(\n  context: Client,\n  name: string,\n  version: string,\n  options: DatasetsGetCredentialsOptionalParams = { requestOptions: {} },\n): Promise<AssetCredentialResponse> {\n  const result = await _getCredentialsSend(context, name, version, options);\n  return _getCredentialsDeserialize(result);\n}\n\nexport function _pendingUploadSend(\n  context: Client,\n  name: string,\n  version: string,\n  body: PendingUploadRequest,\n  options: DatasetsPendingUploadOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  const path = expandUrlTemplate(\n    \"/datasets/{name}/versions/{version}/startPendingUpload{?api-version}\",\n    {\n      name: name,\n      version: version,\n      \"api-version\": context.apiVersion,\n    },\n    {\n      allowReserved: options?.requestOptions?.skipUrlEncoding,\n    },\n  );\n  return context.path(path).post({\n    ...operationOptionsToRequestParameters(options),\n    contentType: \"application/json\",\n    headers: {\n      accept: \"application/json\",\n      ...options.requestOptions?.headers,\n    },\n    body: pendingUploadRequestSerializer(body),\n  });\n}\n\nexport async function _pendingUploadDeserialize(\n  result: PathUncheckedResponse,\n): Promise<PendingUploadResponse> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    throw createRestError(result);\n  }\n\n  return pendingUploadResponseDeserializer(result.body);\n}\n\n/** Start a new or get an existing pending upload of a dataset for a specific version. */\nexport async function pendingUpload(\n  context: Client,\n  name: string,\n  version: string,\n  body: PendingUploadRequest,\n  options: DatasetsPendingUploadOptionalParams = { requestOptions: {} },\n): Promise<PendingUploadResponse> {\n  const result = await _pendingUploadSend(context, name, version, body, options);\n  return _pendingUploadDeserialize(result);\n}\n\n// Internal helper method to create a new dataset and return a ContainerClient from azure-storage-blob package, to the dataset's blob storage.\nasync function createDatasetAndGetItsContainer(\n  context: Client,\n  name: string,\n  version: string,\n  // Optional connection name for the storage account to be used\n  connectionName?: string,\n): Promise<{ containerClient: ContainerClient; version: string }> {\n  // Start a pending upload to get the container URL with SAS token\n  const pendingUploadResponse = await pendingUpload(context, name, version, {\n    pendingUploadType: \"BlobReference\",\n    connectionName,\n  } as PendingUploadRequest);\n\n  const blobReference = pendingUploadResponse.blobReference;\n  // Validate the response\n  if (!blobReference) {\n    throw new Error(\"Blob reference for consumption is not present\");\n  }\n\n  if (!blobReference.credential?.type) {\n    throw new Error(\"Credential type is not present\");\n  }\n\n  if (blobReference.credential.type !== \"SAS\") {\n    throw new Error(\"Credential type is not SAS\");\n  }\n\n  if (!blobReference.blobUri) {\n    throw new Error(\"Blob URI is not present or empty\");\n  }\n\n  // Optional debug logging\n  console.debug(\n    `[createDatasetAndGetItsContainer] pendingUploadResponse.pendingUploadId = ${pendingUploadResponse.pendingUploadId}`,\n  );\n  console.debug(\n    `[createDatasetAndGetItsContainer] pendingUploadResponse.pendingUploadType = ${pendingUploadResponse.pendingUploadType}`,\n  );\n  console.debug(\n    `[createDatasetAndGetItsContainer] blobReference.blobUri = ${blobReference.blobUri}`,\n  );\n  console.debug(\n    `[createDatasetAndGetItsContainer] blobReference.storageAccountArmId = ${blobReference.storageAccountArmId}`,\n  );\n  console.debug(\n    `[createDatasetAndGetItsContainer] blobReference.credential.sasUri = ${blobReference.credential.sasUri}`,\n  );\n  console.debug(\n    `[createDatasetAndGetItsContainer] blobReference.credential.type = ${blobReference.credential.type}`,\n  );\n\n  // Create container client from the blob URI (which includes the SAS token)\n  const containerClient = new ContainerClient(blobReference.credential.sasUri);\n\n  return {\n    containerClient,\n    version,\n  };\n}\n\nexport async function uploadFile(\n  context: Client,\n  name: string,\n  version: string,\n  filePath: string,\n  connectionName?: string,\n): Promise<DatasetVersionUnion> {\n  // if file does not exist\n\n  const fileExists = fs.existsSync(filePath);\n  if (!fileExists) {\n    throw new Error(`File does not exist at path: ${filePath}`);\n  }\n  // Check if the file is a directory\n  const isDirectory = fs.lstatSync(filePath).isDirectory();\n  if (isDirectory) {\n    throw new Error(`The provided file is actually a folder. Use method uploadFolder instead`);\n  }\n\n  const { containerClient, version: outputVersion } = await createDatasetAndGetItsContainer(\n    context,\n    name,\n    version,\n    connectionName,\n  );\n  // file name as blob name\n  const blobName = nodePath.basename(filePath);\n  const blockBlobClient = containerClient.getBlockBlobClient(blobName);\n  await blockBlobClient.uploadStream(fs.createReadStream(filePath));\n\n  const datasetVersion = await createOrUpdate(context, name, outputVersion, {\n    name: name,\n    version: outputVersion,\n    type: \"uri_file\",\n    dataUri: blockBlobClient.url,\n  });\n  return datasetVersion;\n}\n\nexport async function uploadFolder(\n  context: Client,\n  name: string,\n  version: string,\n  folderPath: string,\n  connectionName?: string,\n): Promise<DatasetVersionUnion> {\n  // Check if the folder exists\n  const folderExists = fs.existsSync(folderPath);\n  if (!folderExists) {\n    throw new Error(`Folder does not exist at path: ${folderPath}`);\n  }\n  // Check if the folder is a file\n  const isFile = fs.lstatSync(folderPath).isFile();\n  if (isFile) {\n    throw new Error(`The provided path is actually a file. Use method uploadFile instead`);\n  }\n\n  const { containerClient, version: outputVersion } = await createDatasetAndGetItsContainer(\n    context,\n    name,\n    version,\n    connectionName,\n  );\n\n  // Helper function to recursively get all files in a directory\n  async function getAllFiles(dir: string, fileList: string[] = []): Promise<string[]> {\n    const files = await fs.promises.readdir(dir);\n\n    for (const file of files) {\n      const filePath = `${dir}/${file}`;\n      const stat = await fs.promises.lstat(filePath);\n\n      if (stat.isDirectory()) {\n        await getAllFiles(filePath, fileList);\n      } else {\n        fileList.push(filePath);\n      }\n    }\n\n    return fileList;\n  }\n\n  // Get all files in the folder\n  const allFiles = await getAllFiles(folderPath);\n  if (allFiles.length === 0) {\n    throw new Error(\"The provided folder is empty.\");\n  }\n\n  // Upload each file to blob storage while maintaining relative paths\n  for (const filePath of allFiles) {\n    // Create blob name as relative path from the base folder\n    const relativePath = nodePath.relative(folderPath, filePath).split(nodePath.sep).join(\"/\");\n\n    console.debug(\n      `[uploadFolderAndCreate] Start uploading file '${filePath}' as blob '${relativePath}'`,\n    );\n\n    // Get a block blob client for the relative path\n    const blobClient = containerClient.getBlockBlobClient(relativePath);\n\n    // Upload the file using a readable stream for better performance\n    const fileStream = fs.createReadStream(filePath);\n    await blobClient.uploadStream(fileStream);\n    console.debug(\n      `[uploadFolderAndCreate] Done uploading file '${filePath}' as blob '${relativePath}'`,\n    );\n  }\n\n  // Create dataset version that references this folder\n  const datasetVersion = await createOrUpdate(context, name, outputVersion, {\n    name: name,\n    version: outputVersion,\n    type: \"uri_folder\",\n    dataUri: containerClient.url,\n  });\n\n  return datasetVersion;\n}\n\nexport function _createOrUpdateSend(\n  context: Client,\n  name: string,\n  version: string,\n  body: DatasetVersionUnion,\n  options: DatasetsCreateOrUpdateOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  const path = expandUrlTemplate(\n    \"/datasets/{name}/versions/{version}{?api-version}\",\n    {\n      name: name,\n      version: version,\n      \"api-version\": context.apiVersion,\n    },\n    {\n      allowReserved: options?.requestOptions?.skipUrlEncoding,\n    },\n  );\n  return context.path(path).patch({\n    ...operationOptionsToRequestParameters(options),\n    contentType: \"application/merge-patch+json\",\n    headers: {\n      accept: \"application/json\",\n      ...options.requestOptions?.headers,\n    },\n    body: datasetVersionUnionSerializer(body),\n  });\n}\n\nexport async function _createOrUpdateDeserialize(\n  result: PathUncheckedResponse,\n): Promise<DatasetVersionUnion> {\n  const expectedStatuses = [\"201\", \"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    throw createRestError(result);\n  }\n\n  return datasetVersionUnionDeserializer(result.body);\n}\n\n/** Create a new or update an existing DatasetVersion with the given version id */\nexport async function createOrUpdate(\n  context: Client,\n  name: string,\n  version: string,\n  body: DatasetVersionUnion,\n  options: DatasetsCreateOrUpdateOptionalParams = { requestOptions: {} },\n): Promise<DatasetVersionUnion> {\n  const result = await _createOrUpdateSend(context, name, version, body, options);\n  return _createOrUpdateDeserialize(result);\n}\n\nexport function _$deleteSend(\n  context: Client,\n  name: string,\n  version: string,\n  options: DatasetsDeleteOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  const path = expandUrlTemplate(\n    \"/datasets/{name}/versions/{version}{?api-version}\",\n    {\n      name: name,\n      version: version,\n      \"api-version\": context.apiVersion,\n    },\n    {\n      allowReserved: options?.requestOptions?.skipUrlEncoding,\n    },\n  );\n  return context.path(path).delete({\n    ...operationOptionsToRequestParameters(options),\n    headers: {\n      accept: \"application/json\",\n      ...options.requestOptions?.headers,\n    },\n  });\n}\n\nexport async function _$deleteDeserialize(result: PathUncheckedResponse): Promise<void> {\n  const expectedStatuses = [\"204\"];\n  if (!expectedStatuses.includes(result.status)) {\n    throw createRestError(result);\n  }\n\n  return;\n}\n\n/** Delete the specific version of the DatasetVersion */\n/**\n *  @fixme delete is a reserved word that cannot be used as an operation name.\n *         Please add @clientName(\"clientName\") or @clientName(\"<JS-Specific-Name>\", \"javascript\")\n *         to the operation to override the generated name.\n */\nexport async function $delete(\n  context: Client,\n  name: string,\n  version: string,\n  options: DatasetsDeleteOptionalParams = { requestOptions: {} },\n): Promise<void> {\n  const result = await _$deleteSend(context, name, version, options);\n  return _$deleteDeserialize(result);\n}\n\nexport function _getSend(\n  context: Client,\n  name: string,\n  version: string,\n  options: DatasetsGetOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  const path = expandUrlTemplate(\n    \"/datasets/{name}/versions/{version}{?api-version}\",\n    {\n      name: name,\n      version: version,\n      \"api-version\": context.apiVersion,\n    },\n    {\n      allowReserved: options?.requestOptions?.skipUrlEncoding,\n    },\n  );\n  return context.path(path).get({\n    ...operationOptionsToRequestParameters(options),\n    headers: {\n      accept: \"application/json\",\n      ...options.requestOptions?.headers,\n    },\n  });\n}\n\nexport async function _getDeserialize(result: PathUncheckedResponse): Promise<DatasetVersionUnion> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    throw createRestError(result);\n  }\n\n  return datasetVersionUnionDeserializer(result.body);\n}\n\n/** Get the specific version of the DatasetVersion */\nexport async function get(\n  context: Client,\n  name: string,\n  version: string,\n  options: DatasetsGetOptionalParams = { requestOptions: {} },\n): Promise<DatasetVersionUnion> {\n  const result = await _getSend(context, name, version, options);\n  return _getDeserialize(result);\n}\n\nexport function _listSend(\n  context: Client,\n  options: DatasetsListOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  const path = expandUrlTemplate(\n    \"/datasets{?api-version}\",\n    {\n      \"api-version\": context.apiVersion,\n    },\n    {\n      allowReserved: options?.requestOptions?.skipUrlEncoding,\n    },\n  );\n  return context.path(path).get({\n    ...operationOptionsToRequestParameters(options),\n    headers: {\n      accept: \"application/json\",\n      ...options.requestOptions?.headers,\n    },\n  });\n}\n\nexport async function _listDeserialize(\n  result: PathUncheckedResponse,\n): Promise<_PagedDatasetVersion> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    throw createRestError(result);\n  }\n\n  return _pagedDatasetVersionDeserializer(result.body);\n}\n\n/** List the latest version of each DatasetVersion */\nexport function list(\n  context: Client,\n  options: DatasetsListOptionalParams = { requestOptions: {} },\n): PagedAsyncIterableIterator<DatasetVersionUnion> {\n  return buildPagedAsyncIterator(\n    context,\n    () => _listSend(context, options),\n    _listDeserialize,\n    [\"200\"],\n    { itemName: \"value\", nextLinkName: \"nextLink\" },\n  );\n}\n\nexport function _listVersionsSend(\n  context: Client,\n  name: string,\n  options: DatasetsListVersionsOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  const path = expandUrlTemplate(\n    \"/datasets/{name}/versions{?api-version}\",\n    {\n      name: name,\n      \"api-version\": context.apiVersion,\n    },\n    {\n      allowReserved: options?.requestOptions?.skipUrlEncoding,\n    },\n  );\n  return context.path(path).get({\n    ...operationOptionsToRequestParameters(options),\n    headers: {\n      accept: \"application/json\",\n      ...options.requestOptions?.headers,\n    },\n  });\n}\n\nexport async function _listVersionsDeserialize(\n  result: PathUncheckedResponse,\n): Promise<_PagedDatasetVersion> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    throw createRestError(result);\n  }\n\n  return _pagedDatasetVersionDeserializer(result.body);\n}\n\n/** List all versions of the given DatasetVersion */\nexport function listVersions(\n  context: Client,\n  name: string,\n  options: DatasetsListVersionsOptionalParams = { requestOptions: {} },\n): PagedAsyncIterableIterator<DatasetVersionUnion> {\n  return buildPagedAsyncIterator(\n    context,\n    () => _listVersionsSend(context, name, options),\n    _listVersionsDeserialize,\n    [\"200\"],\n    { itemName: \"value\", nextLinkName: \"nextLink\" },\n  );\n}\n"]}
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { __asyncValues } from "tslib";
import { RestError } from "@azure/core-rest-pipeline";
/**
 * Creates a new instance of the CreateTelemetryOperations class.
 * @param connectionClient - The connections client to use for operations.
 * @returns A new instance of CreateTelemetryOperations.
 */
export function createTelemetryOperations(connectionClient) {
    const state = {
        _connectionString: undefined,
    };
    return {
        /**
         * Get the Application Insights connection string associated with the Project's Application Insights resource.
         * @param options - The options parameters.
         * @returns The Application Insights connection string.
         * @throws RestError if an Application Insights connection does not exist for this project.
         */
        async getConnectionString() {
            var _a, e_1, _b, _c;
            var _d, _e;
            if (!state._connectionString) {
                // Get all Application Insights connections that are marked as default
                const connections = [];
                try {
                    for (var _f = true, _g = __asyncValues(connectionClient.list({
                        connectionType: "AppInsights",
                        defaultConnection: true,
                    })), _h; _h = await _g.next(), _a = _h.done, !_a; _f = true) {
                        _c = _h.value;
                        _f = false;
                        const connection = _c;
                        connections.push(connection);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (!_f && !_a && (_b = _g.return)) await _b.call(_g);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                // Find the first connection that is of type "AppInsights"
                const connectionName = (_d = connections === null || connections === void 0 ? void 0 : connections[0]) === null || _d === void 0 ? void 0 : _d.name;
                if (!connectionName) {
                    throw new RestError("No Application Insights connection found.", {
                        code: "ResourceNotFound",
                        statusCode: 404,
                    });
                }
                // Get the connection with credentials
                const connection = await connectionClient.getWithCredentials(connectionName);
                if (((_e = connection.credentials) === null || _e === void 0 ? void 0 : _e.type) === "ApiKey") {
                    const apiKeyCredentials = connection.credentials;
                    if (!apiKeyCredentials.apiKey) {
                        throw new Error("Application Insights connection does not have a connection string.");
                    }
                    state._connectionString = apiKeyCredentials.apiKey;
                }
                else {
                    throw new Error("Application Insights connection does not use API Key credentials.");
                }
            }
            return state._connectionString;
        },
    };
}
//# sourceMappingURL=operations.js.map
import { AIProjectContext as Client } from "../index.js";
import { Connection, _PagedConnection, ConnectionType } from "../../models/models.js";
import { ConnectionsListOptionalParams, ConnectionsGetWithCredentialsOptionalParams, ConnectionsGetOptionalParams } from "./options.js";
import { PagedAsyncIterableIterator } from "../../static-helpers/pagingHelpers.js";
import { StreamableMethod, PathUncheckedResponse } from "@azure-rest/core-client";
export declare function _listSend(context: Client, options?: ConnectionsListOptionalParams): StreamableMethod;
export declare function _listDeserialize(result: PathUncheckedResponse): Promise<_PagedConnection>;
/** List all connections in the project, without populating connection credentials */
export declare function list(context: Client, options?: ConnectionsListOptionalParams): PagedAsyncIterableIterator<Connection>;
export declare function _getWithCredentialsSend(context: Client, name: string, options?: ConnectionsGetWithCredentialsOptionalParams): StreamableMethod;
export declare function _getWithCredentialsDeserialize(result: PathUncheckedResponse): Promise<Connection>;
/** Get a connection by name, with its connection credentials */
export declare function getWithCredentials(context: Client, name: string, options?: ConnectionsGetWithCredentialsOptionalParams): Promise<Connection>;
export declare function _getSend(context: Client, name: string, options?: ConnectionsGetOptionalParams): StreamableMethod;
export declare function _getDeserialize(result: PathUncheckedResponse): Promise<Connection>;
/** Get a connection by name, without populating connection credentials */
export declare function get(context: Client, name: string, includeCredentials?: boolean, options?: ConnectionsGetOptionalParams): Promise<Connection>;
/**
 * Get the default connection for a given connection type.
 *
 * @param context - The AIProjectContext client
 * @param connectionType - The type of the connection. Required.
 * @param includeCredentials - Whether to include credentials in the response. Default is false.
 * @returns A Connection object
 * @throws Error if no default connection is found for the given type.
 */
export declare function getDefault(context: Client, connectionType: ConnectionType, includeCredentials?: boolean): Promise<Connection>;
//# sourceMappingURL=operations.d.ts.map
import { AIProjectContext as Client } from "../index.js";
import { Evaluation, EvaluationWithOptionalName, _PagedEvaluation, AgentEvaluationRequest, AgentEvaluation } from "../../models/models.js";
import { EvaluationsCreateAgentEvaluationOptionalParams, EvaluationsCreateOptionalParams, EvaluationsListOptionalParams, EvaluationsGetOptionalParams } from "./options.js";
import { PagedAsyncIterableIterator } from "../../static-helpers/pagingHelpers.js";
import { StreamableMethod, PathUncheckedResponse } from "@azure-rest/core-client";
export declare function _createAgentEvaluationSend(context: Client, evaluation: AgentEvaluationRequest, options?: EvaluationsCreateAgentEvaluationOptionalParams): StreamableMethod;
export declare function _createAgentEvaluationDeserialize(result: PathUncheckedResponse): Promise<AgentEvaluation>;
/** Creates an agent evaluation run. */
export declare function createAgentEvaluation(context: Client, evaluation: AgentEvaluationRequest, options?: EvaluationsCreateAgentEvaluationOptionalParams): Promise<AgentEvaluation>;
export declare function _createSend(context: Client, evaluation: EvaluationWithOptionalName, options?: EvaluationsCreateOptionalParams): StreamableMethod;
export declare function _createDeserialize(result: PathUncheckedResponse): Promise<Evaluation>;
/** Creates an evaluation run. */
export declare function create(context: Client, evaluation: EvaluationWithOptionalName, options?: EvaluationsCreateOptionalParams): Promise<Evaluation>;
export declare function _listSend(context: Client, options?: EvaluationsListOptionalParams): StreamableMethod;
export declare function _listDeserialize(result: PathUncheckedResponse): Promise<_PagedEvaluation>;
/** List evaluation runs */
export declare function list(context: Client, options?: EvaluationsListOptionalParams): PagedAsyncIterableIterator<Evaluation>;
export declare function _getSend(context: Client, name: string, options?: EvaluationsGetOptionalParams): StreamableMethod;
export declare function _getDeserialize(result: PathUncheckedResponse): Promise<Evaluation>;
/** Get an evaluation run by name. */
export declare function get(context: Client, name: string, options?: EvaluationsGetOptionalParams): Promise<Evaluation>;
//# sourceMappingURL=operations.d.ts.map
{"version":3,"file":"enableTelemetry.js","sourceRoot":"","sources":["../../../../src/api/inference/enableTelemetry.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport * as opentelemetry from \"@opentelemetry/api\";\nimport { registerInstrumentations } from \"@opentelemetry/instrumentation\";\nimport { createAzureSdkInstrumentation } from \"@azure/opentelemetry-instrumentation-azure-sdk\";\nimport { OpenAIInstrumentation } from \"@traceloop/instrumentation-openai\";\nimport { LangChainInstrumentation } from \"@traceloop/instrumentation-langchain\";\nimport {\n  ConsoleSpanExporter,\n  NodeTracerProvider,\n  SimpleSpanProcessor,\n} from \"@opentelemetry/sdk-trace-node\";\nimport type { SpanExporter } from \"@opentelemetry/sdk-trace-node\";\nimport { OTLPTraceExporter } from \"@opentelemetry/exporter-trace-otlp-grpc\";\nimport { logs } from \"@opentelemetry/api-logs\";\nimport {\n  LoggerProvider,\n  SimpleLogRecordProcessor,\n  ConsoleLogRecordExporter,\n} from \"@opentelemetry/sdk-logs\";\nimport { OTLPLogExporter } from \"@opentelemetry/exporter-logs-otlp-grpc\";\nimport { logger } from \"../../logger.js\";\n\n/**\n * Enables telemetry collection with OpenTelemetry for Azure AI clients and popular GenAI libraries.\n *\n * Following instrumentations are enabled (when corresponding packages are installed):\n * - Azure AI Agents (`@azure/ai-agents`)\n * - Azure AI Inference (`@azure-rest/ai-inference`)\n * - OpenAI (`@traceloop/instrumentation-openai`)\n * - Langchain (`@traceloop/instrumentation-langchain`)\n *\n * When destination is provided, the method configures OpenTelemetry SDK to export traces to\n * stdout or OTLP (OpenTelemetry protocol) gRPC endpoint. It's recommended for local\n * development only. For production use, make sure to configure OpenTelemetry SDK directly.\n *\n * @param destination - Recommended for local testing only. Set it to `\"stdout\"` for\n *        tracing to console output, or a string holding the OpenTelemetry protocol (OTLP)\n *        endpoint such as \"http://localhost:4317\".\n *        If not provided, the method enables instrumentations, but does not configure OpenTelemetry\n *        SDK to export traces.\n */\nexport function enableTelemetry(destination?: string): void {\n  const spanExporter = getTraceExporter(destination);\n  configureTracing(spanExporter);\n\n  const logExporter = getLogExporter(destination);\n  configureLogging(logExporter);\n\n  // Try to configure Azure SDK tracing and instrument AI Inference\n  try {\n    registerInstrumentations({\n      instrumentations: [createAzureSdkInstrumentation()],\n    });\n  } catch (error) {\n    logger.warning(\"Could not register `createAzureSdkInstrumentation()`\");\n  }\n\n  // TODO: Try to instrument AI Agents\n\n  // Try to instrument OpenAI\n  try {\n    registerInstrumentations({\n      instrumentations: [new OpenAIInstrumentation()],\n    });\n  } catch (error) {\n    logger.warning(\"Could not register `new OpenAIInstrumentation()`\");\n  }\n\n  // Try to instrument Langchain\n  try {\n    registerInstrumentations({\n      instrumentations: [new LangChainInstrumentation()],\n    });\n  } catch (error) {\n    logger.warning(\n      \"Could not call LangchainInstrumentor().instrument()` since \" +\n        \"`@traceloop/instrumentation-langchain` is not installed\",\n    );\n  }\n}\n\n/**\n * Gets the appropriate trace exporter based on the destination\n * @param destination - The destination for exporting traces\n * @returns The trace exporter instance or undefined\n */\nfunction getTraceExporter(\n  destination?: string,\n): ConsoleSpanExporter | OTLPTraceExporter | undefined {\n  if (!destination) {\n    return undefined;\n  }\n\n  try {\n    if (destination === \"stdout\") {\n      return new ConsoleSpanExporter();\n    } else if (typeof destination === \"string\") {\n      return new OTLPTraceExporter({ url: destination });\n    }\n  } catch (error) {\n    logger.error(\"Failed to create trace exporter\", error);\n    return undefined;\n  }\n\n  return undefined;\n}\n\n/**\n * Gets the appropriate log exporter based on the destination\n * @param destination - The destination for exporting logs\n * @returns The log exporter instance or undefined\n */\nfunction getLogExporter(\n  destination?: string,\n): ConsoleLogRecordExporter | OTLPLogExporter | undefined {\n  if (!destination) {\n    return undefined;\n  }\n\n  try {\n    if (destination === \"stdout\") {\n      return new ConsoleLogRecordExporter();\n    } else if (typeof destination === \"string\") {\n      return new OTLPLogExporter({ url: destination });\n    }\n  } catch (error) {\n    logger.warning(\"Failed to configure OpenTelemetry logging exporter.\");\n    return undefined;\n  }\n\n  return undefined;\n}\n\n/**\n * Configures OpenTelemetry tracing\n * @param spanExporter - The span exporter to use\n */\nfunction configureTracing(spanExporter?: ConsoleSpanExporter | OTLPTraceExporter): void {\n  if (!spanExporter) {\n    return;\n  }\n\n  try {\n    let provider: NodeTracerProvider;\n    // Check if tracing was not set up before\n    try {\n      const existingProvider = opentelemetry.trace.getTracerProvider();\n      // Check if the provider is already a NodeTracerProvider by checking for addSpanProcessor method\n      if (\n        !(\"register\" in existingProvider) ||\n        typeof existingProvider.register !== \"function\" ||\n        existingProvider.register.name !== \"register\"\n      ) {\n        // If the provider is not a NodeTracerProvider, we need to set up a new provider\n        provider = new NodeTracerProvider({\n          spanProcessors: [new SimpleSpanProcessor(spanExporter as SpanExporter)],\n        });\n        provider.register();\n      } else {\n        // If the provider is already a NodeTracerProvider, we can use it\n        provider = existingProvider as NodeTracerProvider;\n      }\n    } catch (error) {\n      // If we get here, we need to set up a new provider\n      provider = new NodeTracerProvider({\n        spanProcessors: [new SimpleSpanProcessor(spanExporter as SpanExporter)],\n      });\n      provider.register();\n    }\n  } catch (error) {\n    throw error as Error;\n  }\n}\n\n/**\n * Configures OpenTelemetry logging\n * @param logExporter - The log exporter to use\n */\nfunction configureLogging(logExporter?: ConsoleLogRecordExporter | OTLPLogExporter): void {\n  if (!logExporter) {\n    return;\n  }\n\n  try {\n    let loggerProvider: LoggerProvider;\n    try {\n      const existingProvider = logs.getLoggerProvider();\n      if (!(existingProvider instanceof LoggerProvider)) {\n        loggerProvider = new LoggerProvider();\n        logs.setGlobalLoggerProvider(loggerProvider);\n      } else {\n        loggerProvider = existingProvider as LoggerProvider;\n      }\n    } catch (error) {\n      // If we get here, we need to set up a new provider\n      loggerProvider = new LoggerProvider();\n      logs.setGlobalLoggerProvider(loggerProvider);\n    }\n\n    loggerProvider.addLogRecordProcessor(new SimpleLogRecordProcessor(logExporter));\n  } catch (error) {\n    logger.warning(\n      \"Failed to configure OpenTelemetry logging. This might be because OpenTelemetry logs API is still experimental.\",\n    );\n  }\n}\n"]}
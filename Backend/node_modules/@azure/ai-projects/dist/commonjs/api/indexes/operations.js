"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
/* eslint-disable tsdoc/syntax */
Object.defineProperty(exports, "__esModule", { value: true });
exports._createOrUpdateSend = _createOrUpdateSend;
exports._createOrUpdateDeserialize = _createOrUpdateDeserialize;
exports.createOrUpdate = createOrUpdate;
exports._$deleteSend = _$deleteSend;
exports._$deleteDeserialize = _$deleteDeserialize;
exports.$delete = $delete;
exports._getSend = _getSend;
exports._getDeserialize = _getDeserialize;
exports.get = get;
exports._listSend = _listSend;
exports._listDeserialize = _listDeserialize;
exports.list = list;
exports._listVersionsSend = _listVersionsSend;
exports._listVersionsDeserialize = _listVersionsDeserialize;
exports.listVersions = listVersions;
const models_js_1 = require("../../models/models.js");
const urlTemplate_js_1 = require("../../static-helpers/urlTemplate.js");
const pagingHelpers_js_1 = require("../../static-helpers/pagingHelpers.js");
const core_client_1 = require("@azure-rest/core-client");
function _createOrUpdateSend(context, name, version, body, options = { requestOptions: {} }) {
    var _a, _b;
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/indexes/{name}/versions/{version}{?api-version}", {
        name: name,
        version: version,
        "api-version": context.apiVersion,
    }, {
        allowReserved: (_a = options === null || options === void 0 ? void 0 : options.requestOptions) === null || _a === void 0 ? void 0 : _a.skipUrlEncoding,
    });
    return context.path(path).patch(Object.assign(Object.assign({}, (0, core_client_1.operationOptionsToRequestParameters)(options)), { contentType: "application/merge-patch+json", headers: Object.assign({ accept: "application/json" }, (_b = options.requestOptions) === null || _b === void 0 ? void 0 : _b.headers), body: (0, models_js_1.indexUnionSerializer)(body) }));
}
async function _createOrUpdateDeserialize(result) {
    const expectedStatuses = ["201", "200"];
    if (!expectedStatuses.includes(result.status)) {
        throw (0, core_client_1.createRestError)(result);
    }
    return (0, models_js_1.indexUnionDeserializer)(result.body);
}
/** Create a new or update an existing Index with the given version id */
async function createOrUpdate(context, name, version, body, options = { requestOptions: {} }) {
    const result = await _createOrUpdateSend(context, name, version, body, options);
    return _createOrUpdateDeserialize(result);
}
function _$deleteSend(context, name, version, options = { requestOptions: {} }) {
    var _a, _b;
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/indexes/{name}/versions/{version}{?api-version}", {
        name: name,
        version: version,
        "api-version": context.apiVersion,
    }, {
        allowReserved: (_a = options === null || options === void 0 ? void 0 : options.requestOptions) === null || _a === void 0 ? void 0 : _a.skipUrlEncoding,
    });
    return context.path(path).delete(Object.assign(Object.assign({}, (0, core_client_1.operationOptionsToRequestParameters)(options)), { headers: Object.assign({ accept: "application/json" }, (_b = options.requestOptions) === null || _b === void 0 ? void 0 : _b.headers) }));
}
async function _$deleteDeserialize(result) {
    const expectedStatuses = ["204"];
    if (!expectedStatuses.includes(result.status)) {
        throw (0, core_client_1.createRestError)(result);
    }
    return;
}
/** Delete the specific version of the Index */
/**
 *  @fixme delete is a reserved word that cannot be used as an operation name.
 *         Please add @clientName("clientName") or @clientName("<JS-Specific-Name>", "javascript")
 *         to the operation to override the generated name.
 */
async function $delete(context, name, version, options = { requestOptions: {} }) {
    const result = await _$deleteSend(context, name, version, options);
    return _$deleteDeserialize(result);
}
function _getSend(context, name, version, options = { requestOptions: {} }) {
    var _a, _b;
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/indexes/{name}/versions/{version}{?api-version}", {
        name: name,
        version: version,
        "api-version": context.apiVersion,
    }, {
        allowReserved: (_a = options === null || options === void 0 ? void 0 : options.requestOptions) === null || _a === void 0 ? void 0 : _a.skipUrlEncoding,
    });
    return context.path(path).get(Object.assign(Object.assign({}, (0, core_client_1.operationOptionsToRequestParameters)(options)), { headers: Object.assign({ accept: "application/json" }, (_b = options.requestOptions) === null || _b === void 0 ? void 0 : _b.headers) }));
}
async function _getDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        throw (0, core_client_1.createRestError)(result);
    }
    return (0, models_js_1.indexUnionDeserializer)(result.body);
}
/** Get the specific version of the Index */
async function get(context, name, version, options = { requestOptions: {} }) {
    const result = await _getSend(context, name, version, options);
    return _getDeserialize(result);
}
function _listSend(context, options = { requestOptions: {} }) {
    var _a, _b;
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/indexes{?api-version}", {
        "api-version": context.apiVersion,
    }, {
        allowReserved: (_a = options === null || options === void 0 ? void 0 : options.requestOptions) === null || _a === void 0 ? void 0 : _a.skipUrlEncoding,
    });
    return context.path(path).get(Object.assign(Object.assign({}, (0, core_client_1.operationOptionsToRequestParameters)(options)), { headers: Object.assign({ accept: "application/json" }, (_b = options.requestOptions) === null || _b === void 0 ? void 0 : _b.headers) }));
}
async function _listDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        throw (0, core_client_1.createRestError)(result);
    }
    return (0, models_js_1._pagedIndexDeserializer)(result.body);
}
/** List the latest version of each Index */
function list(context, options = { requestOptions: {} }) {
    return (0, pagingHelpers_js_1.buildPagedAsyncIterator)(context, () => _listSend(context, options), _listDeserialize, ["200"], { itemName: "value", nextLinkName: "nextLink" });
}
function _listVersionsSend(context, name, options = { requestOptions: {} }) {
    var _a, _b;
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/indexes/{name}/versions{?api-version}", {
        name: name,
        "api-version": context.apiVersion,
    }, {
        allowReserved: (_a = options === null || options === void 0 ? void 0 : options.requestOptions) === null || _a === void 0 ? void 0 : _a.skipUrlEncoding,
    });
    return context.path(path).get(Object.assign(Object.assign({}, (0, core_client_1.operationOptionsToRequestParameters)(options)), { headers: Object.assign({ accept: "application/json" }, (_b = options.requestOptions) === null || _b === void 0 ? void 0 : _b.headers) }));
}
async function _listVersionsDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        throw (0, core_client_1.createRestError)(result);
    }
    return (0, models_js_1._pagedIndexDeserializer)(result.body);
}
/** List all versions of the given Index */
function listVersions(context, name, options = { requestOptions: {} }) {
    return (0, pagingHelpers_js_1.buildPagedAsyncIterator)(context, () => _listVersionsSend(context, name, options), _listVersionsDeserialize, ["200"], { itemName: "value", nextLinkName: "nextLink" });
}
//# sourceMappingURL=operations.js.map
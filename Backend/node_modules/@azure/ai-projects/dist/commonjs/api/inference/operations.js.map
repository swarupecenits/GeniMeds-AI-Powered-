{"version":3,"file":"operations.js","sourceRoot":"","sources":["../../../../src/api/inference/operations.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/* eslint-disable tsdoc/syntax */\n\nimport createModelClient from \"@azure-rest/ai-inference\";\nimport type {\n  GetChatCompletions,\n  GetEmbeddings,\n  GetImageEmbeddings,\n  ModelClient,\n  ModelClientOptions,\n} from \"@azure-rest/ai-inference\";\nimport type { TokenCredential } from \"@azure/core-auth\";\nimport { getBearerTokenProvider } from \"@azure/identity\";\nimport type { AIProjectContext as Client } from \"../index.js\";\nimport { AzureOpenAI } from \"openai\";\nimport { ApiKeyCredentials } from \"../../models/models.js\";\nimport { ConnectionsOperations } from \"../../classic/index.js\";\nimport type { AzureOpenAIClientOptions } from \"./options.js\";\n\n/**\n * Converts an input URL in the format:\n * https://<host-name>/<some-path>\n * to:\n * https://<host-name>/api/models\n *\n * @param url - The input endpoint URL used to construct AIProjectClient.\n * @returns The endpoint URL required to construct inference clients from the @azure-rest/ai-inference package.\n * @throws Error if the URL is not a valid HTTPS URL with a host.\n */\nexport function _getInferenceURL(url: string): string {\n  try {\n    const parsedUrl = new URL(url);\n\n    if (parsedUrl.protocol !== \"https:\" || !parsedUrl.hostname) {\n      throw new Error(\"Invalid endpoint URL format. Must be an https URL with a host.\");\n    }\n\n    return `https://${parsedUrl.hostname}/models`;\n  } catch (error) {\n    if (error instanceof TypeError) {\n      throw new Error(\"Invalid URL format. Please provide a valid URL.\");\n    }\n    throw error;\n  }\n}\n\n/**\n * a generic function to get the inference client for making inference requests.\n * @param context - The AIProjectContext used to construct the client.\n * @param options - Optional parameters for the model client.\n * @returns The ModelClient instance for making inference requests.\n */\nexport function _getInferenceClient(context: Client, options?: ModelClientOptions): ModelClient {\n  const url = _getInferenceURL(context.getEndpointUrl());\n  const credential = context.getCredential();\n  const USER_AGENT_APP_ID = \"AIProjectClient\";\n  const userAgentPrefix = options?.userAgentOptions?.userAgentPrefix\n    ? `${options.userAgentOptions.userAgentPrefix}-${USER_AGENT_APP_ID}`\n    : USER_AGENT_APP_ID;\n\n  const clientOptions = {\n    apiVersion: context.apiVersion,\n    ...options,\n    userAgentOptions: {\n      ...options?.userAgentOptions,\n      userAgentPrefix,\n    },\n  };\n\n  if ((clientOptions?.credentials?.scopes || []).length === 0) {\n    clientOptions.credentials = {\n      ...clientOptions.credentials,\n      scopes: [\"https://cognitiveservices.azure.com/.default\"],\n    };\n  }\n\n  const client = createModelClient(url, credential, clientOptions);\n  return client;\n}\n\n/**\n * Get the chat completions client for making chat completion requests.\n * @param context - The AIProjectContext used to construct the client.\n * @param options - Optional parameters for the model client.\n * @returns The GetChatCompletions instance for making chat completion requests.\n */\nexport function _getChatCompletionsClient(\n  context: Client,\n  options?: ModelClientOptions,\n): GetChatCompletions {\n  const inferenceClient = _getInferenceClient(context, options);\n  const chatCompletionsClient = inferenceClient.path(\"/chat/completions\");\n  return chatCompletionsClient;\n}\n\n/**\n * Get the embedding client for making embedding requests.\n * @param context - The AIProjectContext used to construct the client.\n * @param options - Optional parameters for the model client.\n * @returns The GetEmbeddings instance for making embedding requests.\n */\nexport function _getEmbeddingClient(context: Client, options?: ModelClientOptions): GetEmbeddings {\n  const inferenceClient = _getInferenceClient(context, options);\n  const embeddingClient = inferenceClient.path(\"/embeddings\");\n  return embeddingClient;\n}\n\n/**\n * Get the image embedding client for making image embedding requests.\n * @param context - The AIProjectContext used to construct the client.\n * @param options - Optional parameters for the model client.\n * @returns The GetImageEmbeddings instance for making image embedding requests.\n */\nexport function _getImageEmbeddingClient(\n  context: Client,\n  options?: ModelClientOptions,\n): GetImageEmbeddings {\n  const inferenceClient = _getInferenceClient(context, options);\n  const imageEmbeddingClient = inferenceClient.path(\"/images/embeddings\");\n  return imageEmbeddingClient;\n}\n\n/**\n * Converts an input URL in the format:\n * https://<host-name>/<some-path>\n * to:\n * https://<host-name>\n *\n * @param url - The input endpoint URL used to construct AIProjectClient.\n * @returns The endpoint URL required to construct an AzureOpenAI client.\n * @throws Error if the input URL format is invalid.\n */\nfunction _getAoaiInferenceUrl(url: string): string {\n  try {\n    const parsedUrl = new URL(url);\n    if (parsedUrl.protocol !== \"https:\" || !parsedUrl.hostname) {\n      throw new Error(\"Invalid endpoint URL format. Must be an https URL with a host.\");\n    }\n    return `https://${parsedUrl.hostname}`;\n  } catch (e) {\n    // Catches errors from URL constructor (e.g., invalid URL)\n    throw new Error(\n      `Invalid endpoint URL format: ${url}. ${e instanceof Error ? e.message : String(e)}`,\n    );\n  }\n}\n\n/**\n * Get an authenticated AzureOpenAI client (from the `openai` package) for the default\n * Azure OpenAI connection (if `connectionName` is not specified), or from the Azure OpenAI\n * resource given by its connection name.\n *\n * @param context - The AIProjectContext used to construct the client.\n * @param connections - The ConnectionsOperations used to manage connections.\n * @param options - Optional parameters.\n * @returns An authenticated AzureOpenAI client.\n * @throws ResourceNotFoundError if an Azure OpenAI connection does not exist.\n * @throws Error if the connection name is an empty string.\n * @throws HttpResponseError for other HTTP-related errors.\n */\nexport async function _getAzureOpenAIClient(\n  context: Client,\n  connections: ConnectionsOperations,\n  options?: AzureOpenAIClientOptions,\n): Promise<AzureOpenAI> {\n  // Validate connection name if provided\n  if (options?.connectionName === \"\") {\n    throw new Error(\"Connection name cannot be empty\");\n  }\n\n  const connectionName = options?.connectionName;\n\n  if (connectionName) {\n    // Get the specific connection\n    const connection = await connections.getWithCredentials(\n      connectionName,\n      options?.connectionOptions,\n    );\n\n    if (connection.type !== \"AzureOpenAI\") {\n      throw new Error(`Connection '${connectionName}' is not of type Azure OpenAI.`);\n    }\n\n    // Format the endpoint URL\n    const targetUrl = new URL(connection.target);\n    const azureEndpoint = targetUrl.href.endsWith(\"/\")\n      ? targetUrl.href.slice(0, -1)\n      : targetUrl.href;\n    if (connection.credentials.type === \"ApiKey\") {\n      const apiKeyCredential = connection.credentials as ApiKeyCredentials;\n      return new AzureOpenAI({\n        apiKey: apiKeyCredential.apiKey,\n        endpoint: azureEndpoint,\n        apiVersion: options?.apiVersion,\n      });\n    } else if (connection.credentials.type === \"AAD\") {\n      const tokenCredential = context.getCredential() as TokenCredential;\n      return new AzureOpenAI({\n        azureADTokenProvider: async () => {\n          const getAccessToken = getBearerTokenProvider(\n            tokenCredential,\n            \"https://cognitiveservices.azure.com/.default\",\n          );\n          const token = await getAccessToken();\n          return token;\n        },\n        endpoint: azureEndpoint,\n        apiVersion: options?.apiVersion,\n      });\n    } else {\n      throw new Error(\n        `Unsupported authentication type '${connection.credentials.type || \"unknown\"}' for connection '${connectionName}'.`,\n      );\n    }\n  } else {\n    const azureEndpoint = _getAoaiInferenceUrl(context.getEndpointUrl());\n    const tokenCredential = context.getCredential() as TokenCredential;\n    return new AzureOpenAI({\n      azureADTokenProvider: async () => {\n        const getAccessToken = getBearerTokenProvider(\n          tokenCredential,\n          \"https://cognitiveservices.azure.com/.default\",\n        );\n        const token = await getAccessToken();\n        return token;\n      },\n      endpoint: azureEndpoint,\n      apiVersion: options?.apiVersion,\n    });\n  }\n}\n"]}
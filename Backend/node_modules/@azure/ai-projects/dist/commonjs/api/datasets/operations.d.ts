import { AIProjectContext as Client } from "../index.js";
import { _PagedDatasetVersion, DatasetVersionUnion, PendingUploadRequest, PendingUploadResponse, AssetCredentialResponse } from "../../models/models.js";
import { DatasetsGetCredentialsOptionalParams, DatasetsPendingUploadOptionalParams, DatasetsCreateOrUpdateOptionalParams, DatasetsDeleteOptionalParams, DatasetsGetOptionalParams, DatasetsListOptionalParams, DatasetsListVersionsOptionalParams } from "./options.js";
import { PagedAsyncIterableIterator } from "../../static-helpers/pagingHelpers.js";
import { StreamableMethod, PathUncheckedResponse } from "@azure-rest/core-client";
export declare function _getCredentialsSend(context: Client, name: string, version: string, options?: DatasetsGetCredentialsOptionalParams): StreamableMethod;
export declare function _getCredentialsDeserialize(result: PathUncheckedResponse): Promise<AssetCredentialResponse>;
/** Get the SAS credential to access the storage account associated with a Dataset version. */
export declare function getCredentials(context: Client, name: string, version: string, options?: DatasetsGetCredentialsOptionalParams): Promise<AssetCredentialResponse>;
export declare function _pendingUploadSend(context: Client, name: string, version: string, body: PendingUploadRequest, options?: DatasetsPendingUploadOptionalParams): StreamableMethod;
export declare function _pendingUploadDeserialize(result: PathUncheckedResponse): Promise<PendingUploadResponse>;
/** Start a new or get an existing pending upload of a dataset for a specific version. */
export declare function pendingUpload(context: Client, name: string, version: string, body: PendingUploadRequest, options?: DatasetsPendingUploadOptionalParams): Promise<PendingUploadResponse>;
export declare function uploadFile(context: Client, name: string, version: string, filePath: string, connectionName?: string): Promise<DatasetVersionUnion>;
export declare function uploadFolder(context: Client, name: string, version: string, folderPath: string, connectionName?: string): Promise<DatasetVersionUnion>;
export declare function _createOrUpdateSend(context: Client, name: string, version: string, body: DatasetVersionUnion, options?: DatasetsCreateOrUpdateOptionalParams): StreamableMethod;
export declare function _createOrUpdateDeserialize(result: PathUncheckedResponse): Promise<DatasetVersionUnion>;
/** Create a new or update an existing DatasetVersion with the given version id */
export declare function createOrUpdate(context: Client, name: string, version: string, body: DatasetVersionUnion, options?: DatasetsCreateOrUpdateOptionalParams): Promise<DatasetVersionUnion>;
export declare function _$deleteSend(context: Client, name: string, version: string, options?: DatasetsDeleteOptionalParams): StreamableMethod;
export declare function _$deleteDeserialize(result: PathUncheckedResponse): Promise<void>;
/** Delete the specific version of the DatasetVersion */
/**
 *  @fixme delete is a reserved word that cannot be used as an operation name.
 *         Please add @clientName("clientName") or @clientName("<JS-Specific-Name>", "javascript")
 *         to the operation to override the generated name.
 */
export declare function $delete(context: Client, name: string, version: string, options?: DatasetsDeleteOptionalParams): Promise<void>;
export declare function _getSend(context: Client, name: string, version: string, options?: DatasetsGetOptionalParams): StreamableMethod;
export declare function _getDeserialize(result: PathUncheckedResponse): Promise<DatasetVersionUnion>;
/** Get the specific version of the DatasetVersion */
export declare function get(context: Client, name: string, version: string, options?: DatasetsGetOptionalParams): Promise<DatasetVersionUnion>;
export declare function _listSend(context: Client, options?: DatasetsListOptionalParams): StreamableMethod;
export declare function _listDeserialize(result: PathUncheckedResponse): Promise<_PagedDatasetVersion>;
/** List the latest version of each DatasetVersion */
export declare function list(context: Client, options?: DatasetsListOptionalParams): PagedAsyncIterableIterator<DatasetVersionUnion>;
export declare function _listVersionsSend(context: Client, name: string, options?: DatasetsListVersionsOptionalParams): StreamableMethod;
export declare function _listVersionsDeserialize(result: PathUncheckedResponse): Promise<_PagedDatasetVersion>;
/** List all versions of the given DatasetVersion */
export declare function listVersions(context: Client, name: string, options?: DatasetsListVersionsOptionalParams): PagedAsyncIterableIterator<DatasetVersionUnion>;
//# sourceMappingURL=operations.d.ts.map
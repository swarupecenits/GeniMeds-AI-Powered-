"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", { value: true });
exports._listSend = _listSend;
exports._listDeserialize = _listDeserialize;
exports.list = list;
exports._getWithCredentialsSend = _getWithCredentialsSend;
exports._getWithCredentialsDeserialize = _getWithCredentialsDeserialize;
exports.getWithCredentials = getWithCredentials;
exports._getSend = _getSend;
exports._getDeserialize = _getDeserialize;
exports.get = get;
exports.getDefault = getDefault;
const tslib_1 = require("tslib");
const models_js_1 = require("../../models/models.js");
const urlTemplate_js_1 = require("../../static-helpers/urlTemplate.js");
const pagingHelpers_js_1 = require("../../static-helpers/pagingHelpers.js");
const core_client_1 = require("@azure-rest/core-client");
function _listSend(context, options = { requestOptions: {} }) {
    var _a, _b;
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/connections{?api-version,connectionType,defaultConnection}", {
        "api-version": context.apiVersion,
        connectionType: options === null || options === void 0 ? void 0 : options.connectionType,
        defaultConnection: options === null || options === void 0 ? void 0 : options.defaultConnection,
    }, {
        allowReserved: (_a = options === null || options === void 0 ? void 0 : options.requestOptions) === null || _a === void 0 ? void 0 : _a.skipUrlEncoding,
    });
    return context.path(path).get(Object.assign(Object.assign({}, (0, core_client_1.operationOptionsToRequestParameters)(options)), { headers: Object.assign(Object.assign(Object.assign({}, ((options === null || options === void 0 ? void 0 : options.clientRequestId) !== undefined
            ? { "x-ms-client-request-id": options === null || options === void 0 ? void 0 : options.clientRequestId }
            : {})), { accept: "application/json" }), (_b = options.requestOptions) === null || _b === void 0 ? void 0 : _b.headers) }));
}
async function _listDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        throw (0, core_client_1.createRestError)(result);
    }
    return (0, models_js_1._pagedConnectionDeserializer)(result.body);
}
/** List all connections in the project, without populating connection credentials */
function list(context, options = { requestOptions: {} }) {
    return (0, pagingHelpers_js_1.buildPagedAsyncIterator)(context, () => _listSend(context, options), _listDeserialize, ["200"], { itemName: "value", nextLinkName: "nextLink" });
}
function _getWithCredentialsSend(context, name, options = { requestOptions: {} }) {
    var _a, _b;
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/connections/{name}/getConnectionWithCredentials{?api-version}", {
        name: name,
        "api-version": context.apiVersion,
    }, {
        allowReserved: (_a = options === null || options === void 0 ? void 0 : options.requestOptions) === null || _a === void 0 ? void 0 : _a.skipUrlEncoding,
    });
    return context.path(path).post(Object.assign(Object.assign({}, (0, core_client_1.operationOptionsToRequestParameters)(options)), { headers: Object.assign(Object.assign(Object.assign({}, ((options === null || options === void 0 ? void 0 : options.clientRequestId) !== undefined
            ? { "x-ms-client-request-id": options === null || options === void 0 ? void 0 : options.clientRequestId }
            : {})), { accept: "application/json" }), (_b = options.requestOptions) === null || _b === void 0 ? void 0 : _b.headers) }));
}
async function _getWithCredentialsDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        throw (0, core_client_1.createRestError)(result);
    }
    return (0, models_js_1.connectionDeserializer)(result.body);
}
/** Get a connection by name, with its connection credentials */
async function getWithCredentials(context, name, options = { requestOptions: {} }) {
    const result = await _getWithCredentialsSend(context, name, options);
    return _getWithCredentialsDeserialize(result);
}
function _getSend(context, name, options = { requestOptions: {} }) {
    var _a, _b;
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/connections/{name}{?api-version}", {
        name: name,
        "api-version": context.apiVersion,
    }, {
        allowReserved: (_a = options === null || options === void 0 ? void 0 : options.requestOptions) === null || _a === void 0 ? void 0 : _a.skipUrlEncoding,
    });
    return context.path(path).get(Object.assign(Object.assign({}, (0, core_client_1.operationOptionsToRequestParameters)(options)), { headers: Object.assign(Object.assign(Object.assign({}, ((options === null || options === void 0 ? void 0 : options.clientRequestId) !== undefined
            ? { "x-ms-client-request-id": options === null || options === void 0 ? void 0 : options.clientRequestId }
            : {})), { accept: "application/json" }), (_b = options.requestOptions) === null || _b === void 0 ? void 0 : _b.headers) }));
}
async function _getDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        throw (0, core_client_1.createRestError)(result);
    }
    return (0, models_js_1.connectionDeserializer)(result.body);
}
/** Get a connection by name, without populating connection credentials */
async function get(context, name, includeCredentials, options = { requestOptions: {} }) {
    if (includeCredentials) {
        return getWithCredentials(context, name, options);
    }
    const result = await _getSend(context, name, options);
    return _getDeserialize(result);
}
/**
 * Get the default connection for a given connection type.
 *
 * @param context - The AIProjectContext client
 * @param connectionType - The type of the connection. Required.
 * @param includeCredentials - Whether to include credentials in the response. Default is false.
 * @returns A Connection object
 * @throws Error if no default connection is found for the given type.
 */
async function getDefault(context, connectionType, includeCredentials = false) {
    var _a, e_1, _b, _c;
    const listOptions = {
        connectionType,
        defaultConnection: true,
    };
    // Use the list function to find default connections of the specified type
    const connections = list(context, listOptions);
    try {
        // Find the first default connection
        for (var _d = true, connections_1 = tslib_1.__asyncValues(connections), connections_1_1; connections_1_1 = await connections_1.next(), _a = connections_1_1.done, !_a; _d = true) {
            _c = connections_1_1.value;
            _d = false;
            const connection = _c;
            if (includeCredentials) {
                // If credentials are requested, get the connection with credentials
                return getWithCredentials(context, connection.name);
            }
            return connection;
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (!_d && !_a && (_b = connections_1.return)) await _b.call(connections_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    throw new Error(`No default connection found for type: ${connectionType}.`);
}
//# sourceMappingURL=operations.js.map
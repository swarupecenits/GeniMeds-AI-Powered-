"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", { value: true });
exports._createSend = _createSend;
exports._createDeserialize = _createDeserialize;
exports.create = create;
exports._listSend = _listSend;
exports._listDeserialize = _listDeserialize;
exports.list = list;
exports._getSend = _getSend;
exports._getDeserialize = _getDeserialize;
exports.get = get;
const models_js_1 = require("../../models/models.js");
const urlTemplate_js_1 = require("../../static-helpers/urlTemplate.js");
const pagingHelpers_js_1 = require("../../static-helpers/pagingHelpers.js");
const core_client_1 = require("@azure-rest/core-client");
function _createSend(context, redTeam, options = { requestOptions: {} }) {
    var _a, _b;
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/redTeams/runs:run{?api-version}", {
        "api-version": context.apiVersion,
    }, {
        allowReserved: (_a = options === null || options === void 0 ? void 0 : options.requestOptions) === null || _a === void 0 ? void 0 : _a.skipUrlEncoding,
    });
    return context.path(path).post(Object.assign(Object.assign({}, (0, core_client_1.operationOptionsToRequestParameters)(options)), { contentType: "application/json", headers: Object.assign({ accept: "application/json" }, (_b = options.requestOptions) === null || _b === void 0 ? void 0 : _b.headers), body: (0, models_js_1.redTeamSerializer)(redTeam) }));
}
async function _createDeserialize(result) {
    const expectedStatuses = ["201"];
    if (!expectedStatuses.includes(result.status)) {
        throw (0, core_client_1.createRestError)(result);
    }
    return (0, models_js_1.redTeamDeserializer)(result.body);
}
/** Creates a redteam run. */
async function create(context, redTeam, options = { requestOptions: {} }) {
    const result = await _createSend(context, redTeam, options);
    return _createDeserialize(result);
}
function _listSend(context, options = { requestOptions: {} }) {
    var _a, _b;
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/redTeams/runs{?api-version}", {
        "api-version": context.apiVersion,
    }, {
        allowReserved: (_a = options === null || options === void 0 ? void 0 : options.requestOptions) === null || _a === void 0 ? void 0 : _a.skipUrlEncoding,
    });
    return context.path(path).get(Object.assign(Object.assign({}, (0, core_client_1.operationOptionsToRequestParameters)(options)), { headers: Object.assign(Object.assign(Object.assign({}, ((options === null || options === void 0 ? void 0 : options.clientRequestId) !== undefined
            ? { "x-ms-client-request-id": options === null || options === void 0 ? void 0 : options.clientRequestId }
            : {})), { accept: "application/json" }), (_b = options.requestOptions) === null || _b === void 0 ? void 0 : _b.headers) }));
}
async function _listDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        throw (0, core_client_1.createRestError)(result);
    }
    return (0, models_js_1._pagedRedTeamDeserializer)(result.body);
}
/** List a redteam by name. */
function list(context, options = { requestOptions: {} }) {
    return (0, pagingHelpers_js_1.buildPagedAsyncIterator)(context, () => _listSend(context, options), _listDeserialize, ["200"], { itemName: "value", nextLinkName: "nextLink" });
}
function _getSend(context, name, options = { requestOptions: {} }) {
    var _a, _b;
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/redTeams/runs/{name}{?api-version}", {
        name: name,
        "api-version": context.apiVersion,
    }, {
        allowReserved: (_a = options === null || options === void 0 ? void 0 : options.requestOptions) === null || _a === void 0 ? void 0 : _a.skipUrlEncoding,
    });
    return context.path(path).get(Object.assign(Object.assign({}, (0, core_client_1.operationOptionsToRequestParameters)(options)), { headers: Object.assign(Object.assign(Object.assign({}, ((options === null || options === void 0 ? void 0 : options.clientRequestId) !== undefined
            ? { "x-ms-client-request-id": options === null || options === void 0 ? void 0 : options.clientRequestId }
            : {})), { accept: "application/json" }), (_b = options.requestOptions) === null || _b === void 0 ? void 0 : _b.headers) }));
}
async function _getDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        throw (0, core_client_1.createRestError)(result);
    }
    return (0, models_js_1.redTeamDeserializer)(result.body);
}
/** Get a redteam by name. */
async function get(context, name, options = { requestOptions: {} }) {
    const result = await _getSend(context, name, options);
    return _getDeserialize(result);
}
//# sourceMappingURL=operations.js.map
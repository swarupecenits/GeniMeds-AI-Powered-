{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/classic/indexes/index.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;AAClC,iCAAiC;;AA2DjC,sDAIC;AApDD,mEAAmG;AA8BnG,SAAS,WAAW,CAAC,OAAyB;IAC5C,OAAO;QACL,cAAc,EAAE,CACd,IAAY,EACZ,OAAe,EACf,IAAgB,EAChB,OAA6C,EAC7C,EAAE,CAAC,IAAA,8BAAc,EAAC,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC;QAC1D,MAAM,EAAE,CAAC,IAAY,EAAE,OAAe,EAAE,OAAqC,EAAE,EAAE,CAC/E,IAAA,uBAAO,EAAC,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,CAAC;QAC1C,GAAG,EAAE,CAAC,IAAY,EAAE,OAAe,EAAE,OAAkC,EAAE,EAAE,CACzE,IAAA,mBAAG,EAAC,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,CAAC;QACtC,IAAI,EAAE,CAAC,OAAmC,EAAE,EAAE,CAAC,IAAA,oBAAI,EAAC,OAAO,EAAE,OAAO,CAAC;QACrE,YAAY,EAAE,CAAC,IAAY,EAAE,OAA2C,EAAE,EAAE,CAC1E,IAAA,4BAAY,EAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC;KACvC,CAAC;AACJ,CAAC;AAED,SAAgB,qBAAqB,CAAC,OAAyB;IAC7D,yBACK,WAAW,CAAC,OAAO,CAAC,EACvB;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/* eslint-disable tsdoc/syntax */\n\nimport { AIProjectContext } from \"../../api/aiProjectContext.js\";\nimport { IndexUnion } from \"../../models/models.js\";\nimport {\n  IndexesCreateOrUpdateOptionalParams,\n  IndexesDeleteOptionalParams,\n  IndexesGetOptionalParams,\n  IndexesListOptionalParams,\n  IndexesListVersionsOptionalParams,\n} from \"../../api/indexes/options.js\";\nimport { createOrUpdate, $delete, get, list, listVersions } from \"../../api/indexes/operations.js\";\nimport { PagedAsyncIterableIterator } from \"../../static-helpers/pagingHelpers.js\";\n\n/** Interface representing a Indexes operations. */\nexport interface IndexesOperations {\n  /** Create a new or update an existing Index with the given version id */\n  createOrUpdate: (\n    name: string,\n    version: string,\n    body: IndexUnion,\n    options?: IndexesCreateOrUpdateOptionalParams,\n  ) => Promise<IndexUnion>;\n  /** Delete the specific version of the Index */\n  /**\n   *  @fixme delete is a reserved word that cannot be used as an operation name.\n   *         Please add @clientName(\"clientName\") or @clientName(\"<JS-Specific-Name>\", \"javascript\")\n   *         to the operation to override the generated name.\n   */\n  delete: (name: string, version: string, options?: IndexesDeleteOptionalParams) => Promise<void>;\n  /** Get the specific version of the Index */\n  get: (name: string, version: string, options?: IndexesGetOptionalParams) => Promise<IndexUnion>;\n  /** List the latest version of each Index */\n  list: (options?: IndexesListOptionalParams) => PagedAsyncIterableIterator<IndexUnion>;\n  /** List all versions of the given Index */\n  listVersions: (\n    name: string,\n    options?: IndexesListVersionsOptionalParams,\n  ) => PagedAsyncIterableIterator<IndexUnion>;\n}\n\nfunction _getIndexes(context: AIProjectContext) {\n  return {\n    createOrUpdate: (\n      name: string,\n      version: string,\n      body: IndexUnion,\n      options?: IndexesCreateOrUpdateOptionalParams,\n    ) => createOrUpdate(context, name, version, body, options),\n    delete: (name: string, version: string, options?: IndexesDeleteOptionalParams) =>\n      $delete(context, name, version, options),\n    get: (name: string, version: string, options?: IndexesGetOptionalParams) =>\n      get(context, name, version, options),\n    list: (options?: IndexesListOptionalParams) => list(context, options),\n    listVersions: (name: string, options?: IndexesListVersionsOptionalParams) =>\n      listVersions(context, name, options),\n  };\n}\n\nexport function _getIndexesOperations(context: AIProjectContext): IndexesOperations {\n  return {\n    ..._getIndexes(context),\n  };\n}\n"]}
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
/** Thread operation related streaming events */
export var ThreadStreamEvent;
(function (ThreadStreamEvent) {
    /** Event sent when a new thread is created. The data of this event is of type AgentThread */
    ThreadStreamEvent["ThreadCreated"] = "thread.created";
})(ThreadStreamEvent || (ThreadStreamEvent = {}));
/** Run operation related streaming events */
export var RunStreamEvent;
(function (RunStreamEvent) {
    /** Event sent when a new run is created. The data of this event is of type ThreadRun */
    RunStreamEvent["ThreadRunCreated"] = "thread.run.created";
    /** Event sent when a run moves to `queued` status. The data of this event is of type ThreadRun */
    RunStreamEvent["ThreadRunQueued"] = "thread.run.queued";
    /** Event sent when a run moves to `in_progress` status. The data of this event is of type ThreadRun */
    RunStreamEvent["ThreadRunInProgress"] = "thread.run.in_progress";
    /** Event sent when a run moves to `requires_action` status. The data of this event is of type ThreadRun */
    RunStreamEvent["ThreadRunRequiresAction"] = "thread.run.requires_action";
    /** Event sent when a run is completed. The data of this event is of type ThreadRun */
    RunStreamEvent["ThreadRunCompleted"] = "thread.run.completed";
    /** Event sent when a run fails. The data of this event is of type ThreadRun */
    RunStreamEvent["ThreadRunFailed"] = "thread.run.failed";
    /** Event sent when a run moves to `cancelling` status. The data of this event is of type ThreadRun */
    RunStreamEvent["ThreadRunCancelling"] = "thread.run.cancelling";
    /** Event sent when a run is cancelled. The data of this event is of type ThreadRun */
    RunStreamEvent["ThreadRunCancelled"] = "thread.run.cancelled";
    /** Event sent when a run is expired. The data of this event is of type ThreadRun */
    RunStreamEvent["ThreadRunExpired"] = "thread.run.expired";
})(RunStreamEvent || (RunStreamEvent = {}));
/** Run step operation related streaming events */
export var RunStepStreamEvent;
(function (RunStepStreamEvent) {
    /** Event sent when a new thread run step is created. The data of this event is of type RunStep */
    RunStepStreamEvent["ThreadRunStepCreated"] = "thread.run.step.created";
    /** Event sent when a run step moves to `in_progress` status. The data of this event is of type RunStep */
    RunStepStreamEvent["ThreadRunStepInProgress"] = "thread.run.step.in_progress";
    /** Event sent when a run step is being streamed. The data of this event is of type RunStepDeltaChunk */
    RunStepStreamEvent["ThreadRunStepDelta"] = "thread.run.step.delta";
    /** Event sent when a run step is completed. The data of this event is of type RunStep */
    RunStepStreamEvent["ThreadRunStepCompleted"] = "thread.run.step.completed";
    /** Event sent when a run step fails. The data of this event is of type RunStep */
    RunStepStreamEvent["ThreadRunStepFailed"] = "thread.run.step.failed";
    /** Event sent when a run step is cancelled. The data of this event is of type RunStep */
    RunStepStreamEvent["ThreadRunStepCancelled"] = "thread.run.step.cancelled";
    /** Event sent when a run step is expired. The data of this event is of type RunStep */
    RunStepStreamEvent["ThreadRunStepExpired"] = "thread.run.step.expired";
})(RunStepStreamEvent || (RunStepStreamEvent = {}));
/** Message operation related streaming events */
export var MessageStreamEvent;
(function (MessageStreamEvent) {
    /** Event sent when a new message is created. The data of this event is of type ThreadMessage */
    MessageStreamEvent["ThreadMessageCreated"] = "thread.message.created";
    /** Event sent when a message moves to `in_progress` status. The data of this event is of type ThreadMessage */
    MessageStreamEvent["ThreadMessageInProgress"] = "thread.message.in_progress";
    /** Event sent when a message is being streamed. The data of this event is of type MessageDeltaChunk */
    MessageStreamEvent["ThreadMessageDelta"] = "thread.message.delta";
    /** Event sent when a message is completed. The data of this event is of type ThreadMessage */
    MessageStreamEvent["ThreadMessageCompleted"] = "thread.message.completed";
    /** Event sent before a message is completed. The data of this event is of type ThreadMessage */
    MessageStreamEvent["ThreadMessageIncomplete"] = "thread.message.incomplete";
})(MessageStreamEvent || (MessageStreamEvent = {}));
/** Terminal event indicating a server side error while streaming. */
export var ErrorEvent;
(function (ErrorEvent) {
    /** Event sent when an error occurs, such as an internal server error or a timeout. */
    ErrorEvent["Error"] = "error";
})(ErrorEvent || (ErrorEvent = {}));
/** Terminal event indicating the successful end of a stream. */
export var DoneEvent;
(function (DoneEvent) {
    /** Event sent when the stream is done. */
    DoneEvent["Done"] = "done";
})(DoneEvent || (DoneEvent = {}));
//# sourceMappingURL=streamingModels.js.map
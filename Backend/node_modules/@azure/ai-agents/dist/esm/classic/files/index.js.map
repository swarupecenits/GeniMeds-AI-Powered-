{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/classic/files/index.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAgBlC,OAAO,EACL,cAAc,EACd,OAAO,EACP,UAAU,EACV,UAAU,EACV,SAAS,EACT,iBAAiB,GAClB,MAAM,+BAA+B,CAAC;AA+BvC,SAAS,SAAS,CAAC,OAAsB;IACvC,OAAO;QACL,UAAU,EAAE,CAAC,MAAc,EAAE,OAA2C,EAAE,EAAE,CAC1E,cAAc,CAAC,OAAO,EAAE,MAAM,EAAE,OAAO,CAAC;QAC1C,GAAG,EAAE,CAAC,MAAc,EAAE,OAAoC,EAAE,EAAE,CAC5D,OAAO,CAAC,OAAO,EAAE,MAAM,EAAE,OAAO,CAAC;QACnC,MAAM,EAAE,CAAC,MAAc,EAAE,OAAuC,EAAE,EAAE,CAClE,UAAU,CAAC,OAAO,EAAE,MAAM,EAAE,OAAO,CAAC;QACtC,MAAM,EAAE,CACN,IAAwD,EACxD,OAAoB,EACpB,OAAsC,EACtC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,CAAC,QAAQ,EAAE,EAAE,OAAO,CAAC;QAC/F,aAAa,EAAE,CACb,IAAwD,EACxD,OAAoB,EACpB,OAAsC,EACtC,EAAE,CAAC,iBAAiB,CAAC,OAAO,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,CAAC,QAAQ,EAAE,EAAE,OAAO,CAAC;QACvF,IAAI,EAAE,CAAC,OAAsC,EAAE,EAAE,CAAC,SAAS,CAAC,OAAO,EAAE,OAAO,CAAC;KAC9E,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,mBAAmB,CAAC,OAAsB;IACxD,yBACK,SAAS,CAAC,OAAO,CAAC,EACrB;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { AgentsContext } from \"../../api/agentsContext.js\";\nimport {\n  FileListResponse,\n  FileInfo,\n  FilePurpose,\n  FileDeletionStatus,\n} from \"../../models/models.js\";\nimport {\n  FilesGetFileContentOptionalParams,\n  FilesGetFileOptionalParams,\n  FilesDeleteFileOptionalParams,\n  FilesUploadFileOptionalParams,\n  FilesListFilesOptionalParams,\n} from \"../../api/files/options.js\";\nimport {\n  getFileContent,\n  getFile,\n  deleteFile,\n  uploadFile,\n  listFiles,\n  uploadFileAndPoll,\n} from \"../../api/files/operations.js\";\nimport { OperationState, PollerLike } from \"@azure/core-lro\";\nimport { StreamableMethod } from \"@azure-rest/core-client\";\n\n/** Interface representing a Files operations. */\nexport interface FilesOperations {\n  /** Retrieves the raw content of a specific file. */\n  getContent: (\n    fileId: string,\n    options?: FilesGetFileContentOptionalParams,\n  ) => StreamableMethod<string | Uint8Array>;\n  /** Returns information about a specific file. Does not retrieve file content. */\n  get: (fileId: string, options?: FilesGetFileOptionalParams) => Promise<FileInfo>;\n  /** Delete a previously uploaded file. */\n  delete: (fileId: string, options?: FilesDeleteFileOptionalParams) => Promise<FileDeletionStatus>;\n  /** Uploads a file for use by other operations. */\n  upload: (\n    file: ReadableStream<Uint8Array> | NodeJS.ReadableStream,\n    purpose: FilePurpose,\n    options: FilesUploadFileOptionalParams,\n  ) => Promise<FileInfo>;\n  /** Uploads a file for use by other operations with polling */\n  uploadAndPoll: (\n    file: ReadableStream<Uint8Array> | NodeJS.ReadableStream,\n    purpose: FilePurpose,\n    options: FilesUploadFileOptionalParams,\n  ) => PollerLike<OperationState<FileInfo>, FileInfo>;\n  /** Gets a list of previously uploaded files. */\n  list: (options?: FilesListFilesOptionalParams) => Promise<FileListResponse>;\n}\n\nfunction _getFiles(context: AgentsContext) {\n  return {\n    getContent: (fileId: string, options?: FilesGetFileContentOptionalParams) =>\n      getFileContent(context, fileId, options),\n    get: (fileId: string, options?: FilesGetFileOptionalParams) =>\n      getFile(context, fileId, options),\n    delete: (fileId: string, options?: FilesDeleteFileOptionalParams) =>\n      deleteFile(context, fileId, options),\n    upload: (\n      file: ReadableStream<Uint8Array> | NodeJS.ReadableStream,\n      purpose: FilePurpose,\n      options: FilesUploadFileOptionalParams,\n    ) => uploadFile(context, { file: file, purpose: purpose, filename: options.fileName }, options),\n    uploadAndPoll: (\n      file: ReadableStream<Uint8Array> | NodeJS.ReadableStream,\n      purpose: FilePurpose,\n      options: FilesUploadFileOptionalParams,\n    ) => uploadFileAndPoll(context, { file, purpose, filename: options.fileName }, options),\n    list: (options?: FilesListFilesOptionalParams) => listFiles(context, options),\n  };\n}\n\nexport function _getFilesOperations(context: AgentsContext): FilesOperations {\n  return {\n    ..._getFiles(context),\n  };\n}\n"]}
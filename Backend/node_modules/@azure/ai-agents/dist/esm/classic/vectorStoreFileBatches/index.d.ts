import { AgentsContext } from "../../api/agentsContext.js";
import { VectorStoreFileBatch } from "../../models/models.js";
import { VectorStoreFileBatchesListVectorStoreFileBatchFilesOptionalParams, VectorStoreFileBatchesCancelVectorStoreFileBatchOptionalParams, VectorStoreFileBatchesGetVectorStoreFileBatchOptionalParams, VectorStoreFileBatchesCreateVectorStoreFileBatchOptionalParams } from "../../api/vectorStoreFileBatches/options.js";
import { OperationState, PollerLike } from "@azure/core-lro";
import { PagedAsyncIterableIterator } from "../../static-helpers/pagingHelpers.js";
/** Interface representing a VectorStoreFileBatches operations. */
export interface VectorStoreFileBatchesOperations {
    /** Returns a list of vector store files in a batch. */
    list: (vectorStoreId: string, batchId: string, options?: VectorStoreFileBatchesListVectorStoreFileBatchFilesOptionalParams) => PagedAsyncIterableIterator<VectorStoreFileBatch>;
    /** Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible. */
    cancel: (vectorStoreId: string, batchId: string, options?: VectorStoreFileBatchesCancelVectorStoreFileBatchOptionalParams) => Promise<VectorStoreFileBatch>;
    /** Retrieve a vector store file batch. */
    get: (vectorStoreId: string, batchId: string, options?: VectorStoreFileBatchesGetVectorStoreFileBatchOptionalParams) => Promise<VectorStoreFileBatch>;
    /** Create a vector store file batch. */
    create: (vectorStoreId: string, options?: VectorStoreFileBatchesCreateVectorStoreFileBatchOptionalParams) => Promise<VectorStoreFileBatch>;
    /** Create a vector store file batch and poll. */
    createAndPoll: (vectorStoreId: string, options?: VectorStoreFileBatchesCreateVectorStoreFileBatchOptionalParams) => PollerLike<OperationState<VectorStoreFileBatch>, VectorStoreFileBatch>;
}
export declare function _getVectorStoreFileBatchesOperations(context: AgentsContext): VectorStoreFileBatchesOperations;
//# sourceMappingURL=index.d.ts.map
import { AgentsContext as Client } from "./index.js";
import { Agent, _AgentsPagedResultAgent, AgentDeletionStatus, ThreadRun } from "../models/models.js";
import { CreateThreadAndRunOptionalParams, DeleteAgentOptionalParams, UpdateAgentOptionalParams, GetAgentOptionalParams, ListAgentsOptionalParams, CreateAgentOptionalParams } from "./options.js";
import { PagedAsyncIterableIterator } from "../static-helpers/pagingHelpers.js";
import { StreamableMethod, PathUncheckedResponse } from "@azure-rest/core-client";
import { AgentEventMessageStream, AgentRunResponse } from "../models/streamingModels.js";
import { RunsCreateRunOptionalParams, RunsSubmitToolOutputsToRunOptionalParams } from "./runs/options.js";
export declare function _createThreadAndRunSend(context: Client, assistantId: string, options?: CreateThreadAndRunOptionalParams): StreamableMethod;
export declare function _createThreadAndRunDeserialize(result: PathUncheckedResponse): Promise<ThreadRun>;
/** Creates a new agent thread and immediately starts a run using that new thread. */
export declare function createThreadAndRun(context: Client, assistantId: string, options?: CreateThreadAndRunOptionalParams): AgentRunResponse;
export declare function _deleteAgentSend(context: Client, assistantId: string, options?: DeleteAgentOptionalParams): StreamableMethod;
export declare function _deleteAgentDeserialize(result: PathUncheckedResponse): Promise<AgentDeletionStatus>;
/** Deletes an agent. */
export declare function deleteAgent(context: Client, assistantId: string, options?: DeleteAgentOptionalParams): Promise<AgentDeletionStatus>;
export declare function _updateAgentSend(context: Client, assistantId: string, options?: UpdateAgentOptionalParams): StreamableMethod;
export declare function _updateAgentDeserialize(result: PathUncheckedResponse): Promise<Agent>;
/** Modifies an existing agent. */
export declare function updateAgent(context: Client, assistantId: string, options?: UpdateAgentOptionalParams): Promise<Agent>;
export declare function _getAgentSend(context: Client, assistantId: string, options?: GetAgentOptionalParams): StreamableMethod;
export declare function _getAgentDeserialize(result: PathUncheckedResponse): Promise<Agent>;
/** Retrieves an existing agent. */
export declare function getAgent(context: Client, assistantId: string, options?: GetAgentOptionalParams): Promise<Agent>;
export declare function _listAgentsSend(context: Client, options?: ListAgentsOptionalParams): StreamableMethod;
export declare function _listAgentsDeserialize(result: PathUncheckedResponse): Promise<_AgentsPagedResultAgent>;
/** Gets a list of agents that were previously created. */
export declare function listAgents(context: Client, options?: ListAgentsOptionalParams): PagedAsyncIterableIterator<Agent>;
export declare function _createAgentSend(context: Client, model: string, options?: CreateAgentOptionalParams): StreamableMethod;
export declare function _createAgentDeserialize(result: PathUncheckedResponse): Promise<Agent>;
/** Creates a new agent. */
export declare function createAgent(context: Client, model: string, options?: CreateAgentOptionalParams): Promise<Agent>;
/** Create a run and stream the events */
export declare function createRunStreaming(context: Client, assistantId: string, threadId: string, options?: RunsCreateRunOptionalParams): Promise<AgentEventMessageStream>;
/** Create a thread and run and stream the events */
export declare function createThreadAndRunStreaming(context: Client, assistantId: string, options?: CreateThreadAndRunOptionalParams): Promise<AgentEventMessageStream>;
export declare function submitToolOutputsToRunStreaming(context: Client, threadId: string, runId: string, options?: RunsSubmitToolOutputsToRunOptionalParams): Promise<AgentEventMessageStream>;
//# sourceMappingURL=operations.d.ts.map
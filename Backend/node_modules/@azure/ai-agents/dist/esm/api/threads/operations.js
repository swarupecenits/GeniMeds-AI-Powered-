// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { toolResourcesSerializer, threadMessageOptionsArraySerializer, agentThreadDeserializer, _agentsPagedResultAgentThreadDeserializer, threadDeletionStatusDeserializer, } from "../../models/models.js";
import { buildPagedAsyncIterator, } from "../../static-helpers/pagingHelpers.js";
import { expandUrlTemplate } from "../../static-helpers/urlTemplate.js";
import { createRestError, operationOptionsToRequestParameters, } from "@azure-rest/core-client";
export function _deleteThreadSend(context, threadId, options = { requestOptions: {} }) {
    var _a, _b;
    const path = expandUrlTemplate("/threads/{threadId}{?api%2Dversion}", {
        threadId: threadId,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: (_a = options === null || options === void 0 ? void 0 : options.requestOptions) === null || _a === void 0 ? void 0 : _a.skipUrlEncoding,
    });
    return context.path(path).delete(Object.assign(Object.assign({}, operationOptionsToRequestParameters(options)), { headers: Object.assign({ accept: "application/json" }, (_b = options.requestOptions) === null || _b === void 0 ? void 0 : _b.headers) }));
}
export async function _deleteThreadDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        throw createRestError(result);
    }
    return threadDeletionStatusDeserializer(result.body);
}
/** Deletes an existing thread. */
export async function deleteThread(context, threadId, options = { requestOptions: {} }) {
    const result = await _deleteThreadSend(context, threadId, options);
    return _deleteThreadDeserialize(result);
}
export function _updateThreadSend(context, threadId, options = { requestOptions: {} }) {
    var _a, _b;
    const path = expandUrlTemplate("/threads/{threadId}{?api%2Dversion}", {
        threadId: threadId,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: (_a = options === null || options === void 0 ? void 0 : options.requestOptions) === null || _a === void 0 ? void 0 : _a.skipUrlEncoding,
    });
    return context.path(path).post(Object.assign(Object.assign({}, operationOptionsToRequestParameters(options)), { contentType: "application/json", headers: Object.assign({ accept: "application/json" }, (_b = options.requestOptions) === null || _b === void 0 ? void 0 : _b.headers), body: {
            tool_resources: !(options === null || options === void 0 ? void 0 : options.toolResources)
                ? options === null || options === void 0 ? void 0 : options.toolResources
                : toolResourcesSerializer(options === null || options === void 0 ? void 0 : options.toolResources),
            metadata: options === null || options === void 0 ? void 0 : options.metadata,
        } }));
}
export async function _updateThreadDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        throw createRestError(result);
    }
    return agentThreadDeserializer(result.body);
}
/** Modifies an existing thread. */
export async function updateThread(context, threadId, options = { requestOptions: {} }) {
    const result = await _updateThreadSend(context, threadId, options);
    return _updateThreadDeserialize(result);
}
export function _getThreadSend(context, threadId, options = { requestOptions: {} }) {
    var _a, _b;
    const path = expandUrlTemplate("/threads/{threadId}{?api%2Dversion}", {
        threadId: threadId,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: (_a = options === null || options === void 0 ? void 0 : options.requestOptions) === null || _a === void 0 ? void 0 : _a.skipUrlEncoding,
    });
    return context.path(path).get(Object.assign(Object.assign({}, operationOptionsToRequestParameters(options)), { headers: Object.assign({ accept: "application/json" }, (_b = options.requestOptions) === null || _b === void 0 ? void 0 : _b.headers) }));
}
export async function _getThreadDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        throw createRestError(result);
    }
    return agentThreadDeserializer(result.body);
}
/** Gets information about an existing thread. */
export async function getThread(context, threadId, options = { requestOptions: {} }) {
    const result = await _getThreadSend(context, threadId, options);
    return _getThreadDeserialize(result);
}
export function _listThreadsSend(context, options = { requestOptions: {} }) {
    var _a, _b;
    const path = expandUrlTemplate("/threads{?api%2Dversion,limit,order,after,before}", {
        "api%2Dversion": context.apiVersion,
        limit: options === null || options === void 0 ? void 0 : options.limit,
        order: options === null || options === void 0 ? void 0 : options.order,
        after: options === null || options === void 0 ? void 0 : options.after,
        before: options === null || options === void 0 ? void 0 : options.before,
    }, {
        allowReserved: (_a = options === null || options === void 0 ? void 0 : options.requestOptions) === null || _a === void 0 ? void 0 : _a.skipUrlEncoding,
    });
    return context.path(path).get(Object.assign(Object.assign({}, operationOptionsToRequestParameters(options)), { headers: Object.assign({ accept: "application/json" }, (_b = options.requestOptions) === null || _b === void 0 ? void 0 : _b.headers) }));
}
export async function _listThreadsDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        throw createRestError(result);
    }
    return _agentsPagedResultAgentThreadDeserializer(result.body);
}
/** Gets a list of threads that were previously created. */
export function listThreads(context, options = { requestOptions: {} }) {
    return buildPagedAsyncIterator(context, () => _listThreadsSend(context, options), _listThreadsDeserialize, ["200"], { itemName: "data" });
}
export function _createThreadSend(context, options = { requestOptions: {} }) {
    var _a, _b;
    const path = expandUrlTemplate("/threads{?api%2Dversion}", {
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: (_a = options === null || options === void 0 ? void 0 : options.requestOptions) === null || _a === void 0 ? void 0 : _a.skipUrlEncoding,
    });
    return context.path(path).post(Object.assign(Object.assign({}, operationOptionsToRequestParameters(options)), { contentType: "application/json", headers: Object.assign({ accept: "application/json" }, (_b = options.requestOptions) === null || _b === void 0 ? void 0 : _b.headers), body: {
            messages: !(options === null || options === void 0 ? void 0 : options.messages)
                ? options === null || options === void 0 ? void 0 : options.messages
                : threadMessageOptionsArraySerializer(options === null || options === void 0 ? void 0 : options.messages),
            tool_resources: !(options === null || options === void 0 ? void 0 : options.toolResources)
                ? options === null || options === void 0 ? void 0 : options.toolResources
                : toolResourcesSerializer(options === null || options === void 0 ? void 0 : options.toolResources),
            metadata: options === null || options === void 0 ? void 0 : options.metadata,
        } }));
}
export async function _createThreadDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        throw createRestError(result);
    }
    return agentThreadDeserializer(result.body);
}
/** Creates a new thread. Threads contain messages and can be run by agents. */
export async function createThread(context, options = { requestOptions: {} }) {
    const result = await _createThreadSend(context, options);
    return _createThreadDeserialize(result);
}
//# sourceMappingURL=operations.js.map
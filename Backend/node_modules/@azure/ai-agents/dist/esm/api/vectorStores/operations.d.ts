import { AgentsContext as Client } from "../index.js";
import { _AgentsPagedResultVectorStore, VectorStore, VectorStoreDeletionStatus } from "../../models/models.js";
import { VectorStoresDeleteVectorStoreOptionalParams, VectorStoresModifyVectorStoreOptionalParams, VectorStoresGetVectorStoreOptionalParams, VectorStoresCreateVectorStoreOptionalParams, VectorStoresListVectorStoresOptionalParams } from "./options.js";
import { PagedAsyncIterableIterator } from "../../static-helpers/pagingHelpers.js";
import { StreamableMethod, PathUncheckedResponse } from "@azure-rest/core-client";
import { PollerLike, OperationState } from "@azure/core-lro";
export declare function _deleteVectorStoreSend(context: Client, vectorStoreId: string, options?: VectorStoresDeleteVectorStoreOptionalParams): StreamableMethod;
export declare function _deleteVectorStoreDeserialize(result: PathUncheckedResponse): Promise<VectorStoreDeletionStatus>;
/** Deletes the vector store object matching the specified ID. */
export declare function deleteVectorStore(context: Client, vectorStoreId: string, options?: VectorStoresDeleteVectorStoreOptionalParams): Promise<VectorStoreDeletionStatus>;
export declare function _modifyVectorStoreSend(context: Client, vectorStoreId: string, options?: VectorStoresModifyVectorStoreOptionalParams): StreamableMethod;
export declare function _modifyVectorStoreDeserialize(result: PathUncheckedResponse): Promise<VectorStore>;
/** Modifies an existing vector store. */
export declare function modifyVectorStore(context: Client, vectorStoreId: string, options?: VectorStoresModifyVectorStoreOptionalParams): Promise<VectorStore>;
export declare function _getVectorStoreSend(context: Client, vectorStoreId: string, options?: VectorStoresGetVectorStoreOptionalParams): StreamableMethod;
export declare function _getVectorStoreDeserialize(result: PathUncheckedResponse): Promise<VectorStore>;
/** Returns the vector store object matching the specified ID. */
export declare function getVectorStore(context: Client, vectorStoreId: string, options?: VectorStoresGetVectorStoreOptionalParams): Promise<VectorStore>;
export declare function _createVectorStoreSend(context: Client, options?: VectorStoresCreateVectorStoreOptionalParams): StreamableMethod;
export declare function _createVectorStoreDeserialize(result: PathUncheckedResponse): Promise<VectorStore>;
/** Creates a vector store. */
export declare function createVectorStoreInternal(context: Client, options?: VectorStoresCreateVectorStoreOptionalParams): Promise<VectorStore>;
/** Creates a vector store. */
export declare function createVectorStore(context: Client, options?: VectorStoresCreateVectorStoreOptionalParams): PollerLike<OperationState<VectorStore>, VectorStore>;
/**
 * Creates a vector store and poll.
 */
export declare function createVectorStoreAndPoll(context: Client, options?: VectorStoresCreateVectorStoreOptionalParams): PollerLike<OperationState<VectorStore>, VectorStore>;
export declare function _listVectorStoresSend(context: Client, options?: VectorStoresListVectorStoresOptionalParams): StreamableMethod;
export declare function _listVectorStoresDeserialize(result: PathUncheckedResponse): Promise<_AgentsPagedResultVectorStore>;
/** Returns a list of vector stores. */
export declare function listVectorStores(context: Client, options?: VectorStoresListVectorStoresOptionalParams): PagedAsyncIterableIterator<VectorStore>;
//# sourceMappingURL=operations.d.ts.map
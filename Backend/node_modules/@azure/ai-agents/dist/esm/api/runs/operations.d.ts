import type { AgentsContext as Client } from "../index.js";
import type { ThreadRun, _AgentsPagedResultThreadRun, ToolOutput } from "../../models/models.js";
import type { RunsCancelRunOptionalParams, RunsSubmitToolOutputsToRunOptionalParams, RunsUpdateRunOptionalParams, RunsGetRunOptionalParams, RunsListRunsOptionalParams, RunsCreateRunOptionalParams } from "./options.js";
import type { PagedAsyncIterableIterator } from "../../static-helpers/pagingHelpers.js";
import type { StreamableMethod, PathUncheckedResponse } from "@azure-rest/core-client";
import type { AgentRunResponse } from "../../models/streamingModels.js";
import type { OperationState, PollerLike } from "@azure/core-lro";
export declare function _cancelRunSend(context: Client, threadId: string, runId: string, options?: RunsCancelRunOptionalParams): StreamableMethod;
export declare function _cancelRunDeserialize(result: PathUncheckedResponse): Promise<ThreadRun>;
/** Cancels a run of an in‚Äêprogress thread. */
export declare function cancelRun(context: Client, threadId: string, runId: string, options?: RunsCancelRunOptionalParams): Promise<ThreadRun>;
export declare function _submitToolOutputsToRunSend(context: Client, threadId: string, runId: string, toolOutputs: ToolOutput[], options?: RunsSubmitToolOutputsToRunOptionalParams): StreamableMethod;
export declare function _submitToolOutputsToRunDeserialize(result: PathUncheckedResponse): Promise<ThreadRun>;
/** Submits outputs from tools as requested by tool calls in a run. */
export declare function submitToolOutputsToRun(context: Client, threadId: string, runId: string, toolOutputs: ToolOutput[], options?: RunsSubmitToolOutputsToRunOptionalParams): AgentRunResponse;
export declare function _updateRunSend(context: Client, threadId: string, runId: string, options?: RunsUpdateRunOptionalParams): StreamableMethod;
export declare function _updateRunDeserialize(result: PathUncheckedResponse): Promise<ThreadRun>;
/** Modifies an existing thread run. */
export declare function updateRun(context: Client, threadId: string, runId: string, options?: RunsUpdateRunOptionalParams): Promise<ThreadRun>;
export declare function _getRunSend(context: Client, threadId: string, runId: string, options?: RunsGetRunOptionalParams): StreamableMethod;
export declare function _getRunDeserialize(result: PathUncheckedResponse): Promise<ThreadRun>;
/** Gets an existing run from an existing thread. */
export declare function getRun(context: Client, threadId: string, runId: string, options?: RunsGetRunOptionalParams): Promise<ThreadRun>;
export declare function _listRunsSend(context: Client, threadId: string, options?: RunsListRunsOptionalParams): StreamableMethod;
export declare function _listRunsDeserialize(result: PathUncheckedResponse): Promise<_AgentsPagedResultThreadRun>;
/** Gets a list of runs for a specified thread. */
export declare function listRuns(context: Client, threadId: string, options?: RunsListRunsOptionalParams): PagedAsyncIterableIterator<ThreadRun>;
export declare function _createRunSend(context: Client, threadId: string, assistantId: string, options?: RunsCreateRunOptionalParams): StreamableMethod;
export declare function _createRunDeserialize(result: PathUncheckedResponse): Promise<ThreadRun>;
/** Creates a new run for an agent thread. */
export declare function createRun(context: Client, threadId: string, assistantId: string, options?: RunsCreateRunOptionalParams): AgentRunResponse;
export declare function createRunAndPoll(context: Client, threadId: string, assistantId: string, options?: RunsCreateRunOptionalParams): PollerLike<OperationState<ThreadRun>, ThreadRun>;
//# sourceMappingURL=operations.d.ts.map
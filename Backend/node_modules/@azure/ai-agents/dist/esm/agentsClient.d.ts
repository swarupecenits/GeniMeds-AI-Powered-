import type { AgentsClientOptionalParams } from "./api/index.js";
import type { Agent, AgentDeletionStatus } from "./models/models.js";
import type { DeleteAgentOptionalParams, UpdateAgentOptionalParams, GetAgentOptionalParams, ListAgentsOptionalParams, CreateAgentOptionalParams } from "./api/options.js";
import type { VectorStoreFileBatchesOperations } from "./classic/vectorStoreFileBatches/index.js";
import type { VectorStoreFilesOperations } from "./classic/vectorStoreFiles/index.js";
import type { VectorStoresOperations } from "./classic/vectorStores/index.js";
import type { FilesOperations } from "./classic/files/index.js";
import type { RunStepsOperations } from "./classic/runSteps/index.js";
import type { RunsOperations } from "./classic/runs/index.js";
import type { MessagesOperations } from "./classic/messages/index.js";
import type { ThreadsOperations } from "./classic/threads/index.js";
import type { PagedAsyncIterableIterator } from "./static-helpers/pagingHelpers.js";
import type { Pipeline } from "@azure/core-rest-pipeline";
import type { KeyCredential, TokenCredential } from "@azure/core-auth";
export { AgentsClientOptionalParams } from "./api/agentsContext.js";
export declare class AgentsClient {
    private _client;
    /** The pipeline used by this client to make requests */
    readonly pipeline: Pipeline;
    constructor(endpointParam: string, credential: KeyCredential | TokenCredential, options?: AgentsClientOptionalParams);
    /** The operation groups for vectorStoreFileBatches */
    readonly vectorStoreFileBatches: VectorStoreFileBatchesOperations;
    /** The operation groups for vectorStoreFiles */
    readonly vectorStoreFiles: VectorStoreFilesOperations;
    /** The operation groups for vectorStores */
    readonly vectorStores: VectorStoresOperations;
    /** The operation groups for files */
    readonly files: FilesOperations;
    /** The operation groups for runSteps */
    readonly runSteps: RunStepsOperations;
    /** The operation groups for runs */
    readonly runs: RunsOperations;
    /** The operation groups for messages */
    readonly messages: MessagesOperations;
    /** The operation groups for threads */
    readonly threads: ThreadsOperations;
    /** Deletes an agent. */
    deleteAgent(assistantId: string, options?: DeleteAgentOptionalParams): Promise<AgentDeletionStatus>;
    /** Modifies an existing agent. */
    updateAgent(assistantId: string, options?: UpdateAgentOptionalParams): Promise<Agent>;
    /** Retrieves an existing agent. */
    getAgent(assistantId: string, options?: GetAgentOptionalParams): Promise<Agent>;
    /** Gets a list of agents that were previously created. */
    listAgents(options?: ListAgentsOptionalParams): PagedAsyncIterableIterator<Agent>;
    /** Creates a new agent. */
    createAgent(model: string, options?: CreateAgentOptionalParams): Promise<Agent>;
}
//# sourceMappingURL=agentsClient.d.ts.map
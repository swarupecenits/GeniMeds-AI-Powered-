{"version":3,"file":"multipartHelpers.js","sourceRoot":"","sources":["../../../src/static-helpers/multipartHelpers.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAYlC,MAAM,UAAU,wBAAwB,CACtC,QAAgB;AAChB,6EAA6E;AAC7E,SAAc,EACd,kBAA2B;;IAE3B,IAAI,SAAS,CAAC,QAAQ,EAAE,CAAC;QACvB,OAAO;YACL,IAAI,EAAE,QAAQ;YACd,IAAI,EAAE,SAAS,CAAC,QAAQ;YACxB,WAAW,EAAE,MAAA,SAAS,CAAC,WAAW,mCAAI,kBAAkB;YACxD,QAAQ,EAAE,SAAS,CAAC,QAAQ;SAC7B,CAAC;IACJ,CAAC;SAAM,CAAC;QACN,OAAO;YACL,IAAI,EAAE,QAAQ;YACd,IAAI,EAAE,SAAS;YACf,WAAW,EAAE,kBAAkB;SAChC,CAAC;IACJ,CAAC;AACH,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * Valid values for the contents of a binary file.\n */\nexport type FileContents =\n  | string\n  | NodeJS.ReadableStream\n  | ReadableStream<Uint8Array>\n  | Uint8Array\n  | Blob;\n\nexport function createFilePartDescriptor(\n  partName: string,\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  fileInput: any,\n  defaultContentType?: string,\n): any {\n  if (fileInput.contents) {\n    return {\n      name: partName,\n      body: fileInput.contents,\n      contentType: fileInput.contentType ?? defaultContentType,\n      filename: fileInput.filename,\n    };\n  } else {\n    return {\n      name: partName,\n      body: fileInput,\n      contentType: defaultContentType,\n    };\n  }\n}\n"]}
import type { FileContents } from "../static-helpers/multipartHelpers.js";
/** An abstract representation of an input tool definition that an agent can use. */
export interface ToolDefinition {
    /** The object type. */
    /** The discriminator possible values: code_interpreter, file_search, function, bing_grounding, fabric_dataagent, sharepoint_grounding, azure_ai_search, openapi, bing_custom_search, connected_agent, azure_function */
    type: string;
}
export declare function toolDefinitionSerializer(item: ToolDefinition): any;
export declare function toolDefinitionDeserializer(item: any): ToolDefinition;
/** Alias for ToolDefinitionUnion */
export type ToolDefinitionUnion = CodeInterpreterToolDefinition | FileSearchToolDefinition | FunctionToolDefinition | BingGroundingToolDefinition | MicrosoftFabricToolDefinition | SharepointToolDefinition | AzureAISearchToolDefinition | OpenApiToolDefinition | BingCustomSearchToolDefinition | ConnectedAgentToolDefinition | AzureFunctionToolDefinition | ToolDefinition;
export declare function toolDefinitionUnionSerializer(item: ToolDefinitionUnion): any;
export declare function toolDefinitionUnionDeserializer(item: any): ToolDefinitionUnion;
/** The input definition information for a code interpreter tool as used to configure an agent. */
export interface CodeInterpreterToolDefinition extends ToolDefinition {
    /** The object type, which is always 'code_interpreter'. */
    type: "code_interpreter";
}
export declare function codeInterpreterToolDefinitionSerializer(item: CodeInterpreterToolDefinition): any;
export declare function codeInterpreterToolDefinitionDeserializer(item: any): CodeInterpreterToolDefinition;
/** The input definition information for a file search tool as used to configure an agent. */
export interface FileSearchToolDefinition extends ToolDefinition {
    /** The object type, which is always 'file_search'. */
    type: "file_search";
    /** Options overrides for the file search tool. */
    fileSearch?: FileSearchToolDefinitionDetails;
}
export declare function fileSearchToolDefinitionSerializer(item: FileSearchToolDefinition): any;
export declare function fileSearchToolDefinitionDeserializer(item: any): FileSearchToolDefinition;
/** Options overrides for the file search tool. */
export interface FileSearchToolDefinitionDetails {
    /**
     * The maximum number of results the file search tool should output. The default is 20 for gpt-4* models and 5 for gpt-3.5-turbo. This number should be between 1 and 50 inclusive.
     *
     * Note that the file search tool may output fewer than `max_num_results` results. See the file search tool documentation for more information.
     */
    maxNumResults?: number;
    /** Ranking options for file search. */
    rankingOptions?: FileSearchRankingOptions;
}
export declare function fileSearchToolDefinitionDetailsSerializer(item: FileSearchToolDefinitionDetails): any;
export declare function fileSearchToolDefinitionDetailsDeserializer(item: any): FileSearchToolDefinitionDetails;
/** Ranking options for file search. */
export interface FileSearchRankingOptions {
    /** File search ranker. */
    ranker: string;
    /** Ranker search threshold. */
    scoreThreshold: number;
}
export declare function fileSearchRankingOptionsSerializer(item: FileSearchRankingOptions): any;
export declare function fileSearchRankingOptionsDeserializer(item: any): FileSearchRankingOptions;
/** The input definition information for a function tool as used to configure an agent. */
export interface FunctionToolDefinition extends ToolDefinition {
    /** The object type, which is always 'function'. */
    type: "function";
    /** The definition of the concrete function that the function tool should call. */
    function: FunctionDefinition;
}
export declare function functionToolDefinitionSerializer(item: FunctionToolDefinition): any;
export declare function functionToolDefinitionDeserializer(item: any): FunctionToolDefinition;
/** The input definition information for a function. */
export interface FunctionDefinition {
    /** The name of the function to be called. */
    name: string;
    /** A description of what the function does, used by the model to choose when and how to call the function. */
    description?: string;
    /** The parameters the functions accepts, described as a JSON Schema object. */
    parameters: any;
}
export declare function functionDefinitionSerializer(item: FunctionDefinition): any;
export declare function functionDefinitionDeserializer(item: any): FunctionDefinition;
/** The input definition information for a bing grounding search tool as used to configure an agent. */
export interface BingGroundingToolDefinition extends ToolDefinition {
    /** The object type, which is always 'bing_grounding'. */
    type: "bing_grounding";
    /** The list of search configurations used by the bing grounding tool. */
    bingGrounding: BingGroundingSearchConfigurationList;
}
export declare function bingGroundingToolDefinitionSerializer(item: BingGroundingToolDefinition): any;
export declare function bingGroundingToolDefinitionDeserializer(item: any): BingGroundingToolDefinition;
/** A list of search configurations currently used by the `bing_grounding` tool. */
export interface BingGroundingSearchConfigurationList {
    /**
     * The search configurations attached to this tool. There can be a maximum of 1
     * search configuration resource attached to the tool.
     */
    searchConfigurations: BingGroundingSearchConfiguration[];
}
export declare function bingGroundingSearchConfigurationListSerializer(item: BingGroundingSearchConfigurationList): any;
export declare function bingGroundingSearchConfigurationListDeserializer(item: any): BingGroundingSearchConfigurationList;
export declare function bingGroundingSearchConfigurationArraySerializer(result: Array<BingGroundingSearchConfiguration>): any[];
export declare function bingGroundingSearchConfigurationArrayDeserializer(result: Array<BingGroundingSearchConfiguration> | undefined): any[];
/** Search configuration for Bing Grounding */
export interface BingGroundingSearchConfiguration {
    /** Connection id for grounding with bing search */
    connectionId: string;
    /** The market where the results come from. */
    market?: string;
    /** The language to use for user interface strings when calling Bing API. */
    setLang?: string;
    /** The number of search results to return in the bing api response */
    count?: number;
    /** Filter search results by a specific time range. Accepted values: https://learn.microsoft.com/bing/search-apis/bing-web-search/reference/query-parameters */
    freshness?: string;
}
export declare function bingGroundingSearchConfigurationSerializer(item: BingGroundingSearchConfiguration): any;
export declare function bingGroundingSearchConfigurationDeserializer(item: any): BingGroundingSearchConfiguration;
/** The input definition information for a Microsoft Fabric tool as used to configure an agent. */
export interface MicrosoftFabricToolDefinition extends ToolDefinition {
    /** The object type, which is always 'fabric_dataagent'. */
    type: "fabric_dataagent";
    /** The list of connections used by the Microsoft Fabric tool. */
    fabricDataagent: ToolConnectionList;
}
export declare function microsoftFabricToolDefinitionSerializer(item: MicrosoftFabricToolDefinition): any;
export declare function microsoftFabricToolDefinitionDeserializer(item: any): MicrosoftFabricToolDefinition;
/** A set of connection resources currently used by either the `bing_grounding`, `fabric_dataagent`, or `sharepoint_grounding` tools. */
export interface ToolConnectionList {
    /**
     * The connections attached to this tool. There can be a maximum of 1 connection
     * resource attached to the tool.
     */
    connectionList?: ToolConnection[];
}
export declare function toolConnectionListSerializer(item: ToolConnectionList): any;
export declare function toolConnectionListDeserializer(item: any): ToolConnectionList;
export declare function toolConnectionArraySerializer(result: Array<ToolConnection>): any[];
export declare function toolConnectionArrayDeserializer(result: Array<ToolConnection>): any[];
/** A connection resource. */
export interface ToolConnection {
    /** A connection in a ToolConnectionList attached to this tool. */
    connectionId: string;
}
export declare function toolConnectionSerializer(item: ToolConnection): any;
export declare function toolConnectionDeserializer(item: any): ToolConnection;
/** The input definition information for a sharepoint tool as used to configure an agent. */
export interface SharepointToolDefinition extends ToolDefinition {
    /** The object type, which is always 'sharepoint_grounding'. */
    type: "sharepoint_grounding";
    /** The list of connections used by the SharePoint tool. */
    sharepointGrounding: ToolConnectionList;
}
export declare function sharepointToolDefinitionSerializer(item: SharepointToolDefinition): any;
export declare function sharepointToolDefinitionDeserializer(item: any): SharepointToolDefinition;
/** The input definition information for an Azure AI search tool as used to configure an agent. */
export interface AzureAISearchToolDefinition extends ToolDefinition {
    /** The object type, which is always 'azure_ai_search'. */
    type: "azure_ai_search";
}
export declare function azureAISearchToolDefinitionSerializer(item: AzureAISearchToolDefinition): any;
export declare function azureAISearchToolDefinitionDeserializer(item: any): AzureAISearchToolDefinition;
/** The input definition information for an OpenAPI tool as used to configure an agent. */
export interface OpenApiToolDefinition extends ToolDefinition {
    /** The object type, which is always 'openapi'. */
    type: "openapi";
    /** The openapi function definition. */
    openapi: OpenApiFunctionDefinition;
}
export declare function openApiToolDefinitionSerializer(item: OpenApiToolDefinition): any;
export declare function openApiToolDefinitionDeserializer(item: any): OpenApiToolDefinition;
/** The input definition information for an openapi function. */
export interface OpenApiFunctionDefinition {
    /** The name of the function to be called. */
    name: string;
    /** A description of what the function does, used by the model to choose when and how to call the function. */
    description?: string;
    /** The openapi function shape, described as a JSON Schema object. */
    spec: any;
    /** Open API authentication details */
    auth: OpenApiAuthDetailsUnion;
    /** List of OpenAPI spec parameters that will use user-provided defaults */
    defaultParams?: string[];
}
export declare function openApiFunctionDefinitionSerializer(item: OpenApiFunctionDefinition): any;
export declare function openApiFunctionDefinitionDeserializer(item: any): OpenApiFunctionDefinition;
/** authentication details for OpenApiFunctionDefinition */
export interface OpenApiAuthDetails {
    /** The type of authentication, must be anonymous/connection/managed_identity */
    /** The discriminator possible values: anonymous, connection, managed_identity */
    type: OpenApiAuthType;
}
export declare function openApiAuthDetailsSerializer(item: OpenApiAuthDetails): any;
export declare function openApiAuthDetailsDeserializer(item: any): OpenApiAuthDetails;
/** Alias for OpenApiAuthDetailsUnion */
export type OpenApiAuthDetailsUnion = OpenApiAnonymousAuthDetails | OpenApiConnectionAuthDetails | OpenApiManagedAuthDetails | OpenApiAuthDetails;
export declare function openApiAuthDetailsUnionSerializer(item: OpenApiAuthDetailsUnion): any;
export declare function openApiAuthDetailsUnionDeserializer(item: any): OpenApiAuthDetailsUnion;
/**
 *   Authentication type for OpenApi endpoint. Allowed types are:
 *   - Anonymous (no authentication required)
 *   - Connection (requires connection_id to endpoint, as setup in AI Foundry)
 *   - Managed_Identity (requires audience for identity based auth)
 */
export type OpenApiAuthType = "anonymous" | "connection" | "managed_identity";
/** Security details for OpenApi anonymous authentication */
export interface OpenApiAnonymousAuthDetails extends OpenApiAuthDetails {
    /** The object type, which is always 'anonymous'. */
    type: "anonymous";
}
export declare function openApiAnonymousAuthDetailsSerializer(item: OpenApiAnonymousAuthDetails): any;
export declare function openApiAnonymousAuthDetailsDeserializer(item: any): OpenApiAnonymousAuthDetails;
/** Security details for OpenApi connection authentication */
export interface OpenApiConnectionAuthDetails extends OpenApiAuthDetails {
    /** The object type, which is always 'connection'. */
    type: "connection";
    /** Connection auth security details */
    securityScheme: OpenApiConnectionSecurityScheme;
}
export declare function openApiConnectionAuthDetailsSerializer(item: OpenApiConnectionAuthDetails): any;
export declare function openApiConnectionAuthDetailsDeserializer(item: any): OpenApiConnectionAuthDetails;
/** Security scheme for OpenApi managed_identity authentication */
export interface OpenApiConnectionSecurityScheme {
    /** Connection id for Connection auth type */
    connectionId: string;
}
export declare function openApiConnectionSecuritySchemeSerializer(item: OpenApiConnectionSecurityScheme): any;
export declare function openApiConnectionSecuritySchemeDeserializer(item: any): OpenApiConnectionSecurityScheme;
/** Security details for OpenApi managed_identity authentication */
export interface OpenApiManagedAuthDetails extends OpenApiAuthDetails {
    /** The object type, which is always 'managed_identity'. */
    type: "managed_identity";
    /** Connection auth security details */
    securityScheme: OpenApiManagedSecurityScheme;
}
export declare function openApiManagedAuthDetailsSerializer(item: OpenApiManagedAuthDetails): any;
export declare function openApiManagedAuthDetailsDeserializer(item: any): OpenApiManagedAuthDetails;
/** Security scheme for OpenApi managed_identity authentication */
export interface OpenApiManagedSecurityScheme {
    /** Authentication scope for managed_identity auth type */
    audience: string;
}
export declare function openApiManagedSecuritySchemeSerializer(item: OpenApiManagedSecurityScheme): any;
export declare function openApiManagedSecuritySchemeDeserializer(item: any): OpenApiManagedSecurityScheme;
/** The input definition information for a Bing custom search tool as used to configure an agent. */
export interface BingCustomSearchToolDefinition extends ToolDefinition {
    /** The object type, which is always 'bing_custom_search'. */
    type: "bing_custom_search";
    /** The list of search configurations used by the bing custom search tool. */
    bingCustomSearch: BingCustomSearchConfigurationList;
}
export declare function bingCustomSearchToolDefinitionSerializer(item: BingCustomSearchToolDefinition): any;
export declare function bingCustomSearchToolDefinitionDeserializer(item: any): BingCustomSearchToolDefinition;
/** A list of search configurations currently used by the `bing_custom_search` tool. */
export interface BingCustomSearchConfigurationList {
    /**
     * The connections attached to this tool. There can be a maximum of 1 connection
     * resource attached to the tool.
     */
    searchConfigurations: BingCustomSearchConfiguration[];
}
export declare function bingCustomSearchConfigurationListSerializer(item: BingCustomSearchConfigurationList): any;
export declare function bingCustomSearchConfigurationListDeserializer(item: any): BingCustomSearchConfigurationList;
export declare function bingCustomSearchConfigurationArraySerializer(result: Array<BingCustomSearchConfiguration>): any[];
export declare function bingCustomSearchConfigurationArrayDeserializer(result: Array<BingCustomSearchConfiguration>): any[];
/** A bing custom search configuration. */
export interface BingCustomSearchConfiguration {
    /** Connection id for grounding with bing search */
    connectionId: string;
    /** Name of the custom configuration instance given to config. */
    instanceName: string;
    /** The market where the results come from. */
    market?: string;
    /** The language to use for user interface strings when calling Bing API. */
    setLang?: string;
    /** The number of search results to return in the bing api response */
    count?: number;
    /** Filter search results by a specific time range. Accepted values: https://learn.microsoft.com/bing/search-apis/bing-web-search/reference/query-parameters */
    freshness?: string;
}
export declare function bingCustomSearchConfigurationSerializer(item: BingCustomSearchConfiguration): any;
export declare function bingCustomSearchConfigurationDeserializer(item: any): BingCustomSearchConfiguration;
/** The input definition information for a connected agent tool which defines a domain specific sub-agent */
export interface ConnectedAgentToolDefinition extends ToolDefinition {
    /** The object type, which is always 'connected_agent'. */
    type: "connected_agent";
    /** The sub-agent to connect */
    connectedAgent: ConnectedAgentDetails;
}
export declare function connectedAgentToolDefinitionSerializer(item: ConnectedAgentToolDefinition): any;
export declare function connectedAgentToolDefinitionDeserializer(item: any): ConnectedAgentToolDefinition;
/** Information for connecting one agent to another as a tool */
export interface ConnectedAgentDetails {
    /** The identifier of the child agent. */
    id: string;
    /** The name of the agent to be called. */
    name: string;
    /** A description of what the agent does, used by the model to choose when and how to call the agent. */
    description: string;
}
export declare function connectedAgentDetailsSerializer(item: ConnectedAgentDetails): any;
export declare function connectedAgentDetailsDeserializer(item: any): ConnectedAgentDetails;
/** The input definition information for a azure function tool as used to configure an agent. */
export interface AzureFunctionToolDefinition extends ToolDefinition {
    /** The object type, which is always 'azure_function'. */
    type: "azure_function";
    /** The definition of the concrete function that the function tool should call. */
    azureFunction: AzureFunctionDefinition;
}
export declare function azureFunctionToolDefinitionSerializer(item: AzureFunctionToolDefinition): any;
export declare function azureFunctionToolDefinitionDeserializer(item: any): AzureFunctionToolDefinition;
/** The definition of Azure function. */
export interface AzureFunctionDefinition {
    /** The definition of azure function and its parameters. */
    function: FunctionDefinition;
    /** Input storage queue. The queue storage trigger runs a function as messages are added to it. */
    inputBinding: AzureFunctionBinding;
    /** Output storage queue. The function writes output to this queue when the input items are processed. */
    outputBinding: AzureFunctionBinding;
}
export declare function azureFunctionDefinitionSerializer(item: AzureFunctionDefinition): any;
export declare function azureFunctionDefinitionDeserializer(item: any): AzureFunctionDefinition;
/** The structure for keeping storage queue name and URI. */
export interface AzureFunctionBinding {
    /** The type of binding, which is always 'storage_queue'. */
    type: "storage_queue";
    /** Storage queue. */
    storageQueue: AzureFunctionStorageQueue;
}
export declare function azureFunctionBindingSerializer(item: AzureFunctionBinding): any;
export declare function azureFunctionBindingDeserializer(item: any): AzureFunctionBinding;
/** The structure for keeping storage queue name and URI. */
export interface AzureFunctionStorageQueue {
    /** URI to the Azure Storage Queue service allowing you to manipulate a queue. */
    storageServiceEndpoint: string;
    /** The name of an Azure function storage queue. */
    queueName: string;
}
export declare function azureFunctionStorageQueueSerializer(item: AzureFunctionStorageQueue): any;
export declare function azureFunctionStorageQueueDeserializer(item: any): AzureFunctionStorageQueue;
/**
 * A set of resources that are used by the agent's tools. The resources are specific to the type of
 * tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search`
 * tool requires a list of vector store IDs.
 */
export interface ToolResources {
    /** Resources to be used by the `code_interpreter` tool consisting of file IDs. */
    codeInterpreter?: CodeInterpreterToolResource;
    /** Resources to be used by the `file_search` tool consisting of vector store IDs. */
    fileSearch?: FileSearchToolResource;
    /** Resources to be used by the `azure_ai_search` tool consisting of index IDs and names. */
    azureAISearch?: AzureAISearchResource;
}
export declare function toolResourcesSerializer(item: ToolResources): any;
export declare function toolResourcesDeserializer(item: any): ToolResources;
/** A set of resources that are used by the `code_interpreter` tool. */
export interface CodeInterpreterToolResource {
    /**
     * A list of file IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files
     * associated with the tool.
     */
    fileIds?: string[];
    /** The data sources to be used. This option is mutually exclusive with the `fileIds` property. */
    dataSources?: VectorStoreDataSource[];
}
export declare function codeInterpreterToolResourceSerializer(item: CodeInterpreterToolResource): any;
export declare function codeInterpreterToolResourceDeserializer(item: any): CodeInterpreterToolResource;
export declare function vectorStoreDataSourceArraySerializer(result: Array<VectorStoreDataSource>): any[];
export declare function vectorStoreDataSourceArrayDeserializer(result: Array<VectorStoreDataSource>): any[];
/**
 * The structure, containing Azure asset URI path and the asset type of the file used as a data source
 * for the enterprise file search.
 */
export interface VectorStoreDataSource {
    /** Asset URI. */
    assetIdentifier: string;
    /** The asset type */
    assetType: VectorStoreDataSourceAssetType;
}
export declare function vectorStoreDataSourceSerializer(item: VectorStoreDataSource): any;
export declare function vectorStoreDataSourceDeserializer(item: any): VectorStoreDataSource;
/**
 * Type of vector storage asset. Asset type may be a uri_asset, in this case it should contain asset URI ID,
 * in the case of id_asset it should contain the data ID.
 */
export declare enum VectorStoreDataSourceAssetType {
    UriAsset = "uri_asset",
    IdAsset = "id_asset"
}
/** A set of resources that are used by the `file_search` tool. */
export interface FileSearchToolResource {
    /**
     * The ID of the vector store attached to this agent. There can be a maximum of 1 vector
     * store attached to the agent.
     */
    vectorStoreIds?: string[];
    /**
     * The list of vector store configuration objects from Azure.
     * This list is limited to one element.
     * The only element of this list contains the list of azure asset IDs used by the search tool.
     */
    vectorStores?: VectorStoreConfigurations[];
}
export declare function fileSearchToolResourceSerializer(item: FileSearchToolResource): any;
export declare function fileSearchToolResourceDeserializer(item: any): FileSearchToolResource;
export declare function vectorStoreConfigurationsArraySerializer(result: Array<VectorStoreConfigurations>): any[];
export declare function vectorStoreConfigurationsArrayDeserializer(result: Array<VectorStoreConfigurations>): any[];
/** The structure, containing the list of vector storage configurations i.e. the list of azure asset IDs. */
export interface VectorStoreConfigurations {
    /** Name */
    storeName: string;
    /** Configurations */
    storeConfiguration: VectorStoreConfiguration;
}
export declare function vectorStoreConfigurationsSerializer(item: VectorStoreConfigurations): any;
export declare function vectorStoreConfigurationsDeserializer(item: any): VectorStoreConfigurations;
/**
 * Vector storage configuration is the list of data sources, used when multiple
 * files can be used for the enterprise file search.
 */
export interface VectorStoreConfiguration {
    /** Data sources */
    dataSources: VectorStoreDataSource[];
}
export declare function vectorStoreConfigurationSerializer(item: VectorStoreConfiguration): any;
export declare function vectorStoreConfigurationDeserializer(item: any): VectorStoreConfiguration;
/** A set of index resources used by the `azure_ai_search` tool. */
export interface AzureAISearchResource {
    /**
     * The indices attached to this agent. There can be a maximum of 1 index
     * resource attached to the agent.
     */
    indexList?: AISearchIndexResource[];
}
export declare function azureAISearchResourceSerializer(item: AzureAISearchResource): any;
export declare function azureAISearchResourceDeserializer(item: any): AzureAISearchResource;
export declare function aiSearchIndexResourceArraySerializer(result: Array<AISearchIndexResource>): any[];
export declare function aiSearchIndexResourceArrayDeserializer(result: Array<AISearchIndexResource>): any[];
/** A AI Search Index resource. */
export interface AISearchIndexResource {
    /** An index connection id in an IndexResource attached to this agent. */
    indexConnectionId: string;
    /** The name of an index in an IndexResource attached to this agent. */
    indexName: string;
    /** Type of query in an AIIndexResource attached to this agent. */
    queryType?: AzureAISearchQueryType;
    /** Number of documents to retrieve from search and present to the model. */
    topK?: number;
    /** filter string for search resource. */
    filter?: string;
    /** Index asset id for search resource. */
    indexAssetId?: string;
}
export declare function aiSearchIndexResourceSerializer(item: AISearchIndexResource): any;
export declare function aiSearchIndexResourceDeserializer(item: any): AISearchIndexResource;
/** Available query types for Azure AI Search tool. */
export type AzureAISearchQueryType = "simple" | "semantic" | "vector" | "vector_simple_hybrid" | "vector_semantic_hybrid";
/**
 * An object describing the expected output of the model. If `json_object` only `function` type `tools` are allowed to be passed to the Run.
 * If `text` the model can return text or any value needed.
 */
export interface AgentsResponseFormat {
    /** Must be one of `text` or `json_object`. */
    type?: ResponseFormat;
}
export declare function agentsResponseFormatSerializer(item: AgentsResponseFormat): any;
export declare function agentsResponseFormatDeserializer(item: any): AgentsResponseFormat;
/** Possible API response formats. */
export type ResponseFormat = "text" | "json_object";
/** The type of response format being defined: `json_schema` */
export interface ResponseFormatJsonSchemaType {
    /** Type */
    type: "json_schema";
    /** The JSON schema, describing response format. */
    jsonSchema: ResponseFormatJsonSchema;
}
export declare function responseFormatJsonSchemaTypeSerializer(item: ResponseFormatJsonSchemaType): any;
export declare function responseFormatJsonSchemaTypeDeserializer(item: any): ResponseFormatJsonSchemaType;
/** A description of what the response format is for, used by the model to determine how to respond in the format. */
export interface ResponseFormatJsonSchema {
    /** A description of what the response format is for, used by the model to determine how to respond in the format. */
    description?: string;
    /** The name of a schema. */
    name: string;
    /** The JSON schema object, describing the response format. */
    schema: any;
}
export declare function responseFormatJsonSchemaSerializer(item: ResponseFormatJsonSchema): any;
export declare function responseFormatJsonSchemaDeserializer(item: any): ResponseFormatJsonSchema;
export declare function toolDefinitionUnionArraySerializer(result: Array<ToolDefinitionUnion>): any[];
export declare function toolDefinitionUnionArrayDeserializer(result: Array<ToolDefinitionUnion>): any[];
/** Alias for AgentsResponseFormatOption */
export type AgentsResponseFormatOption = string | AgentsResponseFormatMode | AgentsResponseFormat | ResponseFormatJsonSchemaType;
export declare function agentsResponseFormatOptionSerializer(item: AgentsResponseFormatOption): any;
export declare function agentsResponseFormatOptionDeserializer(item: any): AgentsResponseFormatOption;
/** Represents the mode in which the model will handle the return format of a tool call. */
export type AgentsResponseFormatMode = "auto" | "none";
/** Represents an agent that can call the model and use tools. */
export interface Agent {
    /** The identifier, which can be referenced in API endpoints. */
    id: string;
    /** The object type, which is always assistant. */
    object: "assistant";
    /** The Unix timestamp, in seconds, representing when this object was created. */
    createdAt: Date;
    /** The name of the agent. */
    name: string | null;
    /** The description of the agent. */
    description: string | null;
    /** The ID of the model to use. */
    model: string;
    /** The system instructions for the agent to use. */
    instructions: string | null;
    /** The collection of tools enabled for the agent. */
    tools: ToolDefinitionUnion[];
    /**
     * A set of resources that are used by the agent's tools. The resources are specific to the type of tool. For example, the `code_interpreter`
     * tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
     */
    toolResources: ToolResources | null;
    /**
     * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random,
     * while lower values like 0.2 will make it more focused and deterministic.
     */
    temperature: number | null;
    /**
     * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.
     * So 0.1 means only the tokens comprising the top 10% probability mass are considered.
     *
     * We generally recommend altering this or temperature but not both.
     */
    topP: number | null;
    /** The response format of the tool calls used by this agent. */
    responseFormat?: AgentsResponseFormatOption | null;
    /** A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. */
    metadata: Record<string, string> | null;
}
export declare function agentDeserializer(item: any): Agent;
/** The response data for a requested list of items. */
export interface _AgentsPagedResultAgent {
    /** The requested list of items. */
    data: Agent[];
    /** The last ID represented in this list. */
    lastId?: string;
    /** A value indicating whether there are additional values available not captured in this list. */
    hasMore: boolean;
}
export declare function _agentsPagedResultAgentDeserializer(item: any): _AgentsPagedResultAgent;
export declare function agentArrayDeserializer(result: Array<Agent>): any[];
/** The status of an agent deletion operation. */
export interface AgentDeletionStatus {
    /** The ID of the resource specified for deletion. */
    id: string;
    /** A value indicating whether deletion was successful. */
    deleted: boolean;
    /** The object type, which is always 'assistant.deleted'. */
    object: "assistant.deleted";
}
export declare function agentDeletionStatusDeserializer(item: any): AgentDeletionStatus;
/** The details used to create a new agent thread. */
export interface AgentThreadCreationOptions {
    /** The initial messages to associate with the new thread. */
    messages?: ThreadMessageOptions[];
    /**
     * A set of resources that are made available to the agent's tools in this thread. The resources are specific to the
     * type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires
     * a list of vector store IDs.
     */
    toolResources?: ToolResources | null;
    /** A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. */
    metadata?: Record<string, string> | null;
}
export declare function agentThreadCreationOptionsSerializer(item: AgentThreadCreationOptions): any;
export declare function threadMessageOptionsArraySerializer(result: Array<ThreadMessageOptions>): any[];
/**
 * A single message within an agent thread,
 * as provided during that thread's creation for its initial state.
 */
export interface ThreadMessageOptions {
    /**
     * The role of the entity that is creating the message. Allowed values include:
     * `user`, which indicates the message is sent by an actual user (and should be
     * used in most cases to represent user-generated messages), and `assistant`,
     * which indicates the message is generated by the agent (use this value to insert
     * messages from the agent into the conversation).
     */
    role: MessageRole;
    /**
     * The content of the initial message. This may be a basic string (if you only
     * need text) or an array of typed content blocks (for example, text, image_file,
     * image_url, and so on).
     */
    content: MessageInputContent;
    /** A list of files attached to the message, and the tools they should be added to. */
    attachments?: MessageAttachment[] | null;
    /** A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. */
    metadata?: Record<string, string> | null;
}
export declare function threadMessageOptionsSerializer(item: ThreadMessageOptions): any;
/** The possible values for roles attributed to messages in a thread. */
export type MessageRole = "user" | "assistant";
/** Alias for MessageInputContent */
export type MessageInputContent = string | MessageInputContentBlockUnion[];
export declare function messageInputContentSerializer(item: MessageInputContent): any;
export declare function messageInputContentBlockUnionArraySerializer(result: Array<MessageInputContentBlockUnion>): any[];
/** Defines a single content block when creating a message. The 'type' field determines whether it is text, an image file, or an external image URL, etc. */
export interface MessageInputContentBlock {
    /** Specifies which kind of content block this is (text, image_file, image_url, etc.). */
    /** The discriminator possible values: text, image_file, image_url */
    type: MessageBlockType;
}
export declare function messageInputContentBlockSerializer(item: MessageInputContentBlock): any;
/** Alias for MessageInputContentBlockUnion */
export type MessageInputContentBlockUnion = MessageInputTextBlock | MessageInputImageFileBlock | MessageInputImageUrlBlock | MessageInputContentBlock;
export declare function messageInputContentBlockUnionSerializer(item: MessageInputContentBlockUnion): any;
/** Specifies the kind of content block within a message. Could be text, an image file, an external image URL, or an unknown future type. */
export type MessageBlockType = "text" | "image_file" | "image_url";
/** A text block in a new message, containing plain text content. */
export interface MessageInputTextBlock extends MessageInputContentBlock {
    /** Must be 'text' for a text block. */
    type: "text";
    /** The plain text content for this block. */
    text: string;
}
export declare function messageInputTextBlockSerializer(item: MessageInputTextBlock): any;
/** An image-file block in a new message, referencing an internally uploaded image by file ID. */
export interface MessageInputImageFileBlock extends MessageInputContentBlock {
    /** Must be 'image_file' for an internally uploaded image block. */
    type: "image_file";
    /** Information about the referenced image file, including file ID and optional detail level. */
    imageFile: MessageImageFileParam;
}
export declare function messageInputImageFileBlockSerializer(item: MessageInputImageFileBlock): any;
/** Defines how an internally uploaded image file is referenced when creating an image-file block. */
export interface MessageImageFileParam {
    /** The ID of the previously uploaded image file. */
    fileId: string;
    /** Optional detail level for the image (auto, low, or high). */
    detail?: ImageDetailLevel;
}
export declare function messageImageFileParamSerializer(item: MessageImageFileParam): any;
/** Specifies an image's detail level. Can be 'auto', 'low', 'high', or an unknown future value. */
export type ImageDetailLevel = "auto" | "low" | "high";
/** An image-URL block in a new message, referencing an external image by URL. */
export interface MessageInputImageUrlBlock extends MessageInputContentBlock {
    /** Must be 'image_url' for an externally hosted image block. */
    type: "image_url";
    /** Information about the external image URL, including the URL and optional detail level. */
    imageUrl: MessageImageUrlParam;
}
export declare function messageInputImageUrlBlockSerializer(item: MessageInputImageUrlBlock): any;
/** Defines how an external image URL is referenced when creating an image-URL block. */
export interface MessageImageUrlParam {
    /** The publicly accessible URL of the external image. */
    url: string;
    /** Optional detail level for the image (auto, low, or high). Defaults to 'auto' if not specified. */
    detail?: ImageDetailLevel;
}
export declare function messageImageUrlParamSerializer(item: MessageImageUrlParam): any;
export declare function messageAttachmentArraySerializer(result: Array<MessageAttachment>): any[];
export declare function messageAttachmentArrayDeserializer(result: Array<MessageAttachment>): any[];
/** This describes to which tools a file has been attached. */
export interface MessageAttachment {
    /** The ID of the file to attach to the message. */
    fileId?: string;
    /** Azure asset ID. */
    dataSource?: VectorStoreDataSource;
    /** The tools to add to this file. */
    tools: MessageAttachmentToolDefinition[];
}
export declare function messageAttachmentSerializer(item: MessageAttachment): any;
export declare function messageAttachmentDeserializer(item: any): MessageAttachment;
export declare function messageAttachmentToolDefinitionArraySerializer(result: Array<MessageAttachmentToolDefinition>): any[];
export declare function messageAttachmentToolDefinitionArrayDeserializer(result: Array<MessageAttachmentToolDefinition>): any[];
/** Alias for MessageAttachmentToolDefinition */
export type MessageAttachmentToolDefinition = CodeInterpreterToolDefinition | FileSearchToolDefinition;
export declare function messageAttachmentToolDefinitionSerializer(item: MessageAttachmentToolDefinition): any;
export declare function messageAttachmentToolDefinitionDeserializer(item: any): MessageAttachmentToolDefinition;
/** Alias for _MessageAttachmentTool */
export type _MessageAttachmentTool = CodeInterpreterToolDefinition | FileSearchToolDefinition;
export declare function _messageAttachmentToolSerializer(item: _MessageAttachmentTool): any;
export declare function _messageAttachmentToolDeserializer(item: any): _MessageAttachmentTool;
/**
 * Request object. A set of resources that are used by the agent's tools. The resources are specific to the type of tool.
 * For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of
 * vector store IDs.
 */
export interface UpdateToolResourcesOptions {
    /**
     * Overrides the list of file IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files
     * associated with the tool.
     */
    codeInterpreter?: UpdateCodeInterpreterToolResourceOptions;
    /** Overrides the vector store attached to this agent. There can be a maximum of 1 vector store attached to the agent. */
    fileSearch?: UpdateFileSearchToolResourceOptions;
    /** Overrides the resources to be used by the `azure_ai_search` tool consisting of index IDs and names. */
    azureAISearch?: AzureAISearchResource;
}
export declare function updateToolResourcesOptionsSerializer(item: UpdateToolResourcesOptions): any;
export declare function updateToolResourcesOptionsDeserializer(item: any): UpdateToolResourcesOptions;
/** Request object to update `code_interpreted` tool resources. */
export interface UpdateCodeInterpreterToolResourceOptions {
    /** A list of file IDs to override the current list of the agent. */
    fileIds?: string[];
}
export declare function updateCodeInterpreterToolResourceOptionsSerializer(item: UpdateCodeInterpreterToolResourceOptions): any;
export declare function updateCodeInterpreterToolResourceOptionsDeserializer(item: any): UpdateCodeInterpreterToolResourceOptions;
/** Request object to update `file_search` tool resources. */
export interface UpdateFileSearchToolResourceOptions {
    /** A list of vector store IDs to override the current list of the agent. */
    vectorStoreIds?: string[];
}
export declare function updateFileSearchToolResourceOptionsSerializer(item: UpdateFileSearchToolResourceOptions): any;
export declare function updateFileSearchToolResourceOptionsDeserializer(item: any): UpdateFileSearchToolResourceOptions;
/**
 * Controls for how a thread will be truncated prior to the run. Use this to control the initial
 * context window of the run.
 */
export interface TruncationObject {
    /**
     * The truncation strategy to use for the thread. The default is `auto`. If set to `last_messages`, the thread will
     * be truncated to the `lastMessages` count most recent messages in the thread. When set to `auto`, messages in the middle of the thread
     * will be dropped to fit the context length of the model, `max_prompt_tokens`.
     */
    type: TruncationStrategy;
    /** The number of most recent messages from the thread when constructing the context for the run. */
    lastMessages?: number | null;
}
export declare function truncationObjectSerializer(item: TruncationObject): any;
export declare function truncationObjectDeserializer(item: any): TruncationObject;
/** Possible truncation strategies for the thread. */
export type TruncationStrategy = "auto" | "last_messages";
/** Specifies a tool the model should use. Use to force the model to call a specific tool. */
export interface AgentsNamedToolChoice {
    /** the type of tool. If type is `function`, the function name must be set. */
    type: AgentsNamedToolChoiceType;
    /** The name of the function to call */
    function?: FunctionName;
}
export declare function agentsNamedToolChoiceSerializer(item: AgentsNamedToolChoice): any;
export declare function agentsNamedToolChoiceDeserializer(item: any): AgentsNamedToolChoice;
/** Available tool types for agents named tools. */
export type AgentsNamedToolChoiceType = "function" | "code_interpreter" | "file_search" | "bing_grounding" | "fabric_dataagent" | "sharepoint_grounding" | "azure_ai_search" | "bing_custom_search" | "connected_agent";
/** The function name that will be used, if using the `function` tool */
export interface FunctionName {
    /** The name of the function to call */
    name: string;
}
export declare function functionNameSerializer(item: FunctionName): any;
export declare function functionNameDeserializer(item: any): FunctionName;
/** Alias for AgentsToolChoiceOption */
export type AgentsToolChoiceOption = string | AgentsToolChoiceOptionMode | AgentsNamedToolChoice;
export declare function agentsToolChoiceOptionSerializer(item: AgentsToolChoiceOption): any;
export declare function agentsToolChoiceOptionDeserializer(item: any): AgentsToolChoiceOption;
/** Specifies how the tool choice will be used */
export type AgentsToolChoiceOptionMode = "none" | "auto";
/** Data representing a single evaluation run of an agent thread. */
export interface ThreadRun {
    /** The identifier, which can be referenced in API endpoints. */
    id: string;
    /** The object type, which is always 'thread.run'. */
    object: "thread.run";
    /** The ID of the thread associated with this run. */
    threadId: string;
    /** The ID of the agent associated with the thread this run was performed against. */
    assistantId: string;
    /** The status of the agent thread run. */
    status: RunStatus;
    /** The details of the action required for the agent thread run to continue. */
    requiredAction?: RequiredActionUnion | null;
    /** The last error, if any, encountered by this agent thread run. */
    lastError: RunError | null;
    /** The ID of the model to use. */
    model: string;
    /** The overridden system instructions used for this agent thread run. */
    instructions: string;
    /** The overridden enabled tools used for this agent thread run. */
    tools: ToolDefinitionUnion[];
    /** The Unix timestamp, in seconds, representing when this object was created. */
    createdAt: Date;
    /** The Unix timestamp, in seconds, representing when this item expires. */
    expiresAt: Date | null;
    /** The Unix timestamp, in seconds, representing when this item was started. */
    startedAt: Date | null;
    /** The Unix timestamp, in seconds, representing when this completed. */
    completedAt: Date | null;
    /** The Unix timestamp, in seconds, representing when this was cancelled. */
    cancelledAt: Date | null;
    /** The Unix timestamp, in seconds, representing when this failed. */
    failedAt: Date | null;
    /** Details on why the run is incomplete. Will be `null` if the run is not incomplete. */
    incompleteDetails: IncompleteRunDetails | null;
    /** Usage statistics related to the run. This value will be `null` if the run is not in a terminal state (i.e. `in_progress`, `queued`, etc.). */
    usage: RunCompletionUsage | null;
    /** The sampling temperature used for this run. If not set, defaults to 1. */
    temperature?: number | null;
    /** The nucleus sampling value used for this run. If not set, defaults to 1. */
    topP?: number | null;
    /** The maximum number of prompt tokens specified to have been used over the course of the run. */
    maxPromptTokens: number | null;
    /** The maximum number of completion tokens specified to have been used over the course of the run. */
    maxCompletionTokens: number | null;
    /** The strategy to use for dropping messages as the context windows moves forward. */
    truncationStrategy: TruncationObject | null;
    /** Controls whether or not and which tool is called by the model. */
    toolChoice: AgentsToolChoiceOption | null;
    /** The response format of the tool calls used in this run. */
    responseFormat: AgentsResponseFormatOption | null;
    /** A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. */
    metadata: Record<string, string> | null;
    /** Override the tools the agent can use for this run. This is useful for modifying the behavior on a per-run basis */
    toolResources?: UpdateToolResourcesOptions | null;
    /** Determines if tools can be executed in parallel within the run. */
    parallelToolCalls: boolean;
}
export declare function threadRunDeserializer(item: any): ThreadRun;
/** Possible values for the status of an agent thread run. */
export type RunStatus = "queued" | "in_progress" | "requires_action" | "cancelling" | "cancelled" | "failed" | "completed" | "expired";
/** An abstract representation of a required action for an agent thread run to continue. */
export interface RequiredAction {
    /** The object type. */
    /** The discriminator possible values: submit_tool_outputs */
    type: string;
}
export declare function requiredActionDeserializer(item: any): RequiredAction;
/** Alias for RequiredActionUnion */
export type RequiredActionUnion = SubmitToolOutputsAction | RequiredAction;
export declare function requiredActionUnionDeserializer(item: any): RequiredActionUnion;
/** The details for required tool calls that must be submitted for an agent thread run to continue. */
export interface SubmitToolOutputsAction extends RequiredAction {
    /** The object type, which is always 'submit_tool_outputs'. */
    type: "submit_tool_outputs";
    /** The details describing tools that should be called to submit tool outputs. */
    submitToolOutputs: SubmitToolOutputsDetails;
}
export declare function submitToolOutputsActionDeserializer(item: any): SubmitToolOutputsAction;
/** The details describing tools that should be called to submit tool outputs. */
export interface SubmitToolOutputsDetails {
    /** The list of tool calls that must be resolved for the agent thread run to continue. */
    toolCalls: RequiredToolCallUnion[];
}
export declare function submitToolOutputsDetailsDeserializer(item: any): SubmitToolOutputsDetails;
export declare function requiredToolCallUnionArrayDeserializer(result: Array<RequiredToolCallUnion>): any[];
/** An abstract representation of a tool invocation needed by the model to continue a run. */
export interface RequiredToolCall {
    /** The object type for the required tool call. */
    /** The discriminator possible values: function */
    type: string;
    /** The ID of the tool call. This ID must be referenced when submitting tool outputs. */
    id: string;
}
export declare function requiredToolCallDeserializer(item: any): RequiredToolCall;
/** Alias for RequiredToolCallUnion */
export type RequiredToolCallUnion = RequiredFunctionToolCall | RequiredToolCall;
export declare function requiredToolCallUnionDeserializer(item: any): RequiredToolCallUnion;
/** A representation of a requested call to a function tool, needed by the model to continue evaluation of a run. */
export interface RequiredFunctionToolCall extends RequiredToolCall {
    /** The object type of the required tool call. Always 'function' for function tools. */
    type: "function";
    /** Detailed information about the function to be executed by the tool that includes name and arguments. */
    function: RequiredFunctionToolCallDetails;
}
export declare function requiredFunctionToolCallDeserializer(item: any): RequiredFunctionToolCall;
/** The detailed information for a function invocation, as provided by a required action invoking a function tool, that includes the name of and arguments to the function. */
export interface RequiredFunctionToolCallDetails {
    /** The name of the function. */
    name: string;
    /** The arguments to use when invoking the named function, as provided by the model. Arguments are presented as a JSON document that should be validated and parsed for evaluation. */
    arguments: string;
}
export declare function requiredFunctionToolCallDetailsDeserializer(item: any): RequiredFunctionToolCallDetails;
/** The details of an error as encountered by an agent thread run. */
export interface RunError {
    /** The status for the error. */
    code: string;
    /** The human-readable text associated with the error. */
    message: string;
}
export declare function runErrorDeserializer(item: any): RunError;
/** Details on why the run is incomplete. Will be `null` if the run is not incomplete. */
export interface IncompleteRunDetails {
    /** The reason why the run is incomplete. This indicates which specific token limit was reached during the run. */
    reason: IncompleteDetailsReason;
}
export declare function incompleteRunDetailsDeserializer(item: any): IncompleteRunDetails;
/** The reason why the run is incomplete. This will point to which specific token limit was reached over the course of the run. */
export type IncompleteDetailsReason = "max_completion_tokens" | "max_prompt_tokens";
/** Usage statistics related to the run. This value will be `null` if the run is not in a terminal state (i.e. `in_progress`, `queued`, etc.). */
export interface RunCompletionUsage {
    /** Number of completion tokens used over the course of the run. */
    completionTokens: number;
    /** Number of prompt tokens used over the course of the run. */
    promptTokens: number;
    /** Total number of tokens used (prompt + completion). */
    totalTokens: number;
}
export declare function runCompletionUsageDeserializer(item: any): RunCompletionUsage;
/** Information about a single thread associated with an agent. */
export interface AgentThread {
    /** The identifier, which can be referenced in API endpoints. */
    id: string;
    /** The object type, which is always 'thread'. */
    object: "thread";
    /** The Unix timestamp, in seconds, representing when this object was created. */
    createdAt: Date;
    /**
     * A set of resources that are made available to the agent's tools in this thread. The resources are specific to the type
     * of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list
     * of vector store IDs.
     */
    toolResources: ToolResources | null;
    /** A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. */
    metadata: Record<string, string> | null;
}
export declare function agentThreadDeserializer(item: any): AgentThread;
/** The response data for a requested list of items. */
export interface _AgentsPagedResultAgentThread {
    /** The requested list of items. */
    data: AgentThread[];
    /** The last ID represented in this list. */
    lastId?: string;
    /** A value indicating whether there are additional values available not captured in this list. */
    hasMore: boolean;
}
export declare function _agentsPagedResultAgentThreadDeserializer(item: any): _AgentsPagedResultAgentThread;
export declare function agentThreadArrayDeserializer(result: Array<AgentThread>): any[];
/** The status of a thread deletion operation. */
export interface ThreadDeletionStatus {
    /** The ID of the resource specified for deletion. */
    id: string;
    /** A value indicating whether deletion was successful. */
    deleted: boolean;
    /** The object type, which is always 'thread.deleted'. */
    object: "thread.deleted";
}
export declare function threadDeletionStatusDeserializer(item: any): ThreadDeletionStatus;
/** A single, existing message within an agent thread. */
export interface ThreadMessage {
    /** The identifier, which can be referenced in API endpoints. */
    id: string;
    /** The object type, which is always 'thread.message'. */
    object: "thread.message";
    /** The Unix timestamp, in seconds, representing when this object was created. */
    createdAt: Date;
    /** The ID of the thread that this message belongs to. */
    threadId: string;
    /** The status of the message. */
    status: MessageStatus;
    /** On an incomplete message, details about why the message is incomplete. */
    incompleteDetails: MessageIncompleteDetails | null;
    /** The Unix timestamp (in seconds) for when the message was completed. */
    completedAt: Date | null;
    /** The Unix timestamp (in seconds) for when the message was marked as incomplete. */
    incompleteAt: Date | null;
    /** The role associated with the agent thread message. */
    role: MessageRole;
    /** The list of content items associated with the agent thread message. */
    content: MessageContentUnion[];
    /** If applicable, the ID of the agent that authored this message. */
    assistantId: string | null;
    /** If applicable, the ID of the run associated with the authoring of this message. */
    runId: string | null;
    /** A list of files attached to the message, and the tools they were added to. */
    attachments: MessageAttachment[] | null;
    /** A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. */
    metadata: Record<string, string> | null;
}
export declare function threadMessageDeserializer(item: any): ThreadMessage;
/** The possible execution status values for a thread message. */
export type MessageStatus = "in_progress" | "incomplete" | "completed";
/** Information providing additional detail about a message entering an incomplete status. */
export interface MessageIncompleteDetails {
    /** The provided reason describing why the message was marked as incomplete. */
    reason: MessageIncompleteDetailsReason;
}
export declare function messageIncompleteDetailsDeserializer(item: any): MessageIncompleteDetails;
/** A set of reasons describing why a message is marked as incomplete. */
export type MessageIncompleteDetailsReason = "content_filter" | "max_tokens" | "run_cancelled" | "run_failed" | "run_expired";
export declare function messageContentUnionArrayDeserializer(result: Array<MessageContentUnion>): any[];
/** An abstract representation of a single item of thread message content. */
export interface MessageContent {
    /** The object type. */
    /** The discriminator possible values: text, image_file */
    type: string;
}
export declare function messageContentDeserializer(item: any): MessageContent;
/** Alias for MessageContentUnion */
export type MessageContentUnion = MessageTextContent | MessageImageFileContent | MessageContent;
export declare function messageContentUnionDeserializer(item: any): MessageContentUnion;
/** A representation of a textual item of thread message content. */
export interface MessageTextContent extends MessageContent {
    /** The object type, which is always 'text'. */
    type: "text";
    /** The text and associated annotations for this thread message content item. */
    text: MessageTextDetails;
}
export declare function messageTextContentDeserializer(item: any): MessageTextContent;
/** The text and associated annotations for a single item of agent thread message content. */
export interface MessageTextDetails {
    /** The text data. */
    value: string;
    /** A list of annotations associated with this text. */
    annotations: MessageTextAnnotationUnion[];
}
export declare function messageTextDetailsDeserializer(item: any): MessageTextDetails;
export declare function messageTextAnnotationUnionArrayDeserializer(result: Array<MessageTextAnnotationUnion>): any[];
/** An abstract representation of an annotation to text thread message content. */
export interface MessageTextAnnotation {
    /** The object type. */
    /** The discriminator possible values: url_citation, file_citation, file_path */
    type: string;
    /** The textual content associated with this text annotation item. */
    text: string;
}
export declare function messageTextAnnotationDeserializer(item: any): MessageTextAnnotation;
/** Alias for MessageTextAnnotationUnion */
export type MessageTextAnnotationUnion = MessageTextUrlCitationAnnotation | MessageTextFileCitationAnnotation | MessageTextFilePathAnnotation | MessageTextAnnotation;
export declare function messageTextAnnotationUnionDeserializer(item: any): MessageTextAnnotationUnion;
/** A citation within the message that points to a specific URL associated with the message. Generated when the agent uses tools such as 'bing_grounding' to search the Internet. */
export interface MessageTextUrlCitationAnnotation extends MessageTextAnnotation {
    /** The object type, which is always 'url_citation'. */
    type: "url_citation";
    /** The details of the URL citation. */
    urlCitation: MessageTextUrlCitationDetails;
    /** The first text index associated with this text annotation. */
    startIndex?: number;
    /** The last text index associated with this text annotation. */
    endIndex?: number;
}
export declare function messageTextUrlCitationAnnotationDeserializer(item: any): MessageTextUrlCitationAnnotation;
/** A representation of a URL citation, as used in text thread message content. */
export interface MessageTextUrlCitationDetails {
    /** The URL associated with this citation. */
    url: string;
    /** The title of the URL. */
    title?: string;
}
export declare function messageTextUrlCitationDetailsDeserializer(item: any): MessageTextUrlCitationDetails;
/** A citation within the message that points to a specific quote from a specific File associated with the agent or the message. Generated when the agent uses the 'file_search' tool to search files. */
export interface MessageTextFileCitationAnnotation extends MessageTextAnnotation {
    /** The object type, which is always 'file_citation'. */
    type: "file_citation";
    /**
     * A citation within the message that points to a specific quote from a specific file.
     * Generated when the agent uses the "file_search" tool to search files.
     */
    fileCitation: MessageTextFileCitationDetails;
    /** The first text index associated with this text annotation. */
    startIndex?: number;
    /** The last text index associated with this text annotation. */
    endIndex?: number;
}
export declare function messageTextFileCitationAnnotationDeserializer(item: any): MessageTextFileCitationAnnotation;
/** A representation of a file-based text citation, as used in a file-based annotation of text thread message content. */
export interface MessageTextFileCitationDetails {
    /** The ID of the file associated with this citation. */
    fileId: string;
    /** The specific quote cited in the associated file. */
    quote: string;
}
export declare function messageTextFileCitationDetailsDeserializer(item: any): MessageTextFileCitationDetails;
/** A citation within the message that points to a file located at a specific path. */
export interface MessageTextFilePathAnnotation extends MessageTextAnnotation {
    /** The object type, which is always 'file_path'. */
    type: "file_path";
    /** A URL for the file that's generated when the agent used the code_interpreter tool to generate a file. */
    filePath: MessageTextFilePathDetails;
    /** The first text index associated with this text annotation. */
    startIndex?: number;
    /** The last text index associated with this text annotation. */
    endIndex?: number;
}
export declare function messageTextFilePathAnnotationDeserializer(item: any): MessageTextFilePathAnnotation;
/** An encapsulation of an image file ID, as used by message image content. */
export interface MessageTextFilePathDetails {
    /** The ID of the specific file that the citation is from. */
    fileId: string;
}
export declare function messageTextFilePathDetailsDeserializer(item: any): MessageTextFilePathDetails;
/** A representation of image file content in a thread message. */
export interface MessageImageFileContent extends MessageContent {
    /** The object type, which is always 'image_file'. */
    type: "image_file";
    /** The image file for this thread message content item. */
    imageFile: MessageImageFileDetails;
}
export declare function messageImageFileContentDeserializer(item: any): MessageImageFileContent;
/** An image reference, as represented in thread message content. */
export interface MessageImageFileDetails {
    /** The ID for the file associated with this image. */
    fileId: string;
}
export declare function messageImageFileDetailsDeserializer(item: any): MessageImageFileDetails;
/** The response data for a requested list of items. */
export interface _AgentsPagedResultThreadMessage {
    /** The requested list of items. */
    data: ThreadMessage[];
    /** The last ID represented in this list. */
    lastId?: string;
    /** A value indicating whether there are additional values available not captured in this list. */
    hasMore: boolean;
}
export declare function _agentsPagedResultThreadMessageDeserializer(item: any): _AgentsPagedResultThreadMessage;
export declare function threadMessageArrayDeserializer(result: Array<ThreadMessage>): any[];
/** The response data for a requested list of items. */
export interface _AgentsPagedResultThreadRun {
    /** The requested list of items. */
    data: ThreadRun[];
    /** The last ID represented in this list. */
    lastId?: string;
    /** A value indicating whether there are additional values available not captured in this list. */
    hasMore: boolean;
}
export declare function _agentsPagedResultThreadRunDeserializer(item: any): _AgentsPagedResultThreadRun;
export declare function threadRunArrayDeserializer(result: Array<ThreadRun>): any[];
/** The data provided during a tool outputs submission to resolve pending tool calls and allow the model to continue. */
export interface ToolOutput {
    /** The ID of the tool call being resolved, as provided in the tool calls of a required action from a run. */
    toolCallId?: string;
    /** The output from the tool to be submitted. */
    output?: string;
}
export declare function toolOutputSerializer(item: ToolOutput): any;
export declare function toolOutputArraySerializer(result: Array<ToolOutput>): any[];
/** Detailed information about a single step of an agent thread run. */
export interface RunStep {
    /** The identifier, which can be referenced in API endpoints. */
    id: string;
    /** The object type, which is always 'thread.run.step'. */
    object: "thread.run.step";
    /** The type of run step, which can be either message_creation or tool_calls. */
    type: RunStepType;
    /** The ID of the agent associated with the run step. */
    assistantId: string;
    /** The ID of the thread that was run. */
    threadId: string;
    /** The ID of the run that this run step is a part of. */
    runId: string;
    /** The status of this run step. */
    status: RunStepStatus;
    /** The details for this run step. */
    stepDetails: RunStepDetailsUnion;
    /** If applicable, information about the last error encountered by this run step. */
    lastError: RunStepError | null;
    /** The Unix timestamp, in seconds, representing when this object was created. */
    createdAt: Date;
    /** The Unix timestamp, in seconds, representing when this item expired. */
    expiredAt: Date | null;
    /** The Unix timestamp, in seconds, representing when this completed. */
    completedAt: Date | null;
    /** The Unix timestamp, in seconds, representing when this was cancelled. */
    cancelledAt: Date | null;
    /** The Unix timestamp, in seconds, representing when this failed. */
    failedAt: Date | null;
    /** Usage statistics related to the run step. This value will be `null` while the run step's status is `in_progress`. */
    usage?: RunStepCompletionUsage | null;
    /** A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. */
    metadata: Record<string, string> | null;
}
export declare function runStepDeserializer(item: any): RunStep;
/** The possible types of run steps. */
export type RunStepType = "message_creation" | "tool_calls";
/** Possible values for the status of a run step. */
export type RunStepStatus = "in_progress" | "cancelled" | "failed" | "completed" | "expired";
/** An abstract representation of the details for a run step. */
export interface RunStepDetails {
    /** The object type. */
    /** The discriminator possible values: message_creation, tool_calls */
    type: RunStepType;
}
export declare function runStepDetailsDeserializer(item: any): RunStepDetails;
/** Alias for RunStepDetailsUnion */
export type RunStepDetailsUnion = RunStepMessageCreationDetails | RunStepToolCallDetails | RunStepDetails;
export declare function runStepDetailsUnionDeserializer(item: any): RunStepDetailsUnion;
/** The detailed information associated with a message creation run step. */
export interface RunStepMessageCreationDetails extends RunStepDetails {
    /** The object type, which is always 'message_creation'. */
    type: "message_creation";
    /** Information about the message creation associated with this run step. */
    messageCreation: RunStepMessageCreationReference;
}
export declare function runStepMessageCreationDetailsDeserializer(item: any): RunStepMessageCreationDetails;
/** The details of a message created as a part of a run step. */
export interface RunStepMessageCreationReference {
    /** The ID of the message created by this run step. */
    messageId: string;
}
export declare function runStepMessageCreationReferenceDeserializer(item: any): RunStepMessageCreationReference;
/** The detailed information associated with a run step calling tools. */
export interface RunStepToolCallDetails extends RunStepDetails {
    /** The object type, which is always 'tool_calls'. */
    type: "tool_calls";
    /** A list of tool call details for this run step. */
    toolCalls: RunStepToolCallUnion[];
}
export declare function runStepToolCallDetailsDeserializer(item: any): RunStepToolCallDetails;
export declare function runStepToolCallUnionArrayDeserializer(result: Array<RunStepToolCallUnion>): any[];
/** An abstract representation of a detailed tool call as recorded within a run step for an existing run. */
export interface RunStepToolCall {
    /** The object type. */
    /** The discriminator possible values: code_interpreter, file_search, bing_grounding, azure_ai_search, sharepoint_grounding, fabric_dataagent, bing_custom_search, function, openapi */
    type: string;
    /** The ID of the tool call. This ID must be referenced when you submit tool outputs. */
    id: string;
}
export declare function runStepToolCallDeserializer(item: any): RunStepToolCall;
/** Alias for RunStepToolCallUnion */
export type RunStepToolCallUnion = RunStepCodeInterpreterToolCall | RunStepFileSearchToolCall | RunStepBingGroundingToolCall | RunStepAzureAISearchToolCall | RunStepSharepointToolCall | RunStepMicrosoftFabricToolCall | RunStepBingCustomSearchToolCall | RunStepFunctionToolCall | RunStepOpenAPIToolCall | RunStepToolCall;
export declare function runStepToolCallUnionDeserializer(item: any): RunStepToolCallUnion;
/**
 * A record of a call to a code interpreter tool, issued by the model in evaluation of a defined tool, that
 * represents inputs and outputs consumed and emitted by the code interpreter.
 */
export interface RunStepCodeInterpreterToolCall extends RunStepToolCall {
    /** The object type, which is always 'code_interpreter'. */
    type: "code_interpreter";
    /** The details of the tool call to the code interpreter tool. */
    codeInterpreter: RunStepCodeInterpreterToolCallDetails;
}
export declare function runStepCodeInterpreterToolCallDeserializer(item: any): RunStepCodeInterpreterToolCall;
/** The detailed information about a code interpreter invocation by the model. */
export interface RunStepCodeInterpreterToolCallDetails {
    /** The input provided by the model to the code interpreter tool. */
    input: string;
    /** The outputs produced by the code interpreter tool back to the model in response to the tool call. */
    outputs: RunStepCodeInterpreterToolCallOutputUnion[];
}
export declare function runStepCodeInterpreterToolCallDetailsDeserializer(item: any): RunStepCodeInterpreterToolCallDetails;
export declare function runStepCodeInterpreterToolCallOutputUnionArrayDeserializer(result: Array<RunStepCodeInterpreterToolCallOutputUnion>): any[];
/** An abstract representation of an emitted output from a code interpreter tool. */
export interface RunStepCodeInterpreterToolCallOutput {
    /** The object type. */
    /** The discriminator possible values: logs, image */
    type: string;
}
export declare function runStepCodeInterpreterToolCallOutputDeserializer(item: any): RunStepCodeInterpreterToolCallOutput;
/** Alias for RunStepCodeInterpreterToolCallOutputUnion */
export type RunStepCodeInterpreterToolCallOutputUnion = RunStepCodeInterpreterLogOutput | RunStepCodeInterpreterImageOutput | RunStepCodeInterpreterToolCallOutput;
export declare function runStepCodeInterpreterToolCallOutputUnionDeserializer(item: any): RunStepCodeInterpreterToolCallOutputUnion;
/** A representation of a log output emitted by a code interpreter tool in response to a tool call by the model. */
export interface RunStepCodeInterpreterLogOutput extends RunStepCodeInterpreterToolCallOutput {
    /** The object type, which is always 'logs'. */
    type: "logs";
    /** The serialized log output emitted by the code interpreter. */
    logs: string;
}
export declare function runStepCodeInterpreterLogOutputDeserializer(item: any): RunStepCodeInterpreterLogOutput;
/** A representation of an image output emitted by a code interpreter tool in response to a tool call by the model. */
export interface RunStepCodeInterpreterImageOutput extends RunStepCodeInterpreterToolCallOutput {
    /** The object type, which is always 'image'. */
    type: "image";
    /** Referential information for the image associated with this output. */
    image: RunStepCodeInterpreterImageReference;
}
export declare function runStepCodeInterpreterImageOutputDeserializer(item: any): RunStepCodeInterpreterImageOutput;
/** An image reference emitted by a code interpreter tool in response to a tool call by the model. */
export interface RunStepCodeInterpreterImageReference {
    /** The ID of the file associated with this image. */
    fileId: string;
}
export declare function runStepCodeInterpreterImageReferenceDeserializer(item: any): RunStepCodeInterpreterImageReference;
/**
 * A record of a call to a file search tool, issued by the model in evaluation of a defined tool, that represents
 * executed file search.
 */
export interface RunStepFileSearchToolCall extends RunStepToolCall {
    /** The object type, which is always 'file_search'. */
    type: "file_search";
    /** The ID of the tool call. This ID must be referenced when you submit tool outputs. */
    id: string;
    /** For now, this is always going to be an empty object. */
    fileSearch: RunStepFileSearchToolCallResults;
}
export declare function runStepFileSearchToolCallDeserializer(item: any): RunStepFileSearchToolCall;
/** The results of the file search. */
export interface RunStepFileSearchToolCallResults {
    /** Ranking options for file search. */
    rankingOptions?: FileSearchRankingOptions;
    /** The array of a file search results */
    results: RunStepFileSearchToolCallResult[];
}
export declare function runStepFileSearchToolCallResultsDeserializer(item: any): RunStepFileSearchToolCallResults;
export declare function runStepFileSearchToolCallResultArrayDeserializer(result: Array<RunStepFileSearchToolCallResult>): any[];
/**   File search tool call result. */
export interface RunStepFileSearchToolCallResult {
    /** The ID of the file that result was found in. */
    fileId: string;
    /** The name of the file that result was found in. */
    fileName: string;
    /** The score of the result. All values must be a floating point number between 0 and 1. */
    score: number;
    /** The content of the result that was found. The content is only included if requested via the include query parameter. */
    content?: FileSearchToolCallContent[];
}
export declare function runStepFileSearchToolCallResultDeserializer(item: any): RunStepFileSearchToolCallResult;
export declare function fileSearchToolCallContentArrayDeserializer(result: Array<FileSearchToolCallContent>): any[];
/** The file search result content object. */
export interface FileSearchToolCallContent {
    /** The type of the content. */
    type: "text";
    /** The text content of the file. */
    text: string;
}
export declare function fileSearchToolCallContentDeserializer(item: any): FileSearchToolCallContent;
/**
 * A record of a call to a bing grounding tool, issued by the model in evaluation of a defined tool, that represents
 * executed search with bing grounding.
 */
export interface RunStepBingGroundingToolCall extends RunStepToolCall {
    /** The object type, which is always 'bing_grounding'. */
    type: "bing_grounding";
    /** Reserved for future use. */
    bingGrounding: Record<string, string>;
}
export declare function runStepBingGroundingToolCallDeserializer(item: any): RunStepBingGroundingToolCall;
/**
 * A record of a call to an Azure AI Search tool, issued by the model in evaluation of a defined tool, that represents
 * executed Azure AI search.
 */
export interface RunStepAzureAISearchToolCall extends RunStepToolCall {
    /** The object type, which is always 'azure_ai_search'. */
    type: "azure_ai_search";
    /** Reserved for future use. */
    azureAISearch: Record<string, string>;
}
export declare function runStepAzureAISearchToolCallDeserializer(item: any): RunStepAzureAISearchToolCall;
/**
 * A record of a call to a SharePoint tool, issued by the model in evaluation of a defined tool, that represents
 * executed SharePoint actions.
 */
export interface RunStepSharepointToolCall extends RunStepToolCall {
    /** The object type, which is always 'sharepoint_grounding'. */
    type: "sharepoint_grounding";
    /** Reserved for future use. */
    sharePoint: Record<string, string>;
}
export declare function runStepSharepointToolCallDeserializer(item: any): RunStepSharepointToolCall;
/**
 * A record of a call to a Microsoft Fabric tool, issued by the model in evaluation of a defined tool, that represents
 * executed Microsoft Fabric operations.
 */
export interface RunStepMicrosoftFabricToolCall extends RunStepToolCall {
    /** The object type, which is always 'fabric_dataagent'. */
    type: "fabric_dataagent";
    /** Reserved for future use. */
    microsoftFabric: Record<string, string>;
}
export declare function runStepMicrosoftFabricToolCallDeserializer(item: any): RunStepMicrosoftFabricToolCall;
/**
 * A record of a call to a bing custom search tool, issued by the model in evaluation of a defined tool, that represents
 * executed search with bing custom search.
 */
export interface RunStepBingCustomSearchToolCall extends RunStepToolCall {
    /** The object type, which is always 'bing_custom_search'. */
    type: "bing_custom_search";
    /** Reserved for future use. */
    bingCustomSearch: Record<string, string>;
}
export declare function runStepBingCustomSearchToolCallDeserializer(item: any): RunStepBingCustomSearchToolCall;
/**
 * A record of a call to a function tool, issued by the model in evaluation of a defined tool, that represents the inputs
 * and output consumed and emitted by the specified function.
 */
export interface RunStepFunctionToolCall extends RunStepToolCall {
    /** The object type, which is always 'function'. */
    type: "function";
    /** The detailed information about the function called by the model. */
    function: RunStepFunctionToolCallDetails;
}
export declare function runStepFunctionToolCallDeserializer(item: any): RunStepFunctionToolCall;
/** The detailed information about the function called by the model. */
export interface RunStepFunctionToolCallDetails {
    /** The name of the function. */
    name: string;
    /** The arguments that the model requires are provided to the named function. */
    arguments: string;
}
export declare function runStepFunctionToolCallDetailsDeserializer(item: any): RunStepFunctionToolCallDetails;
/**
 * A record of a call to an OpenAPI tool, issued by the model in evaluation of a defined tool, that represents
 * executed OpenAPI operations.
 */
export interface RunStepOpenAPIToolCall extends RunStepToolCall {
    /** The object type, which is always 'openapi'. */
    type: "openapi";
    /** Reserved for future use. */
    openAPI: Record<string, string>;
}
export declare function runStepOpenAPIToolCallDeserializer(item: any): RunStepOpenAPIToolCall;
/** The error information associated with a failed run step. */
export interface RunStepError {
    /** The error code for this error. */
    code: RunStepErrorCode;
    /** The human-readable text associated with this error. */
    message: string;
}
export declare function runStepErrorDeserializer(item: any): RunStepError;
/** Possible error code values attributable to a failed run step. */
export type RunStepErrorCode = "server_error" | "rate_limit_exceeded";
/** Usage statistics related to the run step. */
export interface RunStepCompletionUsage {
    /** Number of completion tokens used over the course of the run step. */
    completionTokens: number;
    /** Number of prompt tokens used over the course of the run step. */
    promptTokens: number;
    /** Total number of tokens used (prompt + completion). */
    totalTokens: number;
}
export declare function runStepCompletionUsageDeserializer(item: any): RunStepCompletionUsage;
/** The response data for a requested list of items. */
export interface _AgentsPagedResultRunStep {
    /** The requested list of items. */
    data: RunStep[];
    /** The last ID represented in this list. */
    lastId?: string;
    /** A value indicating whether there are additional values available not captured in this list. */
    hasMore: boolean;
}
export declare function _agentsPagedResultRunStepDeserializer(item: any): _AgentsPagedResultRunStep;
export declare function runStepArrayDeserializer(result: Array<RunStep>): any[];
/** The response data from a file list operation. */
export interface FileListResponse {
    /** The object type, which is always 'list'. */
    object: "list";
    /** The files returned for the request. */
    data: FileInfo[];
}
export declare function fileListResponseDeserializer(item: any): FileListResponse;
export declare function fileInfoArrayDeserializer(result: Array<FileInfo>): any[];
/** Represents an agent that can call the model and use tools. */
export interface FileInfo {
    /** The object type, which is always 'file'. */
    object: "file";
    /** The identifier, which can be referenced in API endpoints. */
    id: string;
    /** The size of the file, in bytes. */
    bytes: number;
    /** The name of the file. */
    filename: string;
    /** The Unix timestamp, in seconds, representing when this object was created. */
    createdAt: Date;
    /** The intended purpose of a file. */
    purpose: FilePurpose;
    /** The state of the file. This field is available in Azure OpenAI only. */
    status?: FileState;
    /** The error message with details in case processing of this file failed. This field is available in Azure OpenAI only. */
    statusDetails?: string;
}
export declare function fileInfoDeserializer(item: any): FileInfo;
/** The possible values denoting the intended usage of a file. */
export type FilePurpose = "fine-tune" | "fine-tune-results" | "assistants" | "assistants_output" | "batch" | "batch_output" | "vision";
/** The state of the file. */
export type FileState = "uploaded" | "pending" | "running" | "processed" | "error" | "deleting" | "deleted";
/** model interface _UploadFileRequest */
export interface _UploadFileRequest {
    /** The file data, in bytes. */
    file: FileContents | {
        contents: FileContents;
        contentType?: string;
        filename?: string;
    };
    /** The intended purpose of the uploaded file. Use `assistants` for Agents and Message files, `vision` for Agents image file inputs, `batch` for Batch API, and `fine-tune` for Fine-tuning. */
    purpose: FilePurpose;
    /** The name of the file. */
    filename?: string;
}
export declare function _uploadFileRequestSerializer(item: _UploadFileRequest): Array<{
    name: "file" | "purpose";
    body: any;
    filename?: string;
}>;
/** A status response from a file deletion operation. */
export interface FileDeletionStatus {
    /** The ID of the resource specified for deletion. */
    id: string;
    /** A value indicating whether deletion was successful. */
    deleted: boolean;
    /** The object type, which is always 'file'. */
    object: "file";
}
export declare function fileDeletionStatusDeserializer(item: any): FileDeletionStatus;
/** The response data for a requested list of items. */
export interface _AgentsPagedResultVectorStore {
    /** The requested list of items. */
    data: VectorStore[];
    /** The last ID represented in this list. */
    lastId?: string;
    /** A value indicating whether there are additional values available not captured in this list. */
    hasMore: boolean;
}
export declare function _agentsPagedResultVectorStoreDeserializer(item: any): _AgentsPagedResultVectorStore;
export declare function vectorStoreArrayDeserializer(result: Array<VectorStore>): any[];
/** A vector store is a collection of processed files can be used by the `file_search` tool. */
export interface VectorStore {
    /** The identifier, which can be referenced in API endpoints. */
    id: string;
    /** The object type, which is always `vector_store` */
    object: "vector_store";
    /** The Unix timestamp (in seconds) for when the vector store was created. */
    createdAt: Date;
    /** The name of the vector store. */
    name: string;
    /** The total number of bytes used by the files in the vector store. */
    usageBytes: number;
    /** Files count grouped by status processed or being processed by this vector store. */
    fileCounts: VectorStoreFileCount;
    /** The status of the vector store, which can be either `expired`, `in_progress`, or `completed`. A status of `completed` indicates that the vector store is ready for use. */
    status: VectorStoreStatus;
    /** Details on when this vector store expires */
    expiresAfter?: VectorStoreExpirationPolicy;
    /** The Unix timestamp (in seconds) for when the vector store will expire. */
    expiresAt?: Date | null;
    /** The Unix timestamp (in seconds) for when the vector store was last active. */
    lastActiveAt: Date | null;
    /** A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. */
    metadata: Record<string, string> | null;
}
export declare function vectorStoreDeserializer(item: any): VectorStore;
/** Counts of files processed or being processed by this vector store grouped by status. */
export interface VectorStoreFileCount {
    /** The number of files that are currently being processed. */
    inProgress: number;
    /** The number of files that have been successfully processed. */
    completed: number;
    /** The number of files that have failed to process. */
    failed: number;
    /** The number of files that were cancelled. */
    cancelled: number;
    /** The total number of files. */
    total: number;
}
export declare function vectorStoreFileCountDeserializer(item: any): VectorStoreFileCount;
/** Vector store possible status */
export type VectorStoreStatus = "expired" | "in_progress" | "completed";
/** The expiration policy for a vector store. */
export interface VectorStoreExpirationPolicy {
    /** Anchor timestamp after which the expiration policy applies. Supported anchors: `last_active_at`. */
    anchor: VectorStoreExpirationPolicyAnchor;
    /** The anchor timestamp after which the expiration policy applies. */
    days: number;
}
export declare function vectorStoreExpirationPolicySerializer(item: VectorStoreExpirationPolicy): any;
export declare function vectorStoreExpirationPolicyDeserializer(item: any): VectorStoreExpirationPolicy;
/** Describes the relationship between the days and the expiration of this vector store */
export type VectorStoreExpirationPolicyAnchor = "last_active_at";
/** An abstract representation of a vector store chunking strategy configuration. */
export interface VectorStoreChunkingStrategyRequest {
    /** The object type. */
    /** The discriminator possible values: auto, static */
    type: VectorStoreChunkingStrategyRequestType;
}
export declare function vectorStoreChunkingStrategyRequestSerializer(item: VectorStoreChunkingStrategyRequest): any;
/** Alias for VectorStoreChunkingStrategyRequestUnion */
export type VectorStoreChunkingStrategyRequestUnion = VectorStoreAutoChunkingStrategyRequest | VectorStoreStaticChunkingStrategyRequest | VectorStoreChunkingStrategyRequest;
export declare function vectorStoreChunkingStrategyRequestUnionSerializer(item: VectorStoreChunkingStrategyRequestUnion): any;
/** Type of chunking strategy */
export type VectorStoreChunkingStrategyRequestType = "auto" | "static";
/** The default strategy. This strategy currently uses a max_chunk_size_tokens of 800 and chunk_overlap_tokens of 400. */
export interface VectorStoreAutoChunkingStrategyRequest extends VectorStoreChunkingStrategyRequest {
    /** The object type, which is always 'auto'. */
    type: "auto";
}
export declare function vectorStoreAutoChunkingStrategyRequestSerializer(item: VectorStoreAutoChunkingStrategyRequest): any;
/** A statically configured chunking strategy. */
export interface VectorStoreStaticChunkingStrategyRequest extends VectorStoreChunkingStrategyRequest {
    /** The object type, which is always 'static'. */
    type: "static";
    /** The options for the static chunking strategy. */
    static: VectorStoreStaticChunkingStrategyOptions;
}
export declare function vectorStoreStaticChunkingStrategyRequestSerializer(item: VectorStoreStaticChunkingStrategyRequest): any;
/** Options to configure a vector store static chunking strategy. */
export interface VectorStoreStaticChunkingStrategyOptions {
    /** The maximum number of tokens in each chunk. The default value is 800. The minimum value is 100 and the maximum value is 4096. */
    maxChunkSizeTokens: number;
    /**
     * The number of tokens that overlap between chunks. The default value is 400.
     * Note that the overlap must not exceed half of max_chunk_size_tokens.
     */
    chunkOverlapTokens: number;
}
export declare function vectorStoreStaticChunkingStrategyOptionsSerializer(item: VectorStoreStaticChunkingStrategyOptions): any;
export declare function vectorStoreStaticChunkingStrategyOptionsDeserializer(item: any): VectorStoreStaticChunkingStrategyOptions;
/** Response object for deleting a vector store. */
export interface VectorStoreDeletionStatus {
    /** The ID of the resource specified for deletion. */
    id: string;
    /** A value indicating whether deletion was successful. */
    deleted: boolean;
    /** The object type, which is always 'vector_store.deleted'. */
    object: "vector_store.deleted";
}
export declare function vectorStoreDeletionStatusDeserializer(item: any): VectorStoreDeletionStatus;
/** The response data for a requested list of items. */
export interface _AgentsPagedResultVectorStoreFile {
    /** The requested list of items. */
    data: VectorStoreFile[];
    /** The last ID represented in this list. */
    lastId?: string;
    /** A value indicating whether there are additional values available not captured in this list. */
    hasMore: boolean;
}
export declare function _agentsPagedResultVectorStoreFileDeserializer(item: any): _AgentsPagedResultVectorStoreFile;
export declare function vectorStoreFileArrayDeserializer(result: Array<VectorStoreFile>): any[];
/** Description of a file attached to a vector store. */
export interface VectorStoreFile {
    /** The identifier, which can be referenced in API endpoints. */
    id: string;
    /** The object type, which is always `vector_store.file`. */
    object: "vector_store.file";
    /**
     * The total vector store usage in bytes. Note that this may be different from the original file
     * size.
     */
    usageBytes: number;
    /** The Unix timestamp (in seconds) for when the vector store file was created. */
    createdAt: Date;
    /** The ID of the vector store that the file is attached to. */
    vectorStoreId: string;
    /** The status of the vector store file, which can be either `in_progress`, `completed`, `cancelled`, or `failed`. The status `completed` indicates that the vector store file is ready for use. */
    status: VectorStoreFileStatus;
    /** The last error associated with this vector store file. Will be `null` if there are no errors. */
    lastError: VectorStoreFileError | null;
    /** The strategy used to chunk the file. */
    chunkingStrategy: VectorStoreChunkingStrategyResponseUnion;
}
export declare function vectorStoreFileDeserializer(item: any): VectorStoreFile;
/** Vector store file status */
export type VectorStoreFileStatus = "in_progress" | "completed" | "failed" | "cancelled";
/** Details on the error that may have occurred while processing a file for this vector store */
export interface VectorStoreFileError {
    /** One of `server_error` or `rate_limit_exceeded`. */
    code: VectorStoreFileErrorCode;
    /** A human-readable description of the error. */
    message: string;
}
export declare function vectorStoreFileErrorDeserializer(item: any): VectorStoreFileError;
/** Error code variants for vector store file processing */
export type VectorStoreFileErrorCode = "server_error" | "invalid_file" | "unsupported_file";
/** An abstract representation of a vector store chunking strategy configuration. */
export interface VectorStoreChunkingStrategyResponse {
    /** The object type. */
    /** The discriminator possible values: other, static */
    type: VectorStoreChunkingStrategyResponseType;
}
export declare function vectorStoreChunkingStrategyResponseDeserializer(item: any): VectorStoreChunkingStrategyResponse;
/** Alias for VectorStoreChunkingStrategyResponseUnion */
export type VectorStoreChunkingStrategyResponseUnion = VectorStoreAutoChunkingStrategyResponse | VectorStoreStaticChunkingStrategyResponse | VectorStoreChunkingStrategyResponse;
export declare function vectorStoreChunkingStrategyResponseUnionDeserializer(item: any): VectorStoreChunkingStrategyResponseUnion;
/** Type of chunking strategy */
export type VectorStoreChunkingStrategyResponseType = "other" | "static";
/** This is returned when the chunking strategy is unknown. Typically, this is because the file was indexed before the chunking_strategy concept was introduced in the API. */
export interface VectorStoreAutoChunkingStrategyResponse extends VectorStoreChunkingStrategyResponse {
    /** The object type, which is always 'other'. */
    type: "other";
}
export declare function vectorStoreAutoChunkingStrategyResponseDeserializer(item: any): VectorStoreAutoChunkingStrategyResponse;
/** A statically configured chunking strategy. */
export interface VectorStoreStaticChunkingStrategyResponse extends VectorStoreChunkingStrategyResponse {
    /** The object type, which is always 'static'. */
    type: "static";
    /** The options for the static chunking strategy. */
    static: VectorStoreStaticChunkingStrategyOptions;
}
export declare function vectorStoreStaticChunkingStrategyResponseDeserializer(item: any): VectorStoreStaticChunkingStrategyResponse;
/** Response object for deleting a vector store file relationship. */
export interface VectorStoreFileDeletionStatus {
    /** The ID of the resource specified for deletion. */
    id: string;
    /** A value indicating whether deletion was successful. */
    deleted: boolean;
    /** The object type, which is always 'vector_store.deleted'. */
    object: "vector_store.file.deleted";
}
export declare function vectorStoreFileDeletionStatusDeserializer(item: any): VectorStoreFileDeletionStatus;
/** A batch of files attached to a vector store. */
export interface VectorStoreFileBatch {
    /** The identifier, which can be referenced in API endpoints. */
    id: string;
    /** The object type, which is always `vector_store.file_batch`. */
    object: "vector_store.files_batch";
    /** The Unix timestamp (in seconds) for when the vector store files batch was created. */
    createdAt: Date;
    /** The ID of the vector store that the file is attached to. */
    vectorStoreId: string;
    /** The status of the vector store files batch, which can be either `in_progress`, `completed`, `cancelled` or `failed`. */
    status: VectorStoreFileBatchStatus;
    /** Files count grouped by status processed or being processed by this vector store. */
    fileCounts: VectorStoreFileCount;
}
export declare function vectorStoreFileBatchDeserializer(item: any): VectorStoreFileBatch;
/** The status of the vector store file batch. */
export type VectorStoreFileBatchStatus = "in_progress" | "completed" | "cancelled" | "failed";
/** Represents a message delta i.e. any changed fields on a message during streaming. */
export interface MessageDeltaChunk {
    /** The identifier of the message, which can be referenced in API endpoints. */
    id: string;
    /** The object type, which is always `thread.message.delta`. */
    object: "thread.message.delta";
    /** The delta containing the fields that have changed on the Message. */
    delta: MessageDelta;
}
export declare function messageDeltaChunkDeserializer(item: any): MessageDeltaChunk;
/** Represents the typed 'delta' payload within a streaming message delta chunk. */
export interface MessageDelta {
    /** The entity that produced the message. */
    role: MessageRole;
    /** The content of the message as an array of text and/or images. */
    content: MessageDeltaContentUnion[];
}
export declare function messageDeltaDeserializer(item: any): MessageDelta;
export declare function messageDeltaContentUnionArrayDeserializer(result: Array<MessageDeltaContentUnion>): any[];
/** The abstract base representation of a partial streamed message content payload. */
export interface MessageDeltaContent {
    /** The index of the content part of the message. */
    index: number;
    /** The type of content for this content part. */
    /** The discriminator possible values: image_file, text */
    type: string;
}
export declare function messageDeltaContentDeserializer(item: any): MessageDeltaContent;
/** Alias for MessageDeltaContentUnion */
export type MessageDeltaContentUnion = MessageDeltaImageFileContent | MessageDeltaTextContent | MessageDeltaContent;
export declare function messageDeltaContentUnionDeserializer(item: any): MessageDeltaContentUnion;
/** Represents a streamed image file content part within a streaming message delta chunk. */
export interface MessageDeltaImageFileContent extends MessageDeltaContent {
    /** The type of content for this content part, which is always "image_file." */
    type: "image_file";
    /** The image_file data. */
    imageFile?: MessageDeltaImageFileContentObject;
}
export declare function messageDeltaImageFileContentDeserializer(item: any): MessageDeltaImageFileContent;
/** Represents the 'image_file' payload within streaming image file content. */
export interface MessageDeltaImageFileContentObject {
    /** The file ID of the image in the message content. */
    fileId?: string;
}
export declare function messageDeltaImageFileContentObjectDeserializer(item: any): MessageDeltaImageFileContentObject;
/** Represents a streamed text content part within a streaming message delta chunk. */
export interface MessageDeltaTextContent extends MessageDeltaContent {
    /** The type of content for this content part, which is always "text." */
    type: "text";
    /** The text content details. */
    text?: MessageDeltaTextContentObject;
}
export declare function messageDeltaTextContentDeserializer(item: any): MessageDeltaTextContent;
/** Represents the data of a streamed text content part within a streaming message delta chunk. */
export interface MessageDeltaTextContentObject {
    /** The data that makes up the text. */
    value?: string;
    /** Annotations for the text. */
    annotations?: MessageDeltaTextAnnotationUnion[];
}
export declare function messageDeltaTextContentObjectDeserializer(item: any): MessageDeltaTextContentObject;
export declare function messageDeltaTextAnnotationUnionArrayDeserializer(result: Array<MessageDeltaTextAnnotationUnion>): any[];
/** The abstract base representation of a streamed text content part's text annotation. */
export interface MessageDeltaTextAnnotation {
    /** The index of the annotation within a text content part. */
    index: number;
    /** The type of the text content annotation. */
    /** The discriminator possible values: url_citation, file_citation, file_path */
    type: string;
}
export declare function messageDeltaTextAnnotationDeserializer(item: any): MessageDeltaTextAnnotation;
/** Alias for MessageDeltaTextAnnotationUnion */
export type MessageDeltaTextAnnotationUnion = MessageDeltaTextUrlCitationAnnotation | MessageDeltaTextFileCitationAnnotation | MessageDeltaTextFilePathAnnotation | MessageDeltaTextAnnotation;
export declare function messageDeltaTextAnnotationUnionDeserializer(item: any): MessageDeltaTextAnnotationUnion;
/** A citation within the message that points to a specific URL associated with the message. Generated when the agent uses tools such as 'bing_grounding' to search the Internet. */
export interface MessageDeltaTextUrlCitationAnnotation extends MessageDeltaTextAnnotation {
    /** The object type, which is always 'url_citation'. */
    type: "url_citation";
    /** The details of the URL citation. */
    urlCitation: MessageDeltaTextUrlCitationDetails;
    /** The first text index associated with this text annotation. */
    startIndex?: number;
    /** The last text index associated with this text annotation. */
    endIndex?: number;
}
export declare function messageDeltaTextUrlCitationAnnotationDeserializer(item: any): MessageDeltaTextUrlCitationAnnotation;
/** A representation of a URL citation, as used in text thread message content. */
export interface MessageDeltaTextUrlCitationDetails {
    /** The URL associated with this citation. */
    url: string;
    /** The title of the URL. */
    title?: string;
}
export declare function messageDeltaTextUrlCitationDetailsDeserializer(item: any): MessageDeltaTextUrlCitationDetails;
/** Represents a streamed file citation applied to a streaming text content part. */
export interface MessageDeltaTextFileCitationAnnotation extends MessageDeltaTextAnnotation {
    /** The type of the text content annotation, which is always "file_citation." */
    type: "file_citation";
    /** The file citation information. */
    fileCitation?: MessageDeltaTextFileCitationAnnotationObject;
    /** The text in the message content that needs to be replaced */
    text?: string;
    /** The start index of this annotation in the content text. */
    startIndex?: number;
    /** The end index of this annotation in the content text. */
    endIndex?: number;
}
export declare function messageDeltaTextFileCitationAnnotationDeserializer(item: any): MessageDeltaTextFileCitationAnnotation;
/** Represents the data of a streamed file citation as applied to a streaming text content part. */
export interface MessageDeltaTextFileCitationAnnotationObject {
    /** The ID of the specific file the citation is from. */
    fileId?: string;
    /** The specific quote in the cited file. */
    quote?: string;
}
export declare function messageDeltaTextFileCitationAnnotationObjectDeserializer(item: any): MessageDeltaTextFileCitationAnnotationObject;
/** Represents a streamed file path annotation applied to a streaming text content part. */
export interface MessageDeltaTextFilePathAnnotation extends MessageDeltaTextAnnotation {
    /** The type of the text content annotation, which is always "file_path." */
    type: "file_path";
    /** The file path information. */
    filePath?: MessageDeltaTextFilePathAnnotationObject;
    /** The start index of this annotation in the content text. */
    startIndex?: number;
    /** The end index of this annotation in the content text. */
    endIndex?: number;
    /** The text in the message content that needs to be replaced */
    text?: string;
}
export declare function messageDeltaTextFilePathAnnotationDeserializer(item: any): MessageDeltaTextFilePathAnnotation;
/** Represents the data of a streamed file path annotation as applied to a streaming text content part. */
export interface MessageDeltaTextFilePathAnnotationObject {
    /** The file ID for the annotation. */
    fileId?: string;
}
export declare function messageDeltaTextFilePathAnnotationObjectDeserializer(item: any): MessageDeltaTextFilePathAnnotationObject;
/** Represents a run step delta i.e. any changed fields on a run step during streaming. */
export interface RunStepDeltaChunk {
    /** The identifier of the run step, which can be referenced in API endpoints. */
    id: string;
    /** The object type, which is always `thread.run.step.delta`. */
    object: "thread.run.step.delta";
    /** The delta containing the fields that have changed on the run step. */
    delta: RunStepDelta;
}
export declare function runStepDeltaChunkDeserializer(item: any): RunStepDeltaChunk;
/** Represents the delta payload in a streaming run step delta chunk. */
export interface RunStepDelta {
    /** The details of the run step. */
    stepDetails?: RunStepDeltaDetailUnion;
}
export declare function runStepDeltaDeserializer(item: any): RunStepDelta;
/** Represents a single run step detail item in a streaming run step's delta payload. */
export interface RunStepDeltaDetail {
    /** The object type for the run step detail object. */
    /** The discriminator possible values: message_creation, tool_calls */
    type: string;
}
export declare function runStepDeltaDetailDeserializer(item: any): RunStepDeltaDetail;
/** Alias for RunStepDeltaDetailUnion */
export type RunStepDeltaDetailUnion = RunStepDeltaMessageCreation | RunStepDeltaToolCallObject | RunStepDeltaDetail;
export declare function runStepDeltaDetailUnionDeserializer(item: any): RunStepDeltaDetailUnion;
/** Represents a message creation within a streaming run step delta. */
export interface RunStepDeltaMessageCreation extends RunStepDeltaDetail {
    /** The object type, which is always "message_creation." */
    type: "message_creation";
    /** The message creation data. */
    messageCreation?: RunStepDeltaMessageCreationObject;
}
export declare function runStepDeltaMessageCreationDeserializer(item: any): RunStepDeltaMessageCreation;
/** Represents the data within a streaming run step message creation response object. */
export interface RunStepDeltaMessageCreationObject {
    /** The ID of the newly-created message. */
    messageId?: string;
}
export declare function runStepDeltaMessageCreationObjectDeserializer(item: any): RunStepDeltaMessageCreationObject;
/** Represents an invocation of tool calls as part of a streaming run step. */
export interface RunStepDeltaToolCallObject extends RunStepDeltaDetail {
    /** The object type, which is always "tool_calls." */
    type: "tool_calls";
    /** The collection of tool calls for the tool call detail item. */
    toolCalls?: RunStepDeltaToolCallUnion[];
}
export declare function runStepDeltaToolCallObjectDeserializer(item: any): RunStepDeltaToolCallObject;
export declare function runStepDeltaToolCallUnionArrayDeserializer(result: Array<RunStepDeltaToolCallUnion>): any[];
/** The abstract base representation of a single tool call within a streaming run step's delta tool call details. */
export interface RunStepDeltaToolCall {
    /** The index of the tool call detail in the run step's tool_calls array. */
    index: number;
    /** The ID of the tool call, used when submitting outputs to the run. */
    id: string;
    /** The type of the tool call detail item in a streaming run step's details. */
    /** The discriminator possible values: function, file_search, code_interpreter */
    type: string;
}
export declare function runStepDeltaToolCallDeserializer(item: any): RunStepDeltaToolCall;
/** Alias for RunStepDeltaToolCallUnion */
export type RunStepDeltaToolCallUnion = RunStepDeltaFunctionToolCall | RunStepDeltaFileSearchToolCall | RunStepDeltaCodeInterpreterToolCall | RunStepDeltaToolCall;
export declare function runStepDeltaToolCallUnionDeserializer(item: any): RunStepDeltaToolCallUnion;
/** Represents a function tool call within a streaming run step's tool call details. */
export interface RunStepDeltaFunctionToolCall extends RunStepDeltaToolCall {
    /** The object type, which is always "function." */
    type: "function";
    /** The function data for the tool call. */
    function?: RunStepDeltaFunction;
}
export declare function runStepDeltaFunctionToolCallDeserializer(item: any): RunStepDeltaFunctionToolCall;
/** Represents the function data in a streaming run step delta's function tool call. */
export interface RunStepDeltaFunction {
    /** The name of the function. */
    name?: string;
    /** The arguments passed to the function as input. */
    arguments?: string;
    /** The output of the function, null if outputs have not yet been submitted. */
    output?: string | null;
}
export declare function runStepDeltaFunctionDeserializer(item: any): RunStepDeltaFunction;
/** Represents a file search tool call within a streaming run step's tool call details. */
export interface RunStepDeltaFileSearchToolCall extends RunStepDeltaToolCall {
    /** The object type, which is always "file_search." */
    type: "file_search";
    /** Reserved for future use. */
    fileSearch?: RunStepFileSearchToolCallResults;
}
export declare function runStepDeltaFileSearchToolCallDeserializer(item: any): RunStepDeltaFileSearchToolCall;
/** Represents a Code Interpreter tool call within a streaming run step's tool call details. */
export interface RunStepDeltaCodeInterpreterToolCall extends RunStepDeltaToolCall {
    /** The object type, which is always "code_interpreter." */
    type: "code_interpreter";
    /** The Code Interpreter data for the tool call. */
    codeInterpreter?: RunStepDeltaCodeInterpreterDetailItemObject;
}
export declare function runStepDeltaCodeInterpreterToolCallDeserializer(item: any): RunStepDeltaCodeInterpreterToolCall;
/** Represents the Code Interpreter tool call data in a streaming run step's tool calls. */
export interface RunStepDeltaCodeInterpreterDetailItemObject {
    /** The input into the Code Interpreter tool call. */
    input?: string;
    /**
     * The outputs from the Code Interpreter tool call. Code Interpreter can output one or more
     * items, including text (`logs`) or images (`image`). Each of these are represented by a
     * different object type.
     */
    outputs?: RunStepDeltaCodeInterpreterOutputUnion[];
}
export declare function runStepDeltaCodeInterpreterDetailItemObjectDeserializer(item: any): RunStepDeltaCodeInterpreterDetailItemObject;
export declare function runStepDeltaCodeInterpreterOutputUnionArrayDeserializer(result: Array<RunStepDeltaCodeInterpreterOutputUnion>): any[];
/** The abstract base representation of a streaming run step tool call's Code Interpreter tool output. */
export interface RunStepDeltaCodeInterpreterOutput {
    /** The index of the output in the streaming run step tool call's Code Interpreter outputs array. */
    index: number;
    /** The type of the streaming run step tool call's Code Interpreter output. */
    /** The discriminator possible values: logs, image */
    type: string;
}
export declare function runStepDeltaCodeInterpreterOutputDeserializer(item: any): RunStepDeltaCodeInterpreterOutput;
/** Alias for RunStepDeltaCodeInterpreterOutputUnion */
export type RunStepDeltaCodeInterpreterOutputUnion = RunStepDeltaCodeInterpreterLogOutput | RunStepDeltaCodeInterpreterImageOutput | RunStepDeltaCodeInterpreterOutput;
export declare function runStepDeltaCodeInterpreterOutputUnionDeserializer(item: any): RunStepDeltaCodeInterpreterOutputUnion;
/** Represents a log output as produced by the Code Interpreter tool and as represented in a streaming run step's delta tool calls collection. */
export interface RunStepDeltaCodeInterpreterLogOutput extends RunStepDeltaCodeInterpreterOutput {
    /** The type of the object, which is always "logs." */
    type: "logs";
    /** The text output from the Code Interpreter tool call. */
    logs?: string;
}
export declare function runStepDeltaCodeInterpreterLogOutputDeserializer(item: any): RunStepDeltaCodeInterpreterLogOutput;
/** Represents an image output as produced the Code interpreter tool and as represented in a streaming run step's delta tool calls collection. */
export interface RunStepDeltaCodeInterpreterImageOutput extends RunStepDeltaCodeInterpreterOutput {
    /** The object type, which is always "image." */
    type: "image";
    /** The image data for the Code Interpreter tool call output. */
    image?: RunStepDeltaCodeInterpreterImageOutputObject;
}
export declare function runStepDeltaCodeInterpreterImageOutputDeserializer(item: any): RunStepDeltaCodeInterpreterImageOutput;
/** Represents the data for a streaming run step's Code Interpreter tool call image output. */
export interface RunStepDeltaCodeInterpreterImageOutputObject {
    /** The file ID for the image. */
    fileId?: string;
}
export declare function runStepDeltaCodeInterpreterImageOutputObjectDeserializer(item: any): RunStepDeltaCodeInterpreterImageOutputObject;
/** Alias for AgentStreamEvent */
export type AgentStreamEvent = string | (ThreadStreamEvent | RunStreamEvent | RunStepStreamEvent | MessageStreamEvent | ErrorEvent | DoneEvent);
export declare function agentStreamEventDeserializer(item: any): AgentStreamEvent;
/** Alias for _ */
export type _ = ThreadStreamEvent | RunStreamEvent | RunStepStreamEvent | MessageStreamEvent | ErrorEvent | DoneEvent;
/** Thread operation related streaming events */
export declare enum ThreadStreamEvent {
    /** Event emitted when a thread is created */
    Created = "thread.created"
}
/** Run operation related streaming events */
export declare enum RunStreamEvent {
    /** Event emitted when a run is created */
    ThreadRunCreated = "thread.run.created",
    /** Event emitted when a run is queued */
    ThreadRunQueued = "thread.run.queued",
    /** Event emitted when a run is in progress */
    ThreadRunInProgress = "thread.run.in_progress",
    /** Event emitted when a run requires action */
    ThreadRunRequiresAction = "thread.run.requires_action",
    /** Event emitted when a run is completed */
    ThreadRunCompleted = "thread.run.completed",
    /** Event emitted when a run is incomplete */
    ThreadRunIncomplete = "thread.run.incomplete",
    /** Event emitted when a run has failed */
    ThreadRunFailed = "thread.run.failed",
    /** Event emitted when a run is being cancelled */
    ThreadRunCancelling = "thread.run.cancelling",
    /** Event emitted when a run has been cancelled */
    ThreadRunCancelled = "thread.run.cancelled",
    /** Event emitted when a run has expired */
    ThreadRunExpired = "thread.run.expired"
}
/** Run step operation related streaming events */
export declare enum RunStepStreamEvent {
    /** Event emitted when a run step is created */
    ThreadRunStepCreated = "thread.run.step.created",
    /** Event emitted when a run step is in progress */
    ThreadRunStepInProgress = "thread.run.step.in_progress",
    /** Event emitted when a run step delta is received */
    ThreadRunStepDelta = "thread.run.step.delta",
    /** Event emitted when a run step is completed */
    ThreadRunStepCompleted = "thread.run.step.completed",
    /** Event emitted when a run step has failed */
    ThreadRunStepFailed = "thread.run.step.failed",
    /** Event emitted when a run step has been cancelled */
    ThreadRunStepCancelled = "thread.run.step.cancelled",
    /** Event emitted when a run step has expired */
    ThreadRunStepExpired = "thread.run.step.expired"
}
/** Message operation related streaming events */
export declare enum MessageStreamEvent {
    /** Event emitted when a message is created */
    ThreadMessageCreated = "thread.message.created",
    /** Event emitted when a message is in progress */
    ThreadMessageInProgress = "thread.message.in_progress",
    /** Event emitted when a message delta is received */
    ThreadMessageDelta = "thread.message.delta",
    /** Event emitted when a message is completed */
    ThreadMessageCompleted = "thread.message.completed",
    /** Event emitted when a message is incomplete */
    ThreadMessageIncomplete = "thread.message.incomplete"
}
/** Terminal event indicating a server side error while streaming. */
export declare enum ErrorEvent {
    /** Server error while streaming */
    Error = "error"
}
/** Terminal event indicating the successful end of a stream. */
export declare enum DoneEvent {
    /** Event emitted when a stream has completed successfully */
    Done = "done"
}
/** The available sorting options when requesting a list of response objects. */
export type ListSortOrder = "asc" | "desc";
/** A list of additional fields to include in the response. */
export type RunAdditionalFieldList = "step_details.tool_calls[*].file_search.results[*].content";
/** Query parameter filter for vector store file retrieval endpoint */
export type VectorStoreFileStatusFilter = "in_progress" | "completed" | "failed" | "cancelled";
/** Azure AI Agents API versions */
export declare enum KnownVersions {
    /** Azure AI API version 2025-05-15. */
    _20250515Preview = "2025-05-15-preview",
    /** Azure AI API version 2025-05-01. */
    V20250501 = "2025-05-01",
    /** Azure AI API version v1. */
    V1 = "v1"
}
//# sourceMappingURL=models.d.ts.map
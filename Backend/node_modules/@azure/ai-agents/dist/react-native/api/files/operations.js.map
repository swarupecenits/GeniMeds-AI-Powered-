{"version":3,"file":"operations.js","sourceRoot":"","sources":["../../../../src/api/files/operations.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { AgentsContext as Client } from \"../index.js\";\nimport {\n  FileListResponse,\n  fileListResponseDeserializer,\n  FileInfo,\n  fileInfoDeserializer,\n  FilePurpose,\n  _uploadFileRequestSerializer,\n  FileDeletionStatus,\n  fileDeletionStatusDeserializer,\n} from \"../../models/models.js\";\nimport {\n  FilesGetFileContentOptionalParams,\n  FilesGetFileOptionalParams,\n  FilesDeleteFileOptionalParams,\n  FilesUploadFileOptionalParams,\n  FilesListFilesOptionalParams,\n} from \"./options.js\";\nimport { expandUrlTemplate } from \"../../static-helpers/urlTemplate.js\";\nimport {\n  StreamableMethod,\n  PathUncheckedResponse,\n  createRestError,\n  operationOptionsToRequestParameters,\n} from \"@azure-rest/core-client\";\nimport type { OperationState, OperationStatus, PollerLike } from \"@azure/core-lro\";\nimport { createPoller } from \"../poller.js\";\n\nexport function _getFileContentSend(\n  context: Client,\n  fileId: string,\n  options: FilesGetFileContentOptionalParams = { requestOptions: {} },\n): StreamableMethod<string | Uint8Array> {\n  const path = expandUrlTemplate(\n    \"/files/{fileId}/content{?api%2Dversion}\",\n    {\n      fileId: fileId,\n      \"api%2Dversion\": context.apiVersion,\n    },\n    {\n      allowReserved: options?.requestOptions?.skipUrlEncoding,\n    },\n  );\n  return context.path(path).get({\n    ...operationOptionsToRequestParameters(options),\n    headers: {\n      accept: \"application/octet-stream\",\n      ...options.requestOptions?.headers,\n    },\n  });\n}\n\n/** Retrieves the raw content of a specific file. */\nexport function getFileContent(\n  context: Client,\n  fileId: string,\n  options: FilesGetFileContentOptionalParams = { requestOptions: {} },\n): StreamableMethod<string | Uint8Array> {\n  const result = _getFileContentSend(context, fileId, options);\n  return result;\n}\n\nexport function _getFileSend(\n  context: Client,\n  fileId: string,\n  options: FilesGetFileOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  const path = expandUrlTemplate(\n    \"/files/{fileId}{?api%2Dversion}\",\n    {\n      fileId: fileId,\n      \"api%2Dversion\": context.apiVersion,\n    },\n    {\n      allowReserved: options?.requestOptions?.skipUrlEncoding,\n    },\n  );\n  return context.path(path).get({\n    ...operationOptionsToRequestParameters(options),\n    headers: {\n      accept: \"application/json\",\n      ...options.requestOptions?.headers,\n    },\n  });\n}\n\nexport async function _getFileDeserialize(result: PathUncheckedResponse): Promise<FileInfo> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    throw createRestError(result);\n  }\n\n  return fileInfoDeserializer(result.body);\n}\n\n/** Returns information about a specific file. Does not retrieve file content. */\nexport async function getFile(\n  context: Client,\n  fileId: string,\n  options: FilesGetFileOptionalParams = { requestOptions: {} },\n): Promise<FileInfo> {\n  const result = await _getFileSend(context, fileId, options);\n  return _getFileDeserialize(result);\n}\n\nexport function _deleteFileSend(\n  context: Client,\n  fileId: string,\n  options: FilesDeleteFileOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  const path = expandUrlTemplate(\n    \"/files/{fileId}{?api%2Dversion}\",\n    {\n      fileId: fileId,\n      \"api%2Dversion\": context.apiVersion,\n    },\n    {\n      allowReserved: options?.requestOptions?.skipUrlEncoding,\n    },\n  );\n  return context.path(path).delete({\n    ...operationOptionsToRequestParameters(options),\n    headers: {\n      accept: \"application/json\",\n      ...options.requestOptions?.headers,\n    },\n  });\n}\n\nexport async function _deleteFileDeserialize(\n  result: PathUncheckedResponse,\n): Promise<FileDeletionStatus> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    throw createRestError(result);\n  }\n\n  return fileDeletionStatusDeserializer(result.body);\n}\n\n/** Delete a previously uploaded file. */\nexport async function deleteFile(\n  context: Client,\n  fileId: string,\n  options: FilesDeleteFileOptionalParams = { requestOptions: {} },\n): Promise<FileDeletionStatus> {\n  const result = await _deleteFileSend(context, fileId, options);\n  return _deleteFileDeserialize(result);\n}\n\nexport function _uploadFileSend(\n  context: Client,\n  body: {\n    file: ReadableStream<Uint8Array> | NodeJS.ReadableStream;\n    purpose: FilePurpose;\n    filename?: string;\n  },\n  options: FilesUploadFileOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  return context.path(\"/files\").post({\n    ...operationOptionsToRequestParameters(options),\n    contentType: \"multipart/form-data\",\n    headers: {\n      accept: \"application/json\",\n      ...options.requestOptions?.headers,\n    },\n    body: _uploadFileRequestSerializer(body),\n  });\n}\n\nexport async function _uploadFileDeserialize(result: PathUncheckedResponse): Promise<FileInfo> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    throw createRestError(result);\n  }\n\n  return fileInfoDeserializer(result.body);\n}\n\n/** Uploads a file for use by other operations. */\nexport async function uploadFileInternal(\n  context: Client,\n  body: {\n    file: ReadableStream<Uint8Array> | NodeJS.ReadableStream;\n    purpose: FilePurpose;\n    filename?: string;\n  },\n  options: FilesUploadFileOptionalParams = { requestOptions: {} },\n): Promise<FileInfo> {\n  const result = await _uploadFileSend(context, body, options);\n  return _uploadFileDeserialize(result);\n}\n\n/** Uploads a file for use by other operations. */\nexport function uploadFile(\n  context: Client,\n  body: {\n    file: ReadableStream<Uint8Array> | NodeJS.ReadableStream;\n    purpose: FilePurpose;\n    filename?: string;\n  },\n  options: FilesUploadFileOptionalParams = { requestOptions: {} },\n): PollerLike<OperationState<FileInfo>, FileInfo> {\n  return createPoller<FileInfo>({\n    initOperation: async () => {\n      return uploadFileInternal(context, body, options);\n    },\n    pollOperation: async (currentResult: FileInfo) => {\n      return getFile(context, currentResult.id, options);\n    },\n    getOperationStatus: getLroOperationStatus,\n    getOperationError: (result: FileInfo) => {\n      return getLroOperationStatus(result) === \"failed\" && result.statusDetails\n        ? new Error(`Operation failed: ${result.statusDetails}`)\n        : undefined;\n    },\n    intervalInMs: options.pollingOptions?.intervalInMs,\n  });\n}\n\n/** Uploads a file for use by other operations with polling */\nexport function uploadFileAndPoll(\n  context: Client,\n  body: {\n    file: ReadableStream<Uint8Array> | NodeJS.ReadableStream;\n    purpose: FilePurpose;\n    filename?: string;\n  },\n  options: FilesUploadFileOptionalParams = { requestOptions: {} },\n): PollerLike<OperationState<FileInfo>, FileInfo> {\n  return createPoller<FileInfo>({\n    initOperation: async () => {\n      return uploadFileInternal(context, body, options);\n    },\n    pollOperation: async (currentResult: FileInfo) => {\n      return getFile(context, currentResult.id, options);\n    },\n    getOperationStatus: getLroOperationStatus,\n    getOperationError: (result: FileInfo) => {\n      return getLroOperationStatus(result) === \"failed\" && result.statusDetails\n        ? new Error(`Operation failed: ${result.statusDetails}`)\n        : undefined;\n    },\n    intervalInMs: options.pollingOptions?.intervalInMs,\n  });\n}\n\nexport function _listFilesSend(\n  context: Client,\n  options: FilesListFilesOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  const path = expandUrlTemplate(\n    \"/files{?api%2Dversion,purpose}\",\n    {\n      \"api%2Dversion\": context.apiVersion,\n      purpose: options?.purpose,\n    },\n    {\n      allowReserved: options?.requestOptions?.skipUrlEncoding,\n    },\n  );\n  return context.path(path).get({\n    ...operationOptionsToRequestParameters(options),\n    headers: {\n      accept: \"application/json\",\n      ...options.requestOptions?.headers,\n    },\n  });\n}\n\nexport async function _listFilesDeserialize(\n  result: PathUncheckedResponse,\n): Promise<FileListResponse> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    throw createRestError(result);\n  }\n\n  return fileListResponseDeserializer(result.body);\n}\n\n/** Gets a list of previously uploaded files. */\nexport async function listFiles(\n  context: Client,\n  options: FilesListFilesOptionalParams = { requestOptions: {} },\n): Promise<FileListResponse> {\n  const result = await _listFilesSend(context, options);\n  return _listFilesDeserialize(result);\n}\nfunction getLroOperationStatus(result: FileInfo): OperationStatus {\n  switch (result.status) {\n    case \"running\":\n    case \"pending\":\n      return \"running\";\n    case \"uploaded\":\n    case \"processed\":\n      return \"succeeded\";\n    default:\n      return \"failed\";\n  }\n}\n"]}
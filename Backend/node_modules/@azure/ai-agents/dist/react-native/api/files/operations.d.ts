import { AgentsContext as Client } from "../index.js";
import { FileListResponse, FileInfo, FilePurpose, FileDeletionStatus } from "../../models/models.js";
import { FilesGetFileContentOptionalParams, FilesGetFileOptionalParams, FilesDeleteFileOptionalParams, FilesUploadFileOptionalParams, FilesListFilesOptionalParams } from "./options.js";
import { StreamableMethod, PathUncheckedResponse } from "@azure-rest/core-client";
import type { OperationState, PollerLike } from "@azure/core-lro";
export declare function _getFileContentSend(context: Client, fileId: string, options?: FilesGetFileContentOptionalParams): StreamableMethod<string | Uint8Array>;
/** Retrieves the raw content of a specific file. */
export declare function getFileContent(context: Client, fileId: string, options?: FilesGetFileContentOptionalParams): StreamableMethod<string | Uint8Array>;
export declare function _getFileSend(context: Client, fileId: string, options?: FilesGetFileOptionalParams): StreamableMethod;
export declare function _getFileDeserialize(result: PathUncheckedResponse): Promise<FileInfo>;
/** Returns information about a specific file. Does not retrieve file content. */
export declare function getFile(context: Client, fileId: string, options?: FilesGetFileOptionalParams): Promise<FileInfo>;
export declare function _deleteFileSend(context: Client, fileId: string, options?: FilesDeleteFileOptionalParams): StreamableMethod;
export declare function _deleteFileDeserialize(result: PathUncheckedResponse): Promise<FileDeletionStatus>;
/** Delete a previously uploaded file. */
export declare function deleteFile(context: Client, fileId: string, options?: FilesDeleteFileOptionalParams): Promise<FileDeletionStatus>;
export declare function _uploadFileSend(context: Client, body: {
    file: ReadableStream<Uint8Array> | NodeJS.ReadableStream;
    purpose: FilePurpose;
    filename?: string;
}, options?: FilesUploadFileOptionalParams): StreamableMethod;
export declare function _uploadFileDeserialize(result: PathUncheckedResponse): Promise<FileInfo>;
/** Uploads a file for use by other operations. */
export declare function uploadFileInternal(context: Client, body: {
    file: ReadableStream<Uint8Array> | NodeJS.ReadableStream;
    purpose: FilePurpose;
    filename?: string;
}, options?: FilesUploadFileOptionalParams): Promise<FileInfo>;
/** Uploads a file for use by other operations. */
export declare function uploadFile(context: Client, body: {
    file: ReadableStream<Uint8Array> | NodeJS.ReadableStream;
    purpose: FilePurpose;
    filename?: string;
}, options?: FilesUploadFileOptionalParams): PollerLike<OperationState<FileInfo>, FileInfo>;
/** Uploads a file for use by other operations with polling */
export declare function uploadFileAndPoll(context: Client, body: {
    file: ReadableStream<Uint8Array> | NodeJS.ReadableStream;
    purpose: FilePurpose;
    filename?: string;
}, options?: FilesUploadFileOptionalParams): PollerLike<OperationState<FileInfo>, FileInfo>;
export declare function _listFilesSend(context: Client, options?: FilesListFilesOptionalParams): StreamableMethod;
export declare function _listFilesDeserialize(result: PathUncheckedResponse): Promise<FileListResponse>;
/** Gets a list of previously uploaded files. */
export declare function listFiles(context: Client, options?: FilesListFilesOptionalParams): Promise<FileListResponse>;
//# sourceMappingURL=operations.d.ts.map
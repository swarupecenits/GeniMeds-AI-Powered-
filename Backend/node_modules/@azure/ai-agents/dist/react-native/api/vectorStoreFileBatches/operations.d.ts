import { AgentsContext as Client } from "../index.js";
import { _AgentsPagedResultVectorStoreFile, VectorStoreFileBatch } from "../../models/models.js";
import { VectorStoreFileBatchesListVectorStoreFileBatchFilesOptionalParams, VectorStoreFileBatchesCancelVectorStoreFileBatchOptionalParams, VectorStoreFileBatchesGetVectorStoreFileBatchOptionalParams, VectorStoreFileBatchesCreateVectorStoreFileBatchOptionalParams } from "./options.js";
import { PagedAsyncIterableIterator } from "../../static-helpers/pagingHelpers.js";
import { StreamableMethod, PathUncheckedResponse } from "@azure-rest/core-client";
import { OperationState, PollerLike } from "@azure/core-lro";
export declare function _listVectorStoreFileBatchFilesSend(context: Client, vectorStoreId: string, batchId: string, options?: VectorStoreFileBatchesListVectorStoreFileBatchFilesOptionalParams): StreamableMethod;
export declare function _listVectorStoreFileBatchFilesDeserialize(result: PathUncheckedResponse): Promise<_AgentsPagedResultVectorStoreFile>;
/** Returns a list of vector store files in a batch. */
export declare function listVectorStoreFileBatchFiles(context: Client, vectorStoreId: string, batchId: string, options?: VectorStoreFileBatchesListVectorStoreFileBatchFilesOptionalParams): PagedAsyncIterableIterator<VectorStoreFileBatch>;
export declare function _cancelVectorStoreFileBatchSend(context: Client, vectorStoreId: string, batchId: string, options?: VectorStoreFileBatchesCancelVectorStoreFileBatchOptionalParams): StreamableMethod;
export declare function _cancelVectorStoreFileBatchDeserialize(result: PathUncheckedResponse): Promise<VectorStoreFileBatch>;
/** Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible. */
export declare function cancelVectorStoreFileBatch(context: Client, vectorStoreId: string, batchId: string, options?: VectorStoreFileBatchesCancelVectorStoreFileBatchOptionalParams): Promise<VectorStoreFileBatch>;
export declare function _getVectorStoreFileBatchSend(context: Client, vectorStoreId: string, batchId: string, options?: VectorStoreFileBatchesGetVectorStoreFileBatchOptionalParams): StreamableMethod;
export declare function _getVectorStoreFileBatchDeserialize(result: PathUncheckedResponse): Promise<VectorStoreFileBatch>;
/** Retrieve a vector store file batch. */
export declare function getVectorStoreFileBatch(context: Client, vectorStoreId: string, batchId: string, options?: VectorStoreFileBatchesGetVectorStoreFileBatchOptionalParams): Promise<VectorStoreFileBatch>;
export declare function _createVectorStoreFileBatchSend(context: Client, vectorStoreId: string, options?: VectorStoreFileBatchesCreateVectorStoreFileBatchOptionalParams): StreamableMethod;
export declare function _createVectorStoreFileBatchDeserialize(result: PathUncheckedResponse): Promise<VectorStoreFileBatch>;
/** Create a vector store file batch. */
export declare function createVectorStoreFileBatchInternal(context: Client, vectorStoreId: string, options?: VectorStoreFileBatchesCreateVectorStoreFileBatchOptionalParams): Promise<VectorStoreFileBatch>;
/** Create a vector store file batch. */
export declare function createVectorStoreFileBatch(context: Client, vectorStoreId: string, options?: VectorStoreFileBatchesCreateVectorStoreFileBatchOptionalParams): PollerLike<OperationState<VectorStoreFileBatch>, VectorStoreFileBatch>;
/** Create a vector store file batch and poll. */
export declare function createVectorStoreFileBatchAndPoll(context: Client, vectorStoreId: string, options?: VectorStoreFileBatchesCreateVectorStoreFileBatchOptionalParams): PollerLike<OperationState<VectorStoreFileBatch>, VectorStoreFileBatch>;
//# sourceMappingURL=operations.d.ts.map
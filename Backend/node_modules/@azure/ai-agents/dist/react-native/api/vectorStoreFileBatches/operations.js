// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { vectorStoreDataSourceArraySerializer, vectorStoreChunkingStrategyRequestUnionSerializer, _agentsPagedResultVectorStoreFileDeserializer, vectorStoreFileBatchDeserializer, } from "../../models/models.js";
import { buildPagedAsyncIterator, } from "../../static-helpers/pagingHelpers.js";
import { expandUrlTemplate } from "../../static-helpers/urlTemplate.js";
import { createRestError, operationOptionsToRequestParameters, } from "@azure-rest/core-client";
import { createPoller } from "../poller.js";
export function _listVectorStoreFileBatchFilesSend(context, vectorStoreId, batchId, options = {
    requestOptions: {},
}) {
    var _a;
    return context
        .path("/vector_stores/{vectorStoreId}/file_batches/{batchId}/files", vectorStoreId, batchId)
        .get(Object.assign(Object.assign({}, operationOptionsToRequestParameters(options)), { headers: Object.assign({ accept: "application/json" }, (_a = options.requestOptions) === null || _a === void 0 ? void 0 : _a.headers) }));
}
export async function _listVectorStoreFileBatchFilesDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        throw createRestError(result);
    }
    return _agentsPagedResultVectorStoreFileDeserializer(result.body);
}
/** Returns a list of vector store files in a batch. */
export function listVectorStoreFileBatchFiles(context, vectorStoreId, batchId, options = {
    requestOptions: {},
}) {
    return buildPagedAsyncIterator(context, () => _listVectorStoreFileBatchFilesSend(context, vectorStoreId, batchId, options), _listVectorStoreFileBatchFilesDeserialize, ["200"], { itemName: "data" });
}
export function _cancelVectorStoreFileBatchSend(context, vectorStoreId, batchId, options = {
    requestOptions: {},
}) {
    var _a, _b;
    const path = expandUrlTemplate("/vector_stores/{vectorStoreId}/file_batches/{batchId}/cancel{?api%2Dversion}", {
        vectorStoreId: vectorStoreId,
        batchId: batchId,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: (_a = options === null || options === void 0 ? void 0 : options.requestOptions) === null || _a === void 0 ? void 0 : _a.skipUrlEncoding,
    });
    return context.path(path).post(Object.assign(Object.assign({}, operationOptionsToRequestParameters(options)), { headers: Object.assign({ accept: "application/json" }, (_b = options.requestOptions) === null || _b === void 0 ? void 0 : _b.headers) }));
}
export async function _cancelVectorStoreFileBatchDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        throw createRestError(result);
    }
    return vectorStoreFileBatchDeserializer(result.body);
}
/** Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible. */
export async function cancelVectorStoreFileBatch(context, vectorStoreId, batchId, options = {
    requestOptions: {},
}) {
    const result = await _cancelVectorStoreFileBatchSend(context, vectorStoreId, batchId, options);
    return _cancelVectorStoreFileBatchDeserialize(result);
}
export function _getVectorStoreFileBatchSend(context, vectorStoreId, batchId, options = {
    requestOptions: {},
}) {
    var _a, _b;
    const path = expandUrlTemplate("/vector_stores/{vectorStoreId}/file_batches/{batchId}{?api%2Dversion}", {
        vectorStoreId: vectorStoreId,
        batchId: batchId,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: (_a = options === null || options === void 0 ? void 0 : options.requestOptions) === null || _a === void 0 ? void 0 : _a.skipUrlEncoding,
    });
    return context.path(path).get(Object.assign(Object.assign({}, operationOptionsToRequestParameters(options)), { headers: Object.assign({ accept: "application/json" }, (_b = options.requestOptions) === null || _b === void 0 ? void 0 : _b.headers) }));
}
export async function _getVectorStoreFileBatchDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        throw createRestError(result);
    }
    return vectorStoreFileBatchDeserializer(result.body);
}
/** Retrieve a vector store file batch. */
export async function getVectorStoreFileBatch(context, vectorStoreId, batchId, options = {
    requestOptions: {},
}) {
    const result = await _getVectorStoreFileBatchSend(context, vectorStoreId, batchId, options);
    return _getVectorStoreFileBatchDeserialize(result);
}
export function _createVectorStoreFileBatchSend(context, vectorStoreId, options = {
    requestOptions: {},
}) {
    var _a, _b;
    const path = expandUrlTemplate("/vector_stores/{vectorStoreId}/file_batches{?api%2Dversion}", {
        vectorStoreId: vectorStoreId,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: (_a = options === null || options === void 0 ? void 0 : options.requestOptions) === null || _a === void 0 ? void 0 : _a.skipUrlEncoding,
    });
    return context.path(path).post(Object.assign(Object.assign({}, operationOptionsToRequestParameters(options)), { contentType: "application/json", headers: Object.assign({ accept: "application/json" }, (_b = options.requestOptions) === null || _b === void 0 ? void 0 : _b.headers), body: {
            file_ids: !(options === null || options === void 0 ? void 0 : options.fileIds)
                ? options === null || options === void 0 ? void 0 : options.fileIds
                : options === null || options === void 0 ? void 0 : options.fileIds.map((p) => {
                    return p;
                }),
            data_sources: !(options === null || options === void 0 ? void 0 : options.dataSources)
                ? options === null || options === void 0 ? void 0 : options.dataSources
                : vectorStoreDataSourceArraySerializer(options === null || options === void 0 ? void 0 : options.dataSources),
            chunking_strategy: !(options === null || options === void 0 ? void 0 : options.chunkingStrategy)
                ? options === null || options === void 0 ? void 0 : options.chunkingStrategy
                : vectorStoreChunkingStrategyRequestUnionSerializer(options === null || options === void 0 ? void 0 : options.chunkingStrategy),
        } }));
}
export async function _createVectorStoreFileBatchDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        throw createRestError(result);
    }
    return vectorStoreFileBatchDeserializer(result.body);
}
/** Create a vector store file batch. */
export async function createVectorStoreFileBatchInternal(context, vectorStoreId, options = {
    requestOptions: {},
}) {
    const result = await _createVectorStoreFileBatchSend(context, vectorStoreId, options);
    return _createVectorStoreFileBatchDeserialize(result);
}
/** Create a vector store file batch. */
export function createVectorStoreFileBatch(context, vectorStoreId, options = { requestOptions: {} }) {
    var _a;
    return createPoller({
        initOperation: async () => {
            return createVectorStoreFileBatchInternal(context, vectorStoreId, options);
        },
        pollOperation: async (currentResult) => {
            return getVectorStoreFileBatch(context, vectorStoreId, currentResult.id, options);
        },
        getOperationStatus: getLroOperationStatus,
        intervalInMs: (_a = options.pollingOptions) === null || _a === void 0 ? void 0 : _a.intervalInMs,
    });
}
/** Create a vector store file batch and poll. */
export function createVectorStoreFileBatchAndPoll(context, vectorStoreId, options = { requestOptions: {} }) {
    var _a;
    return createPoller({
        initOperation: async () => {
            return createVectorStoreFileBatchInternal(context, vectorStoreId, options);
        },
        pollOperation: async (currentResult) => {
            return getVectorStoreFileBatch(context, vectorStoreId, currentResult.id, options);
        },
        getOperationStatus: getLroOperationStatus,
        intervalInMs: (_a = options.pollingOptions) === null || _a === void 0 ? void 0 : _a.intervalInMs,
    });
}
function getLroOperationStatus(result) {
    switch (result.status) {
        case "in_progress":
            return "running";
        case "completed":
            return "succeeded";
        case "cancelled":
            return "canceled";
        default:
            return "failed";
    }
}
//# sourceMappingURL=operations.js.map
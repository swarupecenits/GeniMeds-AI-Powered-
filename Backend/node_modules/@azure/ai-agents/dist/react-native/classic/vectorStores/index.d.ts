import type { AgentsContext } from "../../api/agentsContext.js";
import type { VectorStore, VectorStoreDeletionStatus } from "../../models/models.js";
import type { VectorStoresDeleteVectorStoreOptionalParams, VectorStoresModifyVectorStoreOptionalParams, VectorStoresGetVectorStoreOptionalParams, VectorStoresCreateVectorStoreOptionalParams, VectorStoresListVectorStoresOptionalParams } from "../../api/vectorStores/options.js";
import type { PollerLike, OperationState } from "@azure/core-lro";
import type { PagedAsyncIterableIterator } from "../../static-helpers/pagingHelpers.js";
/** Interface representing a VectorStores operations. */
export interface VectorStoresOperations {
    /** Deletes the vector store object matching the specified ID. */
    delete: (vectorStoreId: string, options?: VectorStoresDeleteVectorStoreOptionalParams) => Promise<VectorStoreDeletionStatus>;
    /** Modifies an existing vector store. */
    update: (vectorStoreId: string, options?: VectorStoresModifyVectorStoreOptionalParams) => Promise<VectorStore>;
    /** Returns the vector store object matching the specified ID. */
    get: (vectorStoreId: string, options?: VectorStoresGetVectorStoreOptionalParams) => Promise<VectorStore>;
    /** Creates a vector store. */
    create: (options?: VectorStoresCreateVectorStoreOptionalParams) => Promise<VectorStore>;
    /** Creates a vector store and poll. */
    createAndPoll(options?: VectorStoresCreateVectorStoreOptionalParams): PollerLike<OperationState<VectorStore>, VectorStore>;
    /** Returns a list of vector stores. */
    list: (options?: VectorStoresListVectorStoresOptionalParams) => PagedAsyncIterableIterator<VectorStore>;
}
export declare function _getVectorStoresOperations(context: AgentsContext): VectorStoresOperations;
//# sourceMappingURL=index.d.ts.map
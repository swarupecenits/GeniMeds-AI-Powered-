"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", { value: true });
exports._listVectorStoreFileBatchFilesSend = _listVectorStoreFileBatchFilesSend;
exports._listVectorStoreFileBatchFilesDeserialize = _listVectorStoreFileBatchFilesDeserialize;
exports.listVectorStoreFileBatchFiles = listVectorStoreFileBatchFiles;
exports._cancelVectorStoreFileBatchSend = _cancelVectorStoreFileBatchSend;
exports._cancelVectorStoreFileBatchDeserialize = _cancelVectorStoreFileBatchDeserialize;
exports.cancelVectorStoreFileBatch = cancelVectorStoreFileBatch;
exports._getVectorStoreFileBatchSend = _getVectorStoreFileBatchSend;
exports._getVectorStoreFileBatchDeserialize = _getVectorStoreFileBatchDeserialize;
exports.getVectorStoreFileBatch = getVectorStoreFileBatch;
exports._createVectorStoreFileBatchSend = _createVectorStoreFileBatchSend;
exports._createVectorStoreFileBatchDeserialize = _createVectorStoreFileBatchDeserialize;
exports.createVectorStoreFileBatchInternal = createVectorStoreFileBatchInternal;
exports.createVectorStoreFileBatch = createVectorStoreFileBatch;
exports.createVectorStoreFileBatchAndPoll = createVectorStoreFileBatchAndPoll;
const models_js_1 = require("../../models/models.js");
const pagingHelpers_js_1 = require("../../static-helpers/pagingHelpers.js");
const urlTemplate_js_1 = require("../../static-helpers/urlTemplate.js");
const core_client_1 = require("@azure-rest/core-client");
const poller_js_1 = require("../poller.js");
function _listVectorStoreFileBatchFilesSend(context, vectorStoreId, batchId, options = {
    requestOptions: {},
}) {
    var _a;
    return context
        .path("/vector_stores/{vectorStoreId}/file_batches/{batchId}/files", vectorStoreId, batchId)
        .get(Object.assign(Object.assign({}, (0, core_client_1.operationOptionsToRequestParameters)(options)), { headers: Object.assign({ accept: "application/json" }, (_a = options.requestOptions) === null || _a === void 0 ? void 0 : _a.headers) }));
}
async function _listVectorStoreFileBatchFilesDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        throw (0, core_client_1.createRestError)(result);
    }
    return (0, models_js_1._agentsPagedResultVectorStoreFileDeserializer)(result.body);
}
/** Returns a list of vector store files in a batch. */
function listVectorStoreFileBatchFiles(context, vectorStoreId, batchId, options = {
    requestOptions: {},
}) {
    return (0, pagingHelpers_js_1.buildPagedAsyncIterator)(context, () => _listVectorStoreFileBatchFilesSend(context, vectorStoreId, batchId, options), _listVectorStoreFileBatchFilesDeserialize, ["200"], { itemName: "data" });
}
function _cancelVectorStoreFileBatchSend(context, vectorStoreId, batchId, options = {
    requestOptions: {},
}) {
    var _a, _b;
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/vector_stores/{vectorStoreId}/file_batches/{batchId}/cancel{?api%2Dversion}", {
        vectorStoreId: vectorStoreId,
        batchId: batchId,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: (_a = options === null || options === void 0 ? void 0 : options.requestOptions) === null || _a === void 0 ? void 0 : _a.skipUrlEncoding,
    });
    return context.path(path).post(Object.assign(Object.assign({}, (0, core_client_1.operationOptionsToRequestParameters)(options)), { headers: Object.assign({ accept: "application/json" }, (_b = options.requestOptions) === null || _b === void 0 ? void 0 : _b.headers) }));
}
async function _cancelVectorStoreFileBatchDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        throw (0, core_client_1.createRestError)(result);
    }
    return (0, models_js_1.vectorStoreFileBatchDeserializer)(result.body);
}
/** Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible. */
async function cancelVectorStoreFileBatch(context, vectorStoreId, batchId, options = {
    requestOptions: {},
}) {
    const result = await _cancelVectorStoreFileBatchSend(context, vectorStoreId, batchId, options);
    return _cancelVectorStoreFileBatchDeserialize(result);
}
function _getVectorStoreFileBatchSend(context, vectorStoreId, batchId, options = {
    requestOptions: {},
}) {
    var _a, _b;
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/vector_stores/{vectorStoreId}/file_batches/{batchId}{?api%2Dversion}", {
        vectorStoreId: vectorStoreId,
        batchId: batchId,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: (_a = options === null || options === void 0 ? void 0 : options.requestOptions) === null || _a === void 0 ? void 0 : _a.skipUrlEncoding,
    });
    return context.path(path).get(Object.assign(Object.assign({}, (0, core_client_1.operationOptionsToRequestParameters)(options)), { headers: Object.assign({ accept: "application/json" }, (_b = options.requestOptions) === null || _b === void 0 ? void 0 : _b.headers) }));
}
async function _getVectorStoreFileBatchDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        throw (0, core_client_1.createRestError)(result);
    }
    return (0, models_js_1.vectorStoreFileBatchDeserializer)(result.body);
}
/** Retrieve a vector store file batch. */
async function getVectorStoreFileBatch(context, vectorStoreId, batchId, options = {
    requestOptions: {},
}) {
    const result = await _getVectorStoreFileBatchSend(context, vectorStoreId, batchId, options);
    return _getVectorStoreFileBatchDeserialize(result);
}
function _createVectorStoreFileBatchSend(context, vectorStoreId, options = {
    requestOptions: {},
}) {
    var _a, _b;
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/vector_stores/{vectorStoreId}/file_batches{?api%2Dversion}", {
        vectorStoreId: vectorStoreId,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: (_a = options === null || options === void 0 ? void 0 : options.requestOptions) === null || _a === void 0 ? void 0 : _a.skipUrlEncoding,
    });
    return context.path(path).post(Object.assign(Object.assign({}, (0, core_client_1.operationOptionsToRequestParameters)(options)), { contentType: "application/json", headers: Object.assign({ accept: "application/json" }, (_b = options.requestOptions) === null || _b === void 0 ? void 0 : _b.headers), body: {
            file_ids: !(options === null || options === void 0 ? void 0 : options.fileIds)
                ? options === null || options === void 0 ? void 0 : options.fileIds
                : options === null || options === void 0 ? void 0 : options.fileIds.map((p) => {
                    return p;
                }),
            data_sources: !(options === null || options === void 0 ? void 0 : options.dataSources)
                ? options === null || options === void 0 ? void 0 : options.dataSources
                : (0, models_js_1.vectorStoreDataSourceArraySerializer)(options === null || options === void 0 ? void 0 : options.dataSources),
            chunking_strategy: !(options === null || options === void 0 ? void 0 : options.chunkingStrategy)
                ? options === null || options === void 0 ? void 0 : options.chunkingStrategy
                : (0, models_js_1.vectorStoreChunkingStrategyRequestUnionSerializer)(options === null || options === void 0 ? void 0 : options.chunkingStrategy),
        } }));
}
async function _createVectorStoreFileBatchDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        throw (0, core_client_1.createRestError)(result);
    }
    return (0, models_js_1.vectorStoreFileBatchDeserializer)(result.body);
}
/** Create a vector store file batch. */
async function createVectorStoreFileBatchInternal(context, vectorStoreId, options = {
    requestOptions: {},
}) {
    const result = await _createVectorStoreFileBatchSend(context, vectorStoreId, options);
    return _createVectorStoreFileBatchDeserialize(result);
}
/** Create a vector store file batch. */
function createVectorStoreFileBatch(context, vectorStoreId, options = { requestOptions: {} }) {
    var _a;
    return (0, poller_js_1.createPoller)({
        initOperation: async () => {
            return createVectorStoreFileBatchInternal(context, vectorStoreId, options);
        },
        pollOperation: async (currentResult) => {
            return getVectorStoreFileBatch(context, vectorStoreId, currentResult.id, options);
        },
        getOperationStatus: getLroOperationStatus,
        intervalInMs: (_a = options.pollingOptions) === null || _a === void 0 ? void 0 : _a.intervalInMs,
    });
}
/** Create a vector store file batch and poll. */
function createVectorStoreFileBatchAndPoll(context, vectorStoreId, options = { requestOptions: {} }) {
    var _a;
    return (0, poller_js_1.createPoller)({
        initOperation: async () => {
            return createVectorStoreFileBatchInternal(context, vectorStoreId, options);
        },
        pollOperation: async (currentResult) => {
            return getVectorStoreFileBatch(context, vectorStoreId, currentResult.id, options);
        },
        getOperationStatus: getLroOperationStatus,
        intervalInMs: (_a = options.pollingOptions) === null || _a === void 0 ? void 0 : _a.intervalInMs,
    });
}
function getLroOperationStatus(result) {
    switch (result.status) {
        case "in_progress":
            return "running";
        case "completed":
            return "succeeded";
        case "cancelled":
            return "canceled";
        default:
            return "failed";
    }
}
//# sourceMappingURL=operations.js.map
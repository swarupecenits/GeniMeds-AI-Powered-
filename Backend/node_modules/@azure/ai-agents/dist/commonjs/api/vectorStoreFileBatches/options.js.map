{"version":3,"file":"options.js","sourceRoot":"","sources":["../../../../src/api/vectorStoreFileBatches/options.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport {\n  VectorStoreDataSource,\n  VectorStoreChunkingStrategyRequestUnion,\n  ListSortOrder,\n  VectorStoreFileStatusFilter,\n} from \"../../models/models.js\";\nimport { OperationOptions } from \"@azure-rest/core-client\";\nimport { PollingOptionsParams } from \"../options.js\";\n\n/** Optional parameters. */\nexport interface VectorStoreFileBatchesListVectorStoreFileBatchFilesOptionalParams\n  extends OperationOptions {\n  /** Filter by file status. */\n  filter?: VectorStoreFileStatusFilter;\n  /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. */\n  limit?: number;\n  /** Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order. */\n  order?: ListSortOrder;\n  /** A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. */\n  after?: string;\n  /** A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. */\n  before?: string;\n}\n\n/** Optional parameters. */\nexport interface VectorStoreFileBatchesCancelVectorStoreFileBatchOptionalParams\n  extends OperationOptions {}\n\n/** Optional parameters. */\nexport interface VectorStoreFileBatchesGetVectorStoreFileBatchOptionalParams\n  extends OperationOptions {}\n\n/** Optional parameters. */\nexport interface VectorStoreFileBatchesCreateVectorStoreFileBatchOptionalParams\n  extends OperationOptions,\n    PollingOptionsParams {\n  /** List of file identifiers. */\n  fileIds?: string[];\n  /** List of Azure assets. */\n  dataSources?: VectorStoreDataSource[];\n  /** The chunking strategy used to chunk the file(s). If not set, will use the auto strategy. */\n  chunkingStrategy?: VectorStoreChunkingStrategyRequestUnion;\n}\n"]}
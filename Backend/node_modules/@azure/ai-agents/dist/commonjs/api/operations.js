"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", { value: true });
exports._createThreadAndRunSend = _createThreadAndRunSend;
exports._createThreadAndRunDeserialize = _createThreadAndRunDeserialize;
exports.createThreadAndRun = createThreadAndRun;
exports._deleteAgentSend = _deleteAgentSend;
exports._deleteAgentDeserialize = _deleteAgentDeserialize;
exports.deleteAgent = deleteAgent;
exports._updateAgentSend = _updateAgentSend;
exports._updateAgentDeserialize = _updateAgentDeserialize;
exports.updateAgent = updateAgent;
exports._getAgentSend = _getAgentSend;
exports._getAgentDeserialize = _getAgentDeserialize;
exports.getAgent = getAgent;
exports._listAgentsSend = _listAgentsSend;
exports._listAgentsDeserialize = _listAgentsDeserialize;
exports.listAgents = listAgents;
exports._createAgentSend = _createAgentSend;
exports._createAgentDeserialize = _createAgentDeserialize;
exports.createAgent = createAgent;
exports.createRunStreaming = createRunStreaming;
exports.createThreadAndRunStreaming = createThreadAndRunStreaming;
exports.submitToolOutputsToRunStreaming = submitToolOutputsToRunStreaming;
const tslib_1 = require("tslib");
const models_js_1 = require("../models/models.js");
const pagingHelpers_js_1 = require("../static-helpers/pagingHelpers.js");
const urlTemplate_js_1 = require("../static-helpers/urlTemplate.js");
const core_client_1 = require("@azure-rest/core-client");
const streamingModels_js_1 = require("../models/streamingModels.js");
const core_sse_1 = require("@azure/core-sse");
const core_util_1 = require("@azure/core-util");
const logger_js_1 = require("../logger.js");
const operations_js_1 = require("./runs/operations.js");
function _createThreadAndRunSend(context, assistantId, options = { requestOptions: {} }) {
    var _a, _b;
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/threads/runs{?api%2Dversion}", {
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: (_a = options === null || options === void 0 ? void 0 : options.requestOptions) === null || _a === void 0 ? void 0 : _a.skipUrlEncoding,
    });
    return context.path(path).post(Object.assign(Object.assign({}, (0, core_client_1.operationOptionsToRequestParameters)(options)), { contentType: "application/json", headers: Object.assign({ accept: "application/json" }, (_b = options.requestOptions) === null || _b === void 0 ? void 0 : _b.headers), body: {
            assistant_id: assistantId,
            thread: !(options === null || options === void 0 ? void 0 : options.thread)
                ? options === null || options === void 0 ? void 0 : options.thread
                : (0, models_js_1.agentThreadCreationOptionsSerializer)(options === null || options === void 0 ? void 0 : options.thread),
            model: options === null || options === void 0 ? void 0 : options.model,
            instructions: options === null || options === void 0 ? void 0 : options.instructions,
            tools: !(options === null || options === void 0 ? void 0 : options.tools) ? options === null || options === void 0 ? void 0 : options.tools : (0, models_js_1.toolDefinitionUnionArraySerializer)(options === null || options === void 0 ? void 0 : options.tools),
            tool_resources: !(options === null || options === void 0 ? void 0 : options.toolResources)
                ? options === null || options === void 0 ? void 0 : options.toolResources
                : (0, models_js_1.updateToolResourcesOptionsSerializer)(options === null || options === void 0 ? void 0 : options.toolResources),
            stream: options === null || options === void 0 ? void 0 : options.stream,
            temperature: options === null || options === void 0 ? void 0 : options.temperature,
            top_p: options === null || options === void 0 ? void 0 : options.topP,
            max_prompt_tokens: options === null || options === void 0 ? void 0 : options.maxPromptTokens,
            max_completion_tokens: options === null || options === void 0 ? void 0 : options.maxCompletionTokens,
            truncation_strategy: !(options === null || options === void 0 ? void 0 : options.truncationStrategy)
                ? options === null || options === void 0 ? void 0 : options.truncationStrategy
                : (0, models_js_1.truncationObjectSerializer)(options === null || options === void 0 ? void 0 : options.truncationStrategy),
            tool_choice: !(options === null || options === void 0 ? void 0 : options.toolChoice)
                ? options === null || options === void 0 ? void 0 : options.toolChoice
                : (0, models_js_1.agentsToolChoiceOptionSerializer)(options === null || options === void 0 ? void 0 : options.toolChoice),
            response_format: !(options === null || options === void 0 ? void 0 : options.responseFormat)
                ? options === null || options === void 0 ? void 0 : options.responseFormat
                : (0, models_js_1.agentsResponseFormatOptionSerializer)(options === null || options === void 0 ? void 0 : options.responseFormat),
            parallel_tool_calls: options === null || options === void 0 ? void 0 : options.parallelToolCalls,
            metadata: options === null || options === void 0 ? void 0 : options.metadata,
        } }));
}
async function _createThreadAndRunDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        throw (0, core_client_1.createRestError)(result);
    }
    return (0, models_js_1.threadRunDeserializer)(result.body);
}
/** Creates a new agent thread and immediately starts a run using that new thread. */
function createThreadAndRun(context, assistantId, options = { requestOptions: {} }) {
    async function executeCreateThreadAndRun() {
        const result = await _createThreadAndRunSend(context, assistantId, options);
        return _createThreadAndRunDeserialize(result);
    }
    return {
        then: function (onFulfilled, onRejected) {
            return executeCreateThreadAndRun().then(onFulfilled, onRejected).catch(onRejected);
        },
        async stream() {
            return createThreadAndRunStreaming(context, assistantId, options);
        },
    };
}
function _deleteAgentSend(context, assistantId, options = { requestOptions: {} }) {
    var _a, _b;
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/assistants/{assistantId}{?api%2Dversion}", {
        assistantId: assistantId,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: (_a = options === null || options === void 0 ? void 0 : options.requestOptions) === null || _a === void 0 ? void 0 : _a.skipUrlEncoding,
    });
    return context.path(path).delete(Object.assign(Object.assign({}, (0, core_client_1.operationOptionsToRequestParameters)(options)), { headers: Object.assign({ accept: "application/json" }, (_b = options.requestOptions) === null || _b === void 0 ? void 0 : _b.headers) }));
}
async function _deleteAgentDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        throw (0, core_client_1.createRestError)(result);
    }
    return (0, models_js_1.agentDeletionStatusDeserializer)(result.body);
}
/** Deletes an agent. */
async function deleteAgent(context, assistantId, options = { requestOptions: {} }) {
    const result = await _deleteAgentSend(context, assistantId, options);
    return _deleteAgentDeserialize(result);
}
function _updateAgentSend(context, assistantId, options = { requestOptions: {} }) {
    var _a, _b;
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/assistants/{assistantId}{?api%2Dversion}", {
        assistantId: assistantId,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: (_a = options === null || options === void 0 ? void 0 : options.requestOptions) === null || _a === void 0 ? void 0 : _a.skipUrlEncoding,
    });
    return context.path(path).post(Object.assign(Object.assign({}, (0, core_client_1.operationOptionsToRequestParameters)(options)), { contentType: "application/json", headers: Object.assign({ accept: "application/json" }, (_b = options.requestOptions) === null || _b === void 0 ? void 0 : _b.headers), body: {
            model: options === null || options === void 0 ? void 0 : options.model,
            name: options === null || options === void 0 ? void 0 : options.name,
            description: options === null || options === void 0 ? void 0 : options.description,
            instructions: options === null || options === void 0 ? void 0 : options.instructions,
            tools: !(options === null || options === void 0 ? void 0 : options.tools) ? options === null || options === void 0 ? void 0 : options.tools : (0, models_js_1.toolDefinitionUnionArraySerializer)(options === null || options === void 0 ? void 0 : options.tools),
            tool_resources: !(options === null || options === void 0 ? void 0 : options.toolResources)
                ? options === null || options === void 0 ? void 0 : options.toolResources
                : (0, models_js_1.toolResourcesSerializer)(options === null || options === void 0 ? void 0 : options.toolResources),
            temperature: options === null || options === void 0 ? void 0 : options.temperature,
            top_p: options === null || options === void 0 ? void 0 : options.topP,
            response_format: !(options === null || options === void 0 ? void 0 : options.responseFormat)
                ? options === null || options === void 0 ? void 0 : options.responseFormat
                : (0, models_js_1.agentsResponseFormatOptionSerializer)(options === null || options === void 0 ? void 0 : options.responseFormat),
            metadata: options === null || options === void 0 ? void 0 : options.metadata,
        } }));
}
async function _updateAgentDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        throw (0, core_client_1.createRestError)(result);
    }
    return (0, models_js_1.agentDeserializer)(result.body);
}
/** Modifies an existing agent. */
async function updateAgent(context, assistantId, options = { requestOptions: {} }) {
    const result = await _updateAgentSend(context, assistantId, options);
    return _updateAgentDeserialize(result);
}
function _getAgentSend(context, assistantId, options = { requestOptions: {} }) {
    var _a, _b;
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/assistants/{assistantId}{?api%2Dversion}", {
        assistantId: assistantId,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: (_a = options === null || options === void 0 ? void 0 : options.requestOptions) === null || _a === void 0 ? void 0 : _a.skipUrlEncoding,
    });
    return context.path(path).get(Object.assign(Object.assign({}, (0, core_client_1.operationOptionsToRequestParameters)(options)), { headers: Object.assign({ accept: "application/json" }, (_b = options.requestOptions) === null || _b === void 0 ? void 0 : _b.headers) }));
}
async function _getAgentDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        throw (0, core_client_1.createRestError)(result);
    }
    return (0, models_js_1.agentDeserializer)(result.body);
}
/** Retrieves an existing agent. */
async function getAgent(context, assistantId, options = { requestOptions: {} }) {
    const result = await _getAgentSend(context, assistantId, options);
    return _getAgentDeserialize(result);
}
function _listAgentsSend(context, options = { requestOptions: {} }) {
    var _a, _b;
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/assistants{?api%2Dversion,limit,order,after,before}", {
        "api%2Dversion": context.apiVersion,
        limit: options === null || options === void 0 ? void 0 : options.limit,
        order: options === null || options === void 0 ? void 0 : options.order,
        after: options === null || options === void 0 ? void 0 : options.after,
        before: options === null || options === void 0 ? void 0 : options.before,
    }, {
        allowReserved: (_a = options === null || options === void 0 ? void 0 : options.requestOptions) === null || _a === void 0 ? void 0 : _a.skipUrlEncoding,
    });
    return context.path(path).get(Object.assign(Object.assign({}, (0, core_client_1.operationOptionsToRequestParameters)(options)), { headers: Object.assign({ accept: "application/json" }, (_b = options.requestOptions) === null || _b === void 0 ? void 0 : _b.headers) }));
}
async function _listAgentsDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        throw (0, core_client_1.createRestError)(result);
    }
    return (0, models_js_1._agentsPagedResultAgentDeserializer)(result.body);
}
/** Gets a list of agents that were previously created. */
function listAgents(context, options = { requestOptions: {} }) {
    return (0, pagingHelpers_js_1.buildPagedAsyncIterator)(context, () => _listAgentsSend(context, options), _listAgentsDeserialize, ["200"], { itemName: "data" });
}
function _createAgentSend(context, model, options = { requestOptions: {} }) {
    var _a, _b;
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/assistants{?api%2Dversion}", {
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: (_a = options === null || options === void 0 ? void 0 : options.requestOptions) === null || _a === void 0 ? void 0 : _a.skipUrlEncoding,
    });
    return context.path(path).post(Object.assign(Object.assign({}, (0, core_client_1.operationOptionsToRequestParameters)(options)), { contentType: "application/json", headers: Object.assign({ accept: "application/json" }, (_b = options.requestOptions) === null || _b === void 0 ? void 0 : _b.headers), body: {
            model: model,
            name: options === null || options === void 0 ? void 0 : options.name,
            description: options === null || options === void 0 ? void 0 : options.description,
            instructions: options === null || options === void 0 ? void 0 : options.instructions,
            tools: !(options === null || options === void 0 ? void 0 : options.tools) ? options === null || options === void 0 ? void 0 : options.tools : (0, models_js_1.toolDefinitionUnionArraySerializer)(options === null || options === void 0 ? void 0 : options.tools),
            tool_resources: !(options === null || options === void 0 ? void 0 : options.toolResources)
                ? options === null || options === void 0 ? void 0 : options.toolResources
                : (0, models_js_1.toolResourcesSerializer)(options === null || options === void 0 ? void 0 : options.toolResources),
            temperature: options === null || options === void 0 ? void 0 : options.temperature,
            top_p: options === null || options === void 0 ? void 0 : options.topP,
            response_format: !(options === null || options === void 0 ? void 0 : options.responseFormat)
                ? options === null || options === void 0 ? void 0 : options.responseFormat
                : (0, models_js_1.agentsResponseFormatOptionSerializer)(options === null || options === void 0 ? void 0 : options.responseFormat),
            metadata: options === null || options === void 0 ? void 0 : options.metadata,
        } }));
}
async function _createAgentDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        throw (0, core_client_1.createRestError)(result);
    }
    return (0, models_js_1.agentDeserializer)(result.body);
}
/** Creates a new agent. */
async function createAgent(context, model, options = { requestOptions: {} }) {
    const result = await _createAgentSend(context, model, options);
    return _createAgentDeserialize(result);
}
const handlers = [
    { events: Object.values(streamingModels_js_1.ThreadStreamEvent) },
    { events: Object.values(streamingModels_js_1.RunStreamEvent) },
    { events: Object.values(streamingModels_js_1.RunStepStreamEvent) },
    { events: Object.values(streamingModels_js_1.MessageStreamEvent) },
];
function createAgentStream(stream) {
    const asyncIterator = toAsyncIterable(stream);
    const asyncDisposable = stream;
    return Object.assign(asyncIterator, asyncDisposable);
}
function toAsyncIterable(stream) {
    return tslib_1.__asyncGenerator(this, arguments, function* toAsyncIterable_1() {
        var _a, e_1, _b, _c;
        try {
            for (var _d = true, stream_1 = tslib_1.__asyncValues(stream), stream_1_1; stream_1_1 = yield tslib_1.__await(stream_1.next()), _a = stream_1_1.done, !_a; _d = true) {
                _c = stream_1_1.value;
                _d = false;
                const event = _c;
                const data = deserializeEventData(event);
                yield yield tslib_1.__await({ data: data, event: event.event });
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (!_d && !_a && (_b = stream_1.return)) yield tslib_1.__await(_b.call(stream_1));
            }
            finally { if (e_1) throw e_1.error; }
        }
    });
}
function deserializeEventData(event) {
    try {
        const jsonData = JSON.parse(event.data);
        switch (event.event) {
            case streamingModels_js_1.MessageStreamEvent.ThreadMessageDelta:
                return jsonData;
            case streamingModels_js_1.RunStepStreamEvent.ThreadRunStepDelta:
                return jsonData;
            default: {
                for (const { events } of handlers) {
                    if (events.includes(event.event)) {
                        return jsonData;
                    }
                }
                return jsonData;
            }
        }
    }
    catch (ex) {
        logger_js_1.logger.error(`Failed to parse event data  ${event.event} - error: ${ex}`);
        return event.data;
    }
}
async function processStream(streamResponse) {
    const expectedStatuses = ["200"];
    const result = core_util_1.isNodeLike
        ? await streamResponse.asNodeStream()
        : await streamResponse.asBrowserStream();
    if (!expectedStatuses.includes(result.status)) {
        throw (0, core_client_1.createRestError)(result);
    }
    if (!result.body) {
        throw new Error("No body in response");
    }
    const stream = core_util_1.isNodeLike
        ? (0, core_sse_1.createSseStream)(result.body)
        : (0, core_sse_1.createSseStream)(result.body);
    return createAgentStream(stream);
}
/** Create a run and stream the events */
async function createRunStreaming(context, assistantId, threadId, options = { requestOptions: {} }) {
    const streamOptions = Object.assign(Object.assign({}, options), { stream: true });
    return processStream((0, operations_js_1._createRunSend)(context, threadId, assistantId, streamOptions));
}
/** Create a thread and run and stream the events */
async function createThreadAndRunStreaming(context, assistantId, options = { requestOptions: {} }) {
    const streamOptions = Object.assign(Object.assign({}, options), { stream: true });
    return processStream(_createThreadAndRunSend(context, assistantId, streamOptions));
}
async function submitToolOutputsToRunStreaming(context, threadId, runId, options = { requestOptions: {} }) {
    const streamOptions = Object.assign(Object.assign({}, options), { stream: true });
    return processStream(context
        .path("/threads/{threadId}/runs/{runId}/submit_tool_outputs", threadId, runId)
        .post(streamOptions));
}
//# sourceMappingURL=operations.js.map
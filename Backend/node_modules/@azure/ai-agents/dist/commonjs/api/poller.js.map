{"version":3,"file":"poller.js","sourceRoot":"","sources":["../../../src/api/poller.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { delay } from \"@azure/core-util\";\nimport { type PollerLike, type OperationState, type OperationStatus } from \"@azure/core-lro\";\nimport type { AbortSignalLike } from \"@azure/abort-controller\";\n\nconst DEFAULT_POLL_INTERVAL_IN_MS = 1000;\n\n/**\n * Deserializes the state from a serialized string\n */\nexport function deserializeState<T>(serializedState: string): OperationState<T> {\n  try {\n    return JSON.parse(serializedState).state;\n  } catch (e) {\n    throw new Error(`Unable to deserialize input state: ${serializedState}`);\n  }\n}\n\nexport function createPoller<T>({\n  initOperation,\n  pollOperation,\n  getOperationStatus,\n  getOperationError,\n  intervalInMs,\n  resumeFrom,\n}: {\n  initOperation: () => Promise<T>;\n  pollOperation: (currentResult: T) => Promise<T>;\n  getOperationStatus: (result: T) => OperationStatus;\n  getOperationError?: (result: T) => Error | undefined;\n  intervalInMs?: number;\n  resumeFrom?: string;\n}): PollerLike<OperationState<T>, T> {\n  let statePromise: Promise<OperationState<T>>;\n  let state: OperationState<T>;\n\n  if (resumeFrom) {\n    state = deserializeState<T>(resumeFrom);\n    statePromise = Promise.resolve(state);\n  } else {\n    statePromise = initOperation().then((result) => {\n      state = {\n        result,\n        status: getOperationStatus(result),\n      };\n      return state;\n    });\n  }\n\n  let resultPromise: Promise<T> | undefined;\n  const abortController = new AbortController();\n  type Handler = (state: OperationState<T>) => void;\n  const handlers = new Map<symbol, Handler>();\n  const handleProgressEvents = async (): Promise<void> => handlers.forEach((h) => h(state));\n  const currentPollIntervalInMs = intervalInMs ?? DEFAULT_POLL_INTERVAL_IN_MS;\n\n  const poller: PollerLike<OperationState<T>, T> = {\n    get operationState(): OperationState<T> | undefined {\n      return state;\n    },\n    get result(): T | undefined {\n      return state?.result;\n    },\n    get isDone(): boolean {\n      return [\"succeeded\", \"failed\", \"canceled\"].includes(state?.status ?? \"\");\n    },\n    onProgress: (callback: (state: OperationState<T>) => void) => {\n      const s = Symbol();\n      handlers.set(s, callback);\n      return () => handlers.delete(s);\n    },\n    serialize: async () => {\n      await statePromise;\n      return JSON.stringify({\n        state,\n      });\n    },\n    submitted: async () => {\n      await statePromise;\n    },\n    pollUntilDone: async (pollOptions?: { abortSignal?: AbortSignalLike }) => {\n      resultPromise ??= (async () => {\n        await statePromise;\n        if (!state) {\n          throw new Error(\"Poller is not initialized\");\n        }\n        const { abortSignal: inputAbortSignal } = pollOptions || {};\n        function abortListener(): void {\n          abortController.abort();\n        }\n        const abortSignal = abortController.signal;\n        if (inputAbortSignal?.aborted) {\n          abortController.abort();\n        } else if (!abortSignal.aborted) {\n          inputAbortSignal?.addEventListener(\"abort\", abortListener, { once: true });\n        }\n\n        try {\n          if (!poller.isDone) {\n            await poller.poll({ abortSignal });\n            while (!poller.isDone) {\n              await delay(currentPollIntervalInMs, { abortSignal });\n              await poller.poll({ abortSignal });\n            }\n          }\n        } finally {\n          inputAbortSignal?.removeEventListener(\"abort\", abortListener);\n        }\n        switch (state.status) {\n          case \"succeeded\":\n            return poller.result as T;\n          case \"canceled\":\n            throw new Error(\"Operation cancelled\");\n          case \"failed\":\n            throw state.error ?? new Error(\"Operation failed\");\n          case \"notStarted\":\n          case \"running\":\n            throw new Error(\"Polling completed without succeeding or failing\");\n        }\n      })().finally(() => {\n        resultPromise = undefined;\n      });\n      return resultPromise;\n    },\n\n    async poll(pollOptions?: { abortSignal?: AbortSignalLike }): Promise<OperationState<T>> {\n      // Check state before polling\n      await statePromise;\n      if (!state) {\n        throw new Error(\"Poller is not initialized\");\n      }\n      switch (state.status) {\n        case \"succeeded\":\n          return state;\n        case \"canceled\":\n          throw new Error(\"Operation was canceled\");\n        case \"failed\":\n          throw state.error ?? new Error(\"Operation failed\");\n      }\n\n      // Poll\n      if (pollOptions?.abortSignal?.aborted) {\n        throw new Error(\"Operation aborted\");\n      }\n\n      // Make sure we have a result to poll with\n      if (!state.result) {\n        throw new Error(\"Cannot poll with undefined result\");\n      }\n\n      const result = await pollOperation(state.result);\n      state = {\n        result,\n        status: getOperationStatus(result),\n        error: getOperationError ? getOperationError(result) : undefined,\n      };\n\n      await handleProgressEvents();\n      switch (state.status) {\n        case \"canceled\":\n          throw new Error(\"Operation was canceled\");\n        case \"failed\":\n          throw state.error ?? new Error(\"Operation failed\");\n      }\n      return state;\n    },\n\n    then<T1 = T, T2 = never>(\n      onfulfilled?: ((value: T) => T1 | PromiseLike<T1>) | undefined | null,\n      onrejected?: ((reason: any) => T2 | PromiseLike<T2>) | undefined | null,\n    ): Promise<T1 | T2> {\n      return poller.pollUntilDone().then(onfulfilled, onrejected);\n    },\n    catch<T2 = never>(\n      onrejected?: ((reason: any) => T2 | PromiseLike<T2>) | undefined | null,\n    ): Promise<T | T2> {\n      return poller.pollUntilDone().catch(onrejected);\n    },\n    finally(onfinally?: (() => void) | undefined | null): Promise<T> {\n      return poller.pollUntilDone().finally(onfinally);\n    },\n    [Symbol.toStringTag]: \"Poller\",\n  };\n  return poller;\n}\n"]}
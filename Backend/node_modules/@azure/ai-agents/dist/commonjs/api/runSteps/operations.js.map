{"version":3,"file":"operations.js","sourceRoot":"","sources":["../../../../src/api/runSteps/operations.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { AgentsContext as Client } from \"../index.js\";\nimport {\n  RunStep,\n  runStepDeserializer,\n  _AgentsPagedResultRunStep,\n  _agentsPagedResultRunStepDeserializer,\n} from \"../../models/models.js\";\nimport { RunStepsListRunStepsOptionalParams, RunStepsGetRunStepOptionalParams } from \"./options.js\";\nimport {\n  PagedAsyncIterableIterator,\n  buildPagedAsyncIterator,\n} from \"../../static-helpers/pagingHelpers.js\";\nimport { expandUrlTemplate } from \"../../static-helpers/urlTemplate.js\";\nimport {\n  StreamableMethod,\n  PathUncheckedResponse,\n  createRestError,\n  operationOptionsToRequestParameters,\n} from \"@azure-rest/core-client\";\n\nexport function _listRunStepsSend(\n  context: Client,\n  threadId: string,\n  runId: string,\n  options: RunStepsListRunStepsOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  const path = expandUrlTemplate(\n    \"/threads/{threadId}/runs/{runId}/steps{?include%5B%5D,api%2Dversion,limit,order,after,before}\",\n    {\n      threadId: threadId,\n      runId: runId,\n      \"include%5B%5D\": !options?.include\n        ? options?.include\n        : options?.include.map((p: any) => {\n            return p;\n          }),\n      \"api%2Dversion\": context.apiVersion,\n      limit: options?.limit,\n      order: options?.order,\n      after: options?.after,\n      before: options?.before,\n    },\n    {\n      allowReserved: options?.requestOptions?.skipUrlEncoding,\n    },\n  );\n  return context.path(path).get({\n    ...operationOptionsToRequestParameters(options),\n    headers: {\n      accept: \"application/json\",\n      ...options.requestOptions?.headers,\n    },\n  });\n}\n\nexport async function _listRunStepsDeserialize(\n  result: PathUncheckedResponse,\n): Promise<_AgentsPagedResultRunStep> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    throw createRestError(result);\n  }\n\n  return _agentsPagedResultRunStepDeserializer(result.body);\n}\n\n/** Gets a list of run steps from a thread run. */\nexport function listRunSteps(\n  context: Client,\n  threadId: string,\n  runId: string,\n  options: RunStepsListRunStepsOptionalParams = { requestOptions: {} },\n): PagedAsyncIterableIterator<RunStep> {\n  return buildPagedAsyncIterator(\n    context,\n    () => _listRunStepsSend(context, threadId, runId, options),\n    _listRunStepsDeserialize,\n    [\"200\"],\n    { itemName: \"data\" },\n  );\n}\n\nexport function _getRunStepSend(\n  context: Client,\n  threadId: string,\n  runId: string,\n  stepId: string,\n  options: RunStepsGetRunStepOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  const path = expandUrlTemplate(\n    \"/threads/{threadId}/runs/{runId}/steps/{stepId}{?api%2Dversion,include%5B%5D}\",\n    {\n      threadId: threadId,\n      runId: runId,\n      stepId: stepId,\n      \"api%2Dversion\": context.apiVersion,\n      \"include%5B%5D\": !options?.include\n        ? options?.include\n        : options?.include.map((p: any) => {\n            return p;\n          }),\n    },\n    {\n      allowReserved: options?.requestOptions?.skipUrlEncoding,\n    },\n  );\n  return context.path(path).get({\n    ...operationOptionsToRequestParameters(options),\n    headers: {\n      accept: \"application/json\",\n      ...options.requestOptions?.headers,\n    },\n  });\n}\n\nexport async function _getRunStepDeserialize(result: PathUncheckedResponse): Promise<RunStep> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    throw createRestError(result);\n  }\n\n  return runStepDeserializer(result.body);\n}\n\n/** Retrieves a single run step from a thread run. */\nexport async function getRunStep(\n  context: Client,\n  threadId: string,\n  runId: string,\n  stepId: string,\n  options: RunStepsGetRunStepOptionalParams = { requestOptions: {} },\n): Promise<RunStep> {\n  const result = await _getRunStepSend(context, threadId, runId, stepId, options);\n  return _getRunStepDeserialize(result);\n}\n"]}
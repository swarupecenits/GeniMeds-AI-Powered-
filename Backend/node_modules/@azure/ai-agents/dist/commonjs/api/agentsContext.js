"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAgents = createAgents;
const tslib_1 = require("tslib");
const logger_js_1 = require("../logger.js");
const core_client_1 = require("@azure-rest/core-client");
const core_auth_1 = require("@azure/core-auth");
function createAgents(endpointParam, credential, options = {}) {
    var _a, _b, _c, _d, _e, _f;
    const prefixFromOptions = (_a = options === null || options === void 0 ? void 0 : options.userAgentOptions) === null || _a === void 0 ? void 0 : _a.userAgentPrefix;
    const userAgentInfo = `azsdk-js-ai-agents/1.0.0-beta.3`;
    const userAgentPrefix = prefixFromOptions
        ? `${prefixFromOptions} azsdk-js-api ${userAgentInfo}`
        : `azsdk-js-api ${userAgentInfo}`;
    const _g = Object.assign(Object.assign({}, options), { userAgentOptions: { userAgentPrefix }, loggingOptions: { logger: (_c = (_b = options.loggingOptions) === null || _b === void 0 ? void 0 : _b.logger) !== null && _c !== void 0 ? _c : logger_js_1.logger.info }, credentials: {
            scopes: (_e = (_d = options.credentials) === null || _d === void 0 ? void 0 : _d.scopes) !== null && _e !== void 0 ? _e : ["https://ai.azure.com/.default"],
        } }), { apiVersion: _ } = _g, updatedOptions = tslib_1.__rest(_g, ["apiVersion"]);
    const clientContext = (0, core_client_1.getClient)(endpointParam, credential, updatedOptions);
    if ((0, core_auth_1.isKeyCredential)(credential)) {
        clientContext.pipeline.addPolicy({
            name: "customKeyCredentialPolicy",
            sendRequest(request, next) {
                request.headers.set("Authorization", "Bearer " + credential.key);
                return next(request);
            },
        });
    }
    clientContext.pipeline.removePolicy({ name: "ApiVersionPolicy" });
    const apiVersion = (_f = options.apiVersion) !== null && _f !== void 0 ? _f : "2025-05-15-preview";
    clientContext.pipeline.addPolicy({
        name: "ClientApiVersionPolicy",
        sendRequest: (req, next) => {
            var _a;
            // Use the apiVersion defined in request url directly
            // Append one if there is no apiVersion and we have one at client options
            const url = new URL(req.url);
            const defaultApiVersion = (_a = url.searchParams.get("api-version")) !== null && _a !== void 0 ? _a : apiVersion;
            // remove api-version from url
            url.searchParams.delete("api-version");
            // add api-version to url
            req.url = `${url.toString()}${Array.from(url.searchParams.keys()).length > 0 ? "&" : "?"}api-version=${defaultApiVersion}`;
            return next(req);
        },
    });
    return Object.assign(Object.assign({}, clientContext), { apiVersion });
}
//# sourceMappingURL=agentsContext.js.map
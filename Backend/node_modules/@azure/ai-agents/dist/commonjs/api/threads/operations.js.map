{"version":3,"file":"operations.js","sourceRoot":"","sources":["../../../../src/api/threads/operations.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;AAgClC,8CAsBC;AAED,4DASC;AAGD,oCAOC;AAED,8CA6BC;AAED,4DASC;AAGD,oCAOC;AAED,wCAsBC;AAED,sDAOC;AAGD,8BAOC;AAED,4CAwBC;AAED,0DASC;AAGD,kCAWC;AAED,8CA8BC;AAED,4DASC;AAGD,oCAMC;AA9QD,sDASgC;AAQhC,4EAG+C;AAC/C,wEAAwE;AACxE,yDAKiC;AAEjC,SAAgB,iBAAiB,CAC/B,OAAe,EACf,QAAgB,EAChB,UAA6C,EAAE,cAAc,EAAE,EAAE,EAAE;;IAEnE,MAAM,IAAI,GAAG,IAAA,kCAAiB,EAC5B,qCAAqC,EACrC;QACE,QAAQ,EAAE,QAAQ;QAClB,eAAe,EAAE,OAAO,CAAC,UAAU;KACpC,EACD;QACE,aAAa,EAAE,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,cAAc,0CAAE,eAAe;KACxD,CACF,CAAC;IACF,OAAO,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,iCAC3B,IAAA,iDAAmC,EAAC,OAAO,CAAC,KAC/C,OAAO,kBACL,MAAM,EAAE,kBAAkB,IACvB,MAAA,OAAO,CAAC,cAAc,0CAAE,OAAO,KAEpC,CAAC;AACL,CAAC;AAEM,KAAK,UAAU,wBAAwB,CAC5C,MAA6B;IAE7B,MAAM,gBAAgB,GAAG,CAAC,KAAK,CAAC,CAAC;IACjC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC;QAC9C,MAAM,IAAA,6BAAe,EAAC,MAAM,CAAC,CAAC;IAChC,CAAC;IAED,OAAO,IAAA,4CAAgC,EAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACvD,CAAC;AAED,kCAAkC;AAC3B,KAAK,UAAU,YAAY,CAChC,OAAe,EACf,QAAgB,EAChB,UAA6C,EAAE,cAAc,EAAE,EAAE,EAAE;IAEnE,MAAM,MAAM,GAAG,MAAM,iBAAiB,CAAC,OAAO,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;IACnE,OAAO,wBAAwB,CAAC,MAAM,CAAC,CAAC;AAC1C,CAAC;AAED,SAAgB,iBAAiB,CAC/B,OAAe,EACf,QAAgB,EAChB,UAA6C,EAAE,cAAc,EAAE,EAAE,EAAE;;IAEnE,MAAM,IAAI,GAAG,IAAA,kCAAiB,EAC5B,qCAAqC,EACrC;QACE,QAAQ,EAAE,QAAQ;QAClB,eAAe,EAAE,OAAO,CAAC,UAAU;KACpC,EACD;QACE,aAAa,EAAE,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,cAAc,0CAAE,eAAe;KACxD,CACF,CAAC;IACF,OAAO,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,iCACzB,IAAA,iDAAmC,EAAC,OAAO,CAAC,KAC/C,WAAW,EAAE,kBAAkB,EAC/B,OAAO,kBACL,MAAM,EAAE,kBAAkB,IACvB,MAAA,OAAO,CAAC,cAAc,0CAAE,OAAO,GAEpC,IAAI,EAAE;YACJ,cAAc,EAAE,CAAC,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,aAAa,CAAA;gBACrC,CAAC,CAAC,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,aAAa;gBACxB,CAAC,CAAC,IAAA,mCAAuB,EAAC,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,aAAa,CAAC;YACnD,QAAQ,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,QAAQ;SAC5B,IACD,CAAC;AACL,CAAC;AAEM,KAAK,UAAU,wBAAwB,CAC5C,MAA6B;IAE7B,MAAM,gBAAgB,GAAG,CAAC,KAAK,CAAC,CAAC;IACjC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC;QAC9C,MAAM,IAAA,6BAAe,EAAC,MAAM,CAAC,CAAC;IAChC,CAAC;IAED,OAAO,IAAA,mCAAuB,EAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAC9C,CAAC;AAED,mCAAmC;AAC5B,KAAK,UAAU,YAAY,CAChC,OAAe,EACf,QAAgB,EAChB,UAA6C,EAAE,cAAc,EAAE,EAAE,EAAE;IAEnE,MAAM,MAAM,GAAG,MAAM,iBAAiB,CAAC,OAAO,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;IACnE,OAAO,wBAAwB,CAAC,MAAM,CAAC,CAAC;AAC1C,CAAC;AAED,SAAgB,cAAc,CAC5B,OAAe,EACf,QAAgB,EAChB,UAA0C,EAAE,cAAc,EAAE,EAAE,EAAE;;IAEhE,MAAM,IAAI,GAAG,IAAA,kCAAiB,EAC5B,qCAAqC,EACrC;QACE,QAAQ,EAAE,QAAQ;QAClB,eAAe,EAAE,OAAO,CAAC,UAAU;KACpC,EACD;QACE,aAAa,EAAE,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,cAAc,0CAAE,eAAe;KACxD,CACF,CAAC;IACF,OAAO,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,iCACxB,IAAA,iDAAmC,EAAC,OAAO,CAAC,KAC/C,OAAO,kBACL,MAAM,EAAE,kBAAkB,IACvB,MAAA,OAAO,CAAC,cAAc,0CAAE,OAAO,KAEpC,CAAC;AACL,CAAC;AAEM,KAAK,UAAU,qBAAqB,CAAC,MAA6B;IACvE,MAAM,gBAAgB,GAAG,CAAC,KAAK,CAAC,CAAC;IACjC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC;QAC9C,MAAM,IAAA,6BAAe,EAAC,MAAM,CAAC,CAAC;IAChC,CAAC;IAED,OAAO,IAAA,mCAAuB,EAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAC9C,CAAC;AAED,iDAAiD;AAC1C,KAAK,UAAU,SAAS,CAC7B,OAAe,EACf,QAAgB,EAChB,UAA0C,EAAE,cAAc,EAAE,EAAE,EAAE;IAEhE,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,OAAO,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;IAChE,OAAO,qBAAqB,CAAC,MAAM,CAAC,CAAC;AACvC,CAAC;AAED,SAAgB,gBAAgB,CAC9B,OAAe,EACf,UAA4C,EAAE,cAAc,EAAE,EAAE,EAAE;;IAElE,MAAM,IAAI,GAAG,IAAA,kCAAiB,EAC5B,mDAAmD,EACnD;QACE,eAAe,EAAE,OAAO,CAAC,UAAU;QACnC,KAAK,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,KAAK;QACrB,KAAK,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,KAAK;QACrB,KAAK,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,KAAK;QACrB,MAAM,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,MAAM;KACxB,EACD;QACE,aAAa,EAAE,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,cAAc,0CAAE,eAAe;KACxD,CACF,CAAC;IACF,OAAO,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,iCACxB,IAAA,iDAAmC,EAAC,OAAO,CAAC,KAC/C,OAAO,kBACL,MAAM,EAAE,kBAAkB,IACvB,MAAA,OAAO,CAAC,cAAc,0CAAE,OAAO,KAEpC,CAAC;AACL,CAAC;AAEM,KAAK,UAAU,uBAAuB,CAC3C,MAA6B;IAE7B,MAAM,gBAAgB,GAAG,CAAC,KAAK,CAAC,CAAC;IACjC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC;QAC9C,MAAM,IAAA,6BAAe,EAAC,MAAM,CAAC,CAAC;IAChC,CAAC;IAED,OAAO,IAAA,qDAAyC,EAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAChE,CAAC;AAED,2DAA2D;AAC3D,SAAgB,WAAW,CACzB,OAAe,EACf,UAA4C,EAAE,cAAc,EAAE,EAAE,EAAE;IAElE,OAAO,IAAA,0CAAuB,EAC5B,OAAO,EACP,GAAG,EAAE,CAAC,gBAAgB,CAAC,OAAO,EAAE,OAAO,CAAC,EACxC,uBAAuB,EACvB,CAAC,KAAK,CAAC,EACP,EAAE,QAAQ,EAAE,MAAM,EAAE,CACrB,CAAC;AACJ,CAAC;AAED,SAAgB,iBAAiB,CAC/B,OAAe,EACf,UAA6C,EAAE,cAAc,EAAE,EAAE,EAAE;;IAEnE,MAAM,IAAI,GAAG,IAAA,kCAAiB,EAC5B,0BAA0B,EAC1B;QACE,eAAe,EAAE,OAAO,CAAC,UAAU;KACpC,EACD;QACE,aAAa,EAAE,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,cAAc,0CAAE,eAAe;KACxD,CACF,CAAC;IACF,OAAO,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,iCACzB,IAAA,iDAAmC,EAAC,OAAO,CAAC,KAC/C,WAAW,EAAE,kBAAkB,EAC/B,OAAO,kBACL,MAAM,EAAE,kBAAkB,IACvB,MAAA,OAAO,CAAC,cAAc,0CAAE,OAAO,GAEpC,IAAI,EAAE;YACJ,QAAQ,EAAE,CAAC,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,QAAQ,CAAA;gBAC1B,CAAC,CAAC,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,QAAQ;gBACnB,CAAC,CAAC,IAAA,+CAAmC,EAAC,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,QAAQ,CAAC;YAC1D,cAAc,EAAE,CAAC,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,aAAa,CAAA;gBACrC,CAAC,CAAC,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,aAAa;gBACxB,CAAC,CAAC,IAAA,mCAAuB,EAAC,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,aAAa,CAAC;YACnD,QAAQ,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,QAAQ;SAC5B,IACD,CAAC;AACL,CAAC;AAEM,KAAK,UAAU,wBAAwB,CAC5C,MAA6B;IAE7B,MAAM,gBAAgB,GAAG,CAAC,KAAK,CAAC,CAAC;IACjC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC;QAC9C,MAAM,IAAA,6BAAe,EAAC,MAAM,CAAC,CAAC;IAChC,CAAC;IAED,OAAO,IAAA,mCAAuB,EAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAC9C,CAAC;AAED,+EAA+E;AACxE,KAAK,UAAU,YAAY,CAChC,OAAe,EACf,UAA6C,EAAE,cAAc,EAAE,EAAE,EAAE;IAEnE,MAAM,MAAM,GAAG,MAAM,iBAAiB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IACzD,OAAO,wBAAwB,CAAC,MAAM,CAAC,CAAC;AAC1C,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { AgentsContext as Client } from \"../index.js\";\nimport {\n  toolResourcesSerializer,\n  threadMessageOptionsArraySerializer,\n  AgentThread,\n  agentThreadDeserializer,\n  _AgentsPagedResultAgentThread,\n  _agentsPagedResultAgentThreadDeserializer,\n  ThreadDeletionStatus,\n  threadDeletionStatusDeserializer,\n} from \"../../models/models.js\";\nimport {\n  ThreadsDeleteThreadOptionalParams,\n  ThreadsUpdateThreadOptionalParams,\n  ThreadsGetThreadOptionalParams,\n  ThreadsListThreadsOptionalParams,\n  ThreadsCreateThreadOptionalParams,\n} from \"./options.js\";\nimport {\n  PagedAsyncIterableIterator,\n  buildPagedAsyncIterator,\n} from \"../../static-helpers/pagingHelpers.js\";\nimport { expandUrlTemplate } from \"../../static-helpers/urlTemplate.js\";\nimport {\n  StreamableMethod,\n  PathUncheckedResponse,\n  createRestError,\n  operationOptionsToRequestParameters,\n} from \"@azure-rest/core-client\";\n\nexport function _deleteThreadSend(\n  context: Client,\n  threadId: string,\n  options: ThreadsDeleteThreadOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  const path = expandUrlTemplate(\n    \"/threads/{threadId}{?api%2Dversion}\",\n    {\n      threadId: threadId,\n      \"api%2Dversion\": context.apiVersion,\n    },\n    {\n      allowReserved: options?.requestOptions?.skipUrlEncoding,\n    },\n  );\n  return context.path(path).delete({\n    ...operationOptionsToRequestParameters(options),\n    headers: {\n      accept: \"application/json\",\n      ...options.requestOptions?.headers,\n    },\n  });\n}\n\nexport async function _deleteThreadDeserialize(\n  result: PathUncheckedResponse,\n): Promise<ThreadDeletionStatus> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    throw createRestError(result);\n  }\n\n  return threadDeletionStatusDeserializer(result.body);\n}\n\n/** Deletes an existing thread. */\nexport async function deleteThread(\n  context: Client,\n  threadId: string,\n  options: ThreadsDeleteThreadOptionalParams = { requestOptions: {} },\n): Promise<ThreadDeletionStatus> {\n  const result = await _deleteThreadSend(context, threadId, options);\n  return _deleteThreadDeserialize(result);\n}\n\nexport function _updateThreadSend(\n  context: Client,\n  threadId: string,\n  options: ThreadsUpdateThreadOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  const path = expandUrlTemplate(\n    \"/threads/{threadId}{?api%2Dversion}\",\n    {\n      threadId: threadId,\n      \"api%2Dversion\": context.apiVersion,\n    },\n    {\n      allowReserved: options?.requestOptions?.skipUrlEncoding,\n    },\n  );\n  return context.path(path).post({\n    ...operationOptionsToRequestParameters(options),\n    contentType: \"application/json\",\n    headers: {\n      accept: \"application/json\",\n      ...options.requestOptions?.headers,\n    },\n    body: {\n      tool_resources: !options?.toolResources\n        ? options?.toolResources\n        : toolResourcesSerializer(options?.toolResources),\n      metadata: options?.metadata,\n    },\n  });\n}\n\nexport async function _updateThreadDeserialize(\n  result: PathUncheckedResponse,\n): Promise<AgentThread> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    throw createRestError(result);\n  }\n\n  return agentThreadDeserializer(result.body);\n}\n\n/** Modifies an existing thread. */\nexport async function updateThread(\n  context: Client,\n  threadId: string,\n  options: ThreadsUpdateThreadOptionalParams = { requestOptions: {} },\n): Promise<AgentThread> {\n  const result = await _updateThreadSend(context, threadId, options);\n  return _updateThreadDeserialize(result);\n}\n\nexport function _getThreadSend(\n  context: Client,\n  threadId: string,\n  options: ThreadsGetThreadOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  const path = expandUrlTemplate(\n    \"/threads/{threadId}{?api%2Dversion}\",\n    {\n      threadId: threadId,\n      \"api%2Dversion\": context.apiVersion,\n    },\n    {\n      allowReserved: options?.requestOptions?.skipUrlEncoding,\n    },\n  );\n  return context.path(path).get({\n    ...operationOptionsToRequestParameters(options),\n    headers: {\n      accept: \"application/json\",\n      ...options.requestOptions?.headers,\n    },\n  });\n}\n\nexport async function _getThreadDeserialize(result: PathUncheckedResponse): Promise<AgentThread> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    throw createRestError(result);\n  }\n\n  return agentThreadDeserializer(result.body);\n}\n\n/** Gets information about an existing thread. */\nexport async function getThread(\n  context: Client,\n  threadId: string,\n  options: ThreadsGetThreadOptionalParams = { requestOptions: {} },\n): Promise<AgentThread> {\n  const result = await _getThreadSend(context, threadId, options);\n  return _getThreadDeserialize(result);\n}\n\nexport function _listThreadsSend(\n  context: Client,\n  options: ThreadsListThreadsOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  const path = expandUrlTemplate(\n    \"/threads{?api%2Dversion,limit,order,after,before}\",\n    {\n      \"api%2Dversion\": context.apiVersion,\n      limit: options?.limit,\n      order: options?.order,\n      after: options?.after,\n      before: options?.before,\n    },\n    {\n      allowReserved: options?.requestOptions?.skipUrlEncoding,\n    },\n  );\n  return context.path(path).get({\n    ...operationOptionsToRequestParameters(options),\n    headers: {\n      accept: \"application/json\",\n      ...options.requestOptions?.headers,\n    },\n  });\n}\n\nexport async function _listThreadsDeserialize(\n  result: PathUncheckedResponse,\n): Promise<_AgentsPagedResultAgentThread> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    throw createRestError(result);\n  }\n\n  return _agentsPagedResultAgentThreadDeserializer(result.body);\n}\n\n/** Gets a list of threads that were previously created. */\nexport function listThreads(\n  context: Client,\n  options: ThreadsListThreadsOptionalParams = { requestOptions: {} },\n): PagedAsyncIterableIterator<AgentThread> {\n  return buildPagedAsyncIterator(\n    context,\n    () => _listThreadsSend(context, options),\n    _listThreadsDeserialize,\n    [\"200\"],\n    { itemName: \"data\" },\n  );\n}\n\nexport function _createThreadSend(\n  context: Client,\n  options: ThreadsCreateThreadOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  const path = expandUrlTemplate(\n    \"/threads{?api%2Dversion}\",\n    {\n      \"api%2Dversion\": context.apiVersion,\n    },\n    {\n      allowReserved: options?.requestOptions?.skipUrlEncoding,\n    },\n  );\n  return context.path(path).post({\n    ...operationOptionsToRequestParameters(options),\n    contentType: \"application/json\",\n    headers: {\n      accept: \"application/json\",\n      ...options.requestOptions?.headers,\n    },\n    body: {\n      messages: !options?.messages\n        ? options?.messages\n        : threadMessageOptionsArraySerializer(options?.messages),\n      tool_resources: !options?.toolResources\n        ? options?.toolResources\n        : toolResourcesSerializer(options?.toolResources),\n      metadata: options?.metadata,\n    },\n  });\n}\n\nexport async function _createThreadDeserialize(\n  result: PathUncheckedResponse,\n): Promise<AgentThread> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    throw createRestError(result);\n  }\n\n  return agentThreadDeserializer(result.body);\n}\n\n/** Creates a new thread. Threads contain messages and can be run by agents. */\nexport async function createThread(\n  context: Client,\n  options: ThreadsCreateThreadOptionalParams = { requestOptions: {} },\n): Promise<AgentThread> {\n  const result = await _createThreadSend(context, options);\n  return _createThreadDeserialize(result);\n}\n"]}
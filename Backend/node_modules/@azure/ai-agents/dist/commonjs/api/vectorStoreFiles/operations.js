"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", { value: true });
exports._deleteVectorStoreFileSend = _deleteVectorStoreFileSend;
exports._deleteVectorStoreFileDeserialize = _deleteVectorStoreFileDeserialize;
exports.deleteVectorStoreFile = deleteVectorStoreFile;
exports._getVectorStoreFileSend = _getVectorStoreFileSend;
exports._getVectorStoreFileDeserialize = _getVectorStoreFileDeserialize;
exports.getVectorStoreFile = getVectorStoreFile;
exports._createVectorStoreFileSend = _createVectorStoreFileSend;
exports._createVectorStoreFileDeserialize = _createVectorStoreFileDeserialize;
exports.createVectorStoreFileInternal = createVectorStoreFileInternal;
exports.createVectorStoreFile = createVectorStoreFile;
exports.createVectorStoreFileAndPoll = createVectorStoreFileAndPoll;
exports._listVectorStoreFilesSend = _listVectorStoreFilesSend;
exports._listVectorStoreFilesDeserialize = _listVectorStoreFilesDeserialize;
exports.listVectorStoreFiles = listVectorStoreFiles;
const models_js_1 = require("../../models/models.js");
const pagingHelpers_js_1 = require("../../static-helpers/pagingHelpers.js");
const urlTemplate_js_1 = require("../../static-helpers/urlTemplate.js");
const core_client_1 = require("@azure-rest/core-client");
const poller_js_1 = require("../poller.js");
function _deleteVectorStoreFileSend(context, vectorStoreId, fileId, options = {
    requestOptions: {},
}) {
    var _a, _b;
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/vector_stores/{vectorStoreId}/files/{fileId}{?api%2Dversion}", {
        vectorStoreId: vectorStoreId,
        fileId: fileId,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: (_a = options === null || options === void 0 ? void 0 : options.requestOptions) === null || _a === void 0 ? void 0 : _a.skipUrlEncoding,
    });
    return context.path(path).delete(Object.assign(Object.assign({}, (0, core_client_1.operationOptionsToRequestParameters)(options)), { headers: Object.assign({ accept: "application/json" }, (_b = options.requestOptions) === null || _b === void 0 ? void 0 : _b.headers) }));
}
async function _deleteVectorStoreFileDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        throw (0, core_client_1.createRestError)(result);
    }
    return (0, models_js_1.vectorStoreFileDeletionStatusDeserializer)(result.body);
}
/** Deletes a vector store file. This removes the file‐to‐store link (does not delete the file itself). */
async function deleteVectorStoreFile(context, vectorStoreId, fileId, options = {
    requestOptions: {},
}) {
    const result = await _deleteVectorStoreFileSend(context, vectorStoreId, fileId, options);
    return _deleteVectorStoreFileDeserialize(result);
}
function _getVectorStoreFileSend(context, vectorStoreId, fileId, options = {
    requestOptions: {},
}) {
    var _a, _b;
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/vector_stores/{vectorStoreId}/files/{fileId}{?api%2Dversion}", {
        vectorStoreId: vectorStoreId,
        fileId: fileId,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: (_a = options === null || options === void 0 ? void 0 : options.requestOptions) === null || _a === void 0 ? void 0 : _a.skipUrlEncoding,
    });
    return context.path(path).get(Object.assign(Object.assign({}, (0, core_client_1.operationOptionsToRequestParameters)(options)), { headers: Object.assign({ accept: "application/json" }, (_b = options.requestOptions) === null || _b === void 0 ? void 0 : _b.headers) }));
}
async function _getVectorStoreFileDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        throw (0, core_client_1.createRestError)(result);
    }
    return (0, models_js_1.vectorStoreFileDeserializer)(result.body);
}
/** Retrieves a vector store file. */
async function getVectorStoreFile(context, vectorStoreId, fileId, options = {
    requestOptions: {},
}) {
    const result = await _getVectorStoreFileSend(context, vectorStoreId, fileId, options);
    return _getVectorStoreFileDeserialize(result);
}
function _createVectorStoreFileSend(context, vectorStoreId, options = {
    requestOptions: {},
}) {
    var _a, _b;
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/vector_stores/{vectorStoreId}/files{?api%2Dversion}", {
        vectorStoreId: vectorStoreId,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: (_a = options === null || options === void 0 ? void 0 : options.requestOptions) === null || _a === void 0 ? void 0 : _a.skipUrlEncoding,
    });
    return context.path(path).post(Object.assign(Object.assign({}, (0, core_client_1.operationOptionsToRequestParameters)(options)), { contentType: "application/json", headers: Object.assign({ accept: "application/json" }, (_b = options.requestOptions) === null || _b === void 0 ? void 0 : _b.headers), body: {
            file_id: options === null || options === void 0 ? void 0 : options.fileId,
            data_source: !(options === null || options === void 0 ? void 0 : options.dataSource)
                ? options === null || options === void 0 ? void 0 : options.dataSource
                : (0, models_js_1.vectorStoreDataSourceSerializer)(options === null || options === void 0 ? void 0 : options.dataSource),
            chunking_strategy: !(options === null || options === void 0 ? void 0 : options.chunkingStrategy)
                ? options === null || options === void 0 ? void 0 : options.chunkingStrategy
                : (0, models_js_1.vectorStoreChunkingStrategyRequestUnionSerializer)(options === null || options === void 0 ? void 0 : options.chunkingStrategy),
        } }));
}
async function _createVectorStoreFileDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        throw (0, core_client_1.createRestError)(result);
    }
    return (0, models_js_1.vectorStoreFileDeserializer)(result.body);
}
/** Create a vector store file by attaching a file to a vector store. */
async function createVectorStoreFileInternal(context, vectorStoreId, options = {
    requestOptions: {},
}) {
    const result = await _createVectorStoreFileSend(context, vectorStoreId, options);
    return _createVectorStoreFileDeserialize(result);
}
/** Create a vector store file by attaching a file to a vector store. */
function createVectorStoreFile(context, vectorStoreId, options = { requestOptions: {} }) {
    var _a;
    return (0, poller_js_1.createPoller)({
        initOperation: async () => {
            return createVectorStoreFileInternal(context, vectorStoreId, options);
        },
        pollOperation: async (currentResult) => {
            return getVectorStoreFile(context, vectorStoreId, currentResult.id, options);
        },
        getOperationStatus: getLroOperationStatus,
        getOperationError: (result) => {
            return result.status === "failed" && result.lastError
                ? new Error(`Operation failed with code ${result.lastError.code}: ${result.lastError.message}`)
                : undefined;
        },
        intervalInMs: (_a = options.pollingOptions) === null || _a === void 0 ? void 0 : _a.intervalInMs,
    });
}
/** Create a vector store file by attaching a file to a vector store and poll. */
function createVectorStoreFileAndPoll(context, vectorStoreId, options = { requestOptions: {} }) {
    var _a;
    return (0, poller_js_1.createPoller)({
        initOperation: async () => {
            return createVectorStoreFileInternal(context, vectorStoreId, options);
        },
        pollOperation: async (currentResult) => {
            return getVectorStoreFile(context, vectorStoreId, currentResult.id, options);
        },
        getOperationStatus: getLroOperationStatus,
        getOperationError: (result) => {
            return result.status === "failed" && result.lastError
                ? new Error(`Operation failed with code ${result.lastError.code}: ${result.lastError.message}`)
                : undefined;
        },
        intervalInMs: (_a = options.pollingOptions) === null || _a === void 0 ? void 0 : _a.intervalInMs,
    });
}
function _listVectorStoreFilesSend(context, vectorStoreId, options = {
    requestOptions: {},
}) {
    var _a, _b;
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/vector_stores/{vectorStoreId}/files{?filter,api%2Dversion,limit,order,after,before}", {
        vectorStoreId: vectorStoreId,
        filter: options === null || options === void 0 ? void 0 : options.filter,
        "api%2Dversion": context.apiVersion,
        limit: options === null || options === void 0 ? void 0 : options.limit,
        order: options === null || options === void 0 ? void 0 : options.order,
        after: options === null || options === void 0 ? void 0 : options.after,
        before: options === null || options === void 0 ? void 0 : options.before,
    }, {
        allowReserved: (_a = options === null || options === void 0 ? void 0 : options.requestOptions) === null || _a === void 0 ? void 0 : _a.skipUrlEncoding,
    });
    return context.path(path).get(Object.assign(Object.assign({}, (0, core_client_1.operationOptionsToRequestParameters)(options)), { headers: Object.assign({ accept: "application/json" }, (_b = options.requestOptions) === null || _b === void 0 ? void 0 : _b.headers) }));
}
async function _listVectorStoreFilesDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        throw (0, core_client_1.createRestError)(result);
    }
    return (0, models_js_1._agentsPagedResultVectorStoreFileDeserializer)(result.body);
}
/** Returns a list of vector store files. */
function listVectorStoreFiles(context, vectorStoreId, options = {
    requestOptions: {},
}) {
    return (0, pagingHelpers_js_1.buildPagedAsyncIterator)(context, () => _listVectorStoreFilesSend(context, vectorStoreId, options), _listVectorStoreFilesDeserialize, ["200"], { itemName: "data" });
}
function getLroOperationStatus(result) {
    switch (result.status) {
        case "in_progress":
            return "running";
        case "completed":
            return "succeeded";
        case "cancelled":
            return "canceled";
        default:
            return "failed";
    }
}
//# sourceMappingURL=operations.js.map
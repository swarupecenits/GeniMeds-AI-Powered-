import { AgentsContext as Client } from "../index.js";
import { _AgentsPagedResultVectorStoreFile, VectorStoreFile, VectorStoreFileDeletionStatus } from "../../models/models.js";
import { VectorStoreFilesDeleteVectorStoreFileOptionalParams, VectorStoreFilesGetVectorStoreFileOptionalParams, VectorStoreFilesCreateVectorStoreFileOptionalParams, VectorStoreFilesListVectorStoreFilesOptionalParams } from "./options.js";
import { PagedAsyncIterableIterator } from "../../static-helpers/pagingHelpers.js";
import { StreamableMethod, PathUncheckedResponse } from "@azure-rest/core-client";
import { OperationState, PollerLike } from "@azure/core-lro";
export declare function _deleteVectorStoreFileSend(context: Client, vectorStoreId: string, fileId: string, options?: VectorStoreFilesDeleteVectorStoreFileOptionalParams): StreamableMethod;
export declare function _deleteVectorStoreFileDeserialize(result: PathUncheckedResponse): Promise<VectorStoreFileDeletionStatus>;
/** Deletes a vector store file. This removes the file‐to‐store link (does not delete the file itself). */
export declare function deleteVectorStoreFile(context: Client, vectorStoreId: string, fileId: string, options?: VectorStoreFilesDeleteVectorStoreFileOptionalParams): Promise<VectorStoreFileDeletionStatus>;
export declare function _getVectorStoreFileSend(context: Client, vectorStoreId: string, fileId: string, options?: VectorStoreFilesGetVectorStoreFileOptionalParams): StreamableMethod;
export declare function _getVectorStoreFileDeserialize(result: PathUncheckedResponse): Promise<VectorStoreFile>;
/** Retrieves a vector store file. */
export declare function getVectorStoreFile(context: Client, vectorStoreId: string, fileId: string, options?: VectorStoreFilesGetVectorStoreFileOptionalParams): Promise<VectorStoreFile>;
export declare function _createVectorStoreFileSend(context: Client, vectorStoreId: string, options?: VectorStoreFilesCreateVectorStoreFileOptionalParams): StreamableMethod;
export declare function _createVectorStoreFileDeserialize(result: PathUncheckedResponse): Promise<VectorStoreFile>;
/** Create a vector store file by attaching a file to a vector store. */
export declare function createVectorStoreFileInternal(context: Client, vectorStoreId: string, options?: VectorStoreFilesCreateVectorStoreFileOptionalParams): Promise<VectorStoreFile>;
/** Create a vector store file by attaching a file to a vector store. */
export declare function createVectorStoreFile(context: Client, vectorStoreId: string, options?: VectorStoreFilesCreateVectorStoreFileOptionalParams): PollerLike<OperationState<VectorStoreFile>, VectorStoreFile>;
/** Create a vector store file by attaching a file to a vector store and poll. */
export declare function createVectorStoreFileAndPoll(context: Client, vectorStoreId: string, options?: VectorStoreFilesCreateVectorStoreFileOptionalParams): PollerLike<OperationState<VectorStoreFile>, VectorStoreFile>;
export declare function _listVectorStoreFilesSend(context: Client, vectorStoreId: string, options?: VectorStoreFilesListVectorStoreFilesOptionalParams): StreamableMethod;
export declare function _listVectorStoreFilesDeserialize(result: PathUncheckedResponse): Promise<_AgentsPagedResultVectorStoreFile>;
/** Returns a list of vector store files. */
export declare function listVectorStoreFiles(context: Client, vectorStoreId: string, options?: VectorStoreFilesListVectorStoreFilesOptionalParams): PagedAsyncIterableIterator<VectorStoreFile>;
//# sourceMappingURL=operations.d.ts.map
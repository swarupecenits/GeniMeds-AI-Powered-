{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/classic/runs/index.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;AAmGlC,gDAIC;AA3FD,gEAQsC;AAEtC,2DAA6D;AAoD7D,SAAS,QAAQ,CAAC,OAAsB;IACtC,OAAO;QACL,MAAM,EAAE,CAAC,QAAgB,EAAE,KAAa,EAAE,OAAqC,EAAE,EAAE,CACjF,IAAA,yBAAS,EAAC,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,OAAO,CAAC;QAC9C,iBAAiB,EAAE,CACjB,QAAgB,EAChB,KAAa,EACb,WAAyB,EACzB,OAAkD,EAClD,EAAE,CAAC,IAAA,sCAAsB,EAAC,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,WAAW,EAAE,OAAO,CAAC;QAC3E,MAAM,EAAE,CAAC,QAAgB,EAAE,KAAa,EAAE,OAAqC,EAAE,EAAE,CACjF,IAAA,yBAAS,EAAC,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,OAAO,CAAC;QAC9C,GAAG,EAAE,CAAC,QAAgB,EAAE,KAAa,EAAE,OAAkC,EAAE,EAAE,CAC3E,IAAA,sBAAM,EAAC,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,OAAO,CAAC;QAC3C,IAAI,EAAE,CAAC,QAAgB,EAAE,OAAoC,EAAE,EAAE,CAC/D,IAAA,wBAAQ,EAAC,OAAO,EAAE,QAAQ,EAAE,OAAO,CAAC;QACtC,MAAM,EAAE,CAAC,QAAgB,EAAE,WAAmB,EAAE,OAAqC,EAAE,EAAE,CACvF,IAAA,yBAAS,EAAC,OAAO,EAAE,QAAQ,EAAE,WAAW,EAAE,OAAO,CAAC;QACpD,aAAa,EAAE,CAAC,QAAgB,EAAE,WAAmB,EAAE,OAAqC,EAAE,EAAE,CAC9F,IAAA,gCAAgB,EAAC,OAAO,EAAE,QAAQ,EAAE,WAAW,EAAE,OAAO,CAAC;QAC3D,kBAAkB,EAAE,CAAC,WAAmB,EAAE,OAAqC,EAAE,EAAE,CACjF,IAAA,kCAAkB,EAAC,OAAO,EAAE,WAAW,EAAE,OAAO,CAAC;KACpD,CAAC;AACJ,CAAC;AAED,SAAgB,kBAAkB,CAAC,OAAsB;IACvD,yBACK,QAAQ,CAAC,OAAO,CAAC,EACpB;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { AgentsContext } from \"../../api/agentsContext.js\";\nimport { ThreadRun, ToolOutput } from \"../../models/models.js\";\nimport {\n  RunsCancelRunOptionalParams,\n  RunsSubmitToolOutputsToRunOptionalParams,\n  RunsUpdateRunOptionalParams,\n  RunsGetRunOptionalParams,\n  RunsListRunsOptionalParams,\n  RunsCreateRunOptionalParams,\n} from \"../../api/runs/options.js\";\nimport {\n  cancelRun,\n  submitToolOutputsToRun,\n  updateRun,\n  getRun,\n  listRuns,\n  createRun,\n  createRunAndPoll,\n} from \"../../api/runs/operations.js\";\nimport { AgentRunResponse } from \"../../models/streamingModels.js\";\nimport { createThreadAndRun } from \"../../api/operations.js\";\nimport { CreateThreadAndRunOptionalParams } from \"../../api/options.js\";\nimport { PagedAsyncIterableIterator } from \"../../static-helpers/pagingHelpers.js\";\nimport { PollerLike, OperationState } from \"@azure/core-lro\";\n\n/** Interface representing a Runs operations. */\nexport interface RunsOperations {\n  /** Cancels a run of an in‐progress thread. */\n  cancel: (\n    threadId: string,\n    runId: string,\n    options?: RunsCancelRunOptionalParams,\n  ) => Promise<ThreadRun>;\n  /** Submits outputs from tools as requested by tool calls in a run. */\n  submitToolOutputs: (\n    threadId: string,\n    runId: string,\n    toolOutputs: ToolOutput[],\n    options?: RunsSubmitToolOutputsToRunOptionalParams,\n  ) => AgentRunResponse;\n  /** Modifies an existing thread run. */\n  update: (\n    threadId: string,\n    runId: string,\n    options?: RunsUpdateRunOptionalParams,\n  ) => Promise<ThreadRun>;\n  /** Gets an existing run from an existing thread. */\n  get: (threadId: string, runId: string, options?: RunsGetRunOptionalParams) => Promise<ThreadRun>;\n  /** Gets a list of runs for a specified thread. */\n  list: (\n    threadId: string,\n    options?: RunsListRunsOptionalParams,\n  ) => PagedAsyncIterableIterator<ThreadRun>;\n  /** Creates a new run for an agent thread. */\n  create: (\n    threadId: string,\n    assistantId: string,\n    options?: RunsCreateRunOptionalParams,\n  ) => AgentRunResponse;\n  /** Creates a new run for an agent thread with polling. */\n  createAndPoll: (\n    threadId: string,\n    assistantId: string,\n    options?: RunsCreateRunOptionalParams,\n  ) => PollerLike<OperationState<ThreadRun>, ThreadRun>;\n  /** Creates a new thread and run for an agent. */\n  createThreadAndRun: (\n    assistantId: string,\n    options?: CreateThreadAndRunOptionalParams,\n  ) => AgentRunResponse;\n}\n\nfunction _getRuns(context: AgentsContext) {\n  return {\n    cancel: (threadId: string, runId: string, options?: RunsCancelRunOptionalParams) =>\n      cancelRun(context, threadId, runId, options),\n    submitToolOutputs: (\n      threadId: string,\n      runId: string,\n      toolOutputs: ToolOutput[],\n      options?: RunsSubmitToolOutputsToRunOptionalParams,\n    ) => submitToolOutputsToRun(context, threadId, runId, toolOutputs, options),\n    update: (threadId: string, runId: string, options?: RunsUpdateRunOptionalParams) =>\n      updateRun(context, threadId, runId, options),\n    get: (threadId: string, runId: string, options?: RunsGetRunOptionalParams) =>\n      getRun(context, threadId, runId, options),\n    list: (threadId: string, options?: RunsListRunsOptionalParams) =>\n      listRuns(context, threadId, options),\n    create: (threadId: string, assistantId: string, options?: RunsCreateRunOptionalParams) =>\n      createRun(context, threadId, assistantId, options),\n    createAndPoll: (threadId: string, assistantId: string, options?: RunsCreateRunOptionalParams) =>\n      createRunAndPoll(context, threadId, assistantId, options),\n    createThreadAndRun: (assistantId: string, options?: RunsCreateRunOptionalParams) =>\n      createThreadAndRun(context, assistantId, options),\n  };\n}\n\nexport function _getRunsOperations(context: AgentsContext): RunsOperations {\n  return {\n    ..._getRuns(context),\n  };\n}\n"]}
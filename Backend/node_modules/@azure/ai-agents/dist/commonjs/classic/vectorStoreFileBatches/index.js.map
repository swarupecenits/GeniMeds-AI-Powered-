{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/classic/vectorStoreFileBatches/index.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;AAgFlC,oFAMC;AA5ED,kFAMwD;AAoCxD,SAAS,0BAA0B,CAAC,OAAsB;IACxD,OAAO;QACL,IAAI,EAAE,CACJ,aAAqB,EACrB,OAAe,EACf,OAA2E,EAC3E,EAAE,CAAC,IAAA,6CAA6B,EAAC,OAAO,EAAE,aAAa,EAAE,OAAO,EAAE,OAAO,CAAC;QAC5E,MAAM,EAAE,CACN,aAAqB,EACrB,OAAe,EACf,OAAwE,EACxE,EAAE,CAAC,IAAA,0CAA0B,EAAC,OAAO,EAAE,aAAa,EAAE,OAAO,EAAE,OAAO,CAAC;QACzE,GAAG,EAAE,CACH,aAAqB,EACrB,OAAe,EACf,OAAqE,EACrE,EAAE,CAAC,IAAA,uCAAuB,EAAC,OAAO,EAAE,aAAa,EAAE,OAAO,EAAE,OAAO,CAAC;QACtE,MAAM,EAAE,CACN,aAAqB,EACrB,OAAwE,EACxE,EAAE,CAAC,IAAA,0CAA0B,EAAC,OAAO,EAAE,aAAa,EAAE,OAAO,CAAC;QAChE,aAAa,EAAE,CACb,aAAqB,EACrB,OAAwE,EACxE,EAAE,CAAC,IAAA,iDAAiC,EAAC,OAAO,EAAE,aAAa,EAAE,OAAO,CAAC;KACxE,CAAC;AACJ,CAAC;AAED,SAAgB,oCAAoC,CAClD,OAAsB;IAEtB,yBACK,0BAA0B,CAAC,OAAO,CAAC,EACtC;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { AgentsContext } from \"../../api/agentsContext.js\";\nimport { VectorStoreFileBatch } from \"../../models/models.js\";\nimport {\n  VectorStoreFileBatchesListVectorStoreFileBatchFilesOptionalParams,\n  VectorStoreFileBatchesCancelVectorStoreFileBatchOptionalParams,\n  VectorStoreFileBatchesGetVectorStoreFileBatchOptionalParams,\n  VectorStoreFileBatchesCreateVectorStoreFileBatchOptionalParams,\n} from \"../../api/vectorStoreFileBatches/options.js\";\nimport {\n  listVectorStoreFileBatchFiles,\n  cancelVectorStoreFileBatch,\n  getVectorStoreFileBatch,\n  createVectorStoreFileBatch,\n  createVectorStoreFileBatchAndPoll,\n} from \"../../api/vectorStoreFileBatches/operations.js\";\nimport { OperationState, PollerLike } from \"@azure/core-lro\";\nimport { PagedAsyncIterableIterator } from \"../../static-helpers/pagingHelpers.js\";\n\n/** Interface representing a VectorStoreFileBatches operations. */\nexport interface VectorStoreFileBatchesOperations {\n  /** Returns a list of vector store files in a batch. */\n  list: (\n    vectorStoreId: string,\n    batchId: string,\n    options?: VectorStoreFileBatchesListVectorStoreFileBatchFilesOptionalParams,\n  ) => PagedAsyncIterableIterator<VectorStoreFileBatch>;\n  /** Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible. */\n  cancel: (\n    vectorStoreId: string,\n    batchId: string,\n    options?: VectorStoreFileBatchesCancelVectorStoreFileBatchOptionalParams,\n  ) => Promise<VectorStoreFileBatch>;\n  /** Retrieve a vector store file batch. */\n  get: (\n    vectorStoreId: string,\n    batchId: string,\n    options?: VectorStoreFileBatchesGetVectorStoreFileBatchOptionalParams,\n  ) => Promise<VectorStoreFileBatch>;\n  /** Create a vector store file batch. */\n  create: (\n    vectorStoreId: string,\n    options?: VectorStoreFileBatchesCreateVectorStoreFileBatchOptionalParams,\n  ) => Promise<VectorStoreFileBatch>;\n  /** Create a vector store file batch and poll. */\n  createAndPoll: (\n    vectorStoreId: string,\n    options?: VectorStoreFileBatchesCreateVectorStoreFileBatchOptionalParams,\n  ) => PollerLike<OperationState<VectorStoreFileBatch>, VectorStoreFileBatch>;\n}\n\nfunction _getVectorStoreFileBatches(context: AgentsContext) {\n  return {\n    list: (\n      vectorStoreId: string,\n      batchId: string,\n      options?: VectorStoreFileBatchesListVectorStoreFileBatchFilesOptionalParams,\n    ) => listVectorStoreFileBatchFiles(context, vectorStoreId, batchId, options),\n    cancel: (\n      vectorStoreId: string,\n      batchId: string,\n      options?: VectorStoreFileBatchesCancelVectorStoreFileBatchOptionalParams,\n    ) => cancelVectorStoreFileBatch(context, vectorStoreId, batchId, options),\n    get: (\n      vectorStoreId: string,\n      batchId: string,\n      options?: VectorStoreFileBatchesGetVectorStoreFileBatchOptionalParams,\n    ) => getVectorStoreFileBatch(context, vectorStoreId, batchId, options),\n    create: (\n      vectorStoreId: string,\n      options?: VectorStoreFileBatchesCreateVectorStoreFileBatchOptionalParams,\n    ) => createVectorStoreFileBatch(context, vectorStoreId, options),\n    createAndPoll: (\n      vectorStoreId: string,\n      options?: VectorStoreFileBatchesCreateVectorStoreFileBatchOptionalParams,\n    ) => createVectorStoreFileBatchAndPoll(context, vectorStoreId, options),\n  };\n}\n\nexport function _getVectorStoreFileBatchesOperations(\n  context: AgentsContext,\n): VectorStoreFileBatchesOperations {\n  return {\n    ..._getVectorStoreFileBatches(context),\n  };\n}\n"]}
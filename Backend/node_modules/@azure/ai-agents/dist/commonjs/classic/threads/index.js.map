{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/classic/threads/index.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;AAkDlC,sDAIC;AA3CD,mEAMyC;AAoBzC,SAAS,WAAW,CAAC,OAAsB;IACzC,OAAO;QACL,MAAM,EAAE,CAAC,QAAgB,EAAE,OAA2C,EAAE,EAAE,CACxE,IAAA,4BAAY,EAAC,OAAO,EAAE,QAAQ,EAAE,OAAO,CAAC;QAC1C,MAAM,EAAE,CAAC,QAAgB,EAAE,OAA2C,EAAE,EAAE,CACxE,IAAA,4BAAY,EAAC,OAAO,EAAE,QAAQ,EAAE,OAAO,CAAC;QAC1C,GAAG,EAAE,CAAC,QAAgB,EAAE,OAAwC,EAAE,EAAE,CAClE,IAAA,yBAAS,EAAC,OAAO,EAAE,QAAQ,EAAE,OAAO,CAAC;QACvC,IAAI,EAAE,CAAC,OAA0C,EAAE,EAAE,CAAC,IAAA,2BAAW,EAAC,OAAO,EAAE,OAAO,CAAC;QACnF,MAAM,EAAE,CAAC,OAA2C,EAAE,EAAE,CAAC,IAAA,4BAAY,EAAC,OAAO,EAAE,OAAO,CAAC;KACxF,CAAC;AACJ,CAAC;AAED,SAAgB,qBAAqB,CAAC,OAAsB;IAC1D,yBACK,WAAW,CAAC,OAAO,CAAC,EACvB;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { AgentsContext } from \"../../api/agentsContext.js\";\nimport { AgentThread, ThreadDeletionStatus } from \"../../models/models.js\";\nimport {\n  ThreadsDeleteThreadOptionalParams,\n  ThreadsUpdateThreadOptionalParams,\n  ThreadsGetThreadOptionalParams,\n  ThreadsListThreadsOptionalParams,\n  ThreadsCreateThreadOptionalParams,\n} from \"../../api/threads/options.js\";\nimport {\n  deleteThread,\n  updateThread,\n  getThread,\n  listThreads,\n  createThread,\n} from \"../../api/threads/operations.js\";\nimport { PagedAsyncIterableIterator } from \"../../static-helpers/pagingHelpers.js\";\n\n/** Interface representing a Threads operations. */\nexport interface ThreadsOperations {\n  /** Deletes an existing thread. */\n  delete: (\n    threadId: string,\n    options?: ThreadsDeleteThreadOptionalParams,\n  ) => Promise<ThreadDeletionStatus>;\n  /** Modifies an existing thread. */\n  update: (threadId: string, options?: ThreadsUpdateThreadOptionalParams) => Promise<AgentThread>;\n  /** Gets information about an existing thread. */\n  get: (threadId: string, options?: ThreadsGetThreadOptionalParams) => Promise<AgentThread>;\n  /** Gets a list of threads that were previously created. */\n  list: (options?: ThreadsListThreadsOptionalParams) => PagedAsyncIterableIterator<AgentThread>;\n  /** Creates a new thread. Threads contain messages and can be run by agents. */\n  create: (options?: ThreadsCreateThreadOptionalParams) => Promise<AgentThread>;\n}\n\nfunction _getThreads(context: AgentsContext) {\n  return {\n    delete: (threadId: string, options?: ThreadsDeleteThreadOptionalParams) =>\n      deleteThread(context, threadId, options),\n    update: (threadId: string, options?: ThreadsUpdateThreadOptionalParams) =>\n      updateThread(context, threadId, options),\n    get: (threadId: string, options?: ThreadsGetThreadOptionalParams) =>\n      getThread(context, threadId, options),\n    list: (options?: ThreadsListThreadsOptionalParams) => listThreads(context, options),\n    create: (options?: ThreadsCreateThreadOptionalParams) => createThread(context, options),\n  };\n}\n\nexport function _getThreadsOperations(context: AgentsContext): ThreadsOperations {\n  return {\n    ..._getThreads(context),\n  };\n}\n"]}
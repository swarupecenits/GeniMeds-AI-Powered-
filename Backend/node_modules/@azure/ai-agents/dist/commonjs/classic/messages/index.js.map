{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/classic/messages/index.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;AA+DlC,wDAIC;AAzDD,oEAK0C;AA+B1C,SAAS,YAAY,CAAC,OAAsB;IAC1C,OAAO;QACL,MAAM,EAAE,CAAC,QAAgB,EAAE,SAAiB,EAAE,OAA6C,EAAE,EAAE,CAC7F,IAAA,6BAAa,EAAC,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,OAAO,CAAC;QACtD,GAAG,EAAE,CAAC,QAAgB,EAAE,SAAiB,EAAE,OAA0C,EAAE,EAAE,CACvF,IAAA,0BAAU,EAAC,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,OAAO,CAAC;QACnD,IAAI,EAAE,CAAC,QAAgB,EAAE,OAA4C,EAAE,EAAE,CACvE,IAAA,4BAAY,EAAC,OAAO,EAAE,QAAQ,EAAE,OAAO,CAAC;QAC1C,MAAM,EAAE,CACN,QAAgB,EAChB,IAAiB,EACjB,OAA4B,EAC5B,OAA6C,EAC7C,EAAE,CAAC,IAAA,6BAAa,EAAC,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,CAAC;KAC9D,CAAC;AACJ,CAAC;AAED,SAAgB,sBAAsB,CAAC,OAAsB;IAC3D,yBACK,YAAY,CAAC,OAAO,CAAC,EACxB;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { AgentsContext } from \"../../api/agentsContext.js\";\nimport { MessageRole, MessageInputContent, ThreadMessage } from \"../../models/models.js\";\nimport {\n  MessagesUpdateMessageOptionalParams,\n  MessagesGetMessageOptionalParams,\n  MessagesListMessagesOptionalParams,\n  MessagesCreateMessageOptionalParams,\n} from \"../../api/messages/options.js\";\nimport {\n  updateMessage,\n  getMessage,\n  listMessages,\n  createMessage,\n} from \"../../api/messages/operations.js\";\nimport { PagedAsyncIterableIterator } from \"../../static-helpers/pagingHelpers.js\";\n\n/** Interface representing a Messages operations. */\nexport interface MessagesOperations {\n  /** Modifies an existing message on an existing thread. */\n  update: (\n    threadId: string,\n    messageId: string,\n    options?: MessagesUpdateMessageOptionalParams,\n  ) => Promise<ThreadMessage>;\n  /** Retrieves an existing message. */\n  get: (\n    threadId: string,\n    messageId: string,\n    options?: MessagesGetMessageOptionalParams,\n  ) => Promise<ThreadMessage>;\n  /** Gets a list of messages that exist on a thread. */\n  list: (\n    threadId: string,\n    options?: MessagesListMessagesOptionalParams,\n  ) => PagedAsyncIterableIterator<ThreadMessage>;\n  /** Creates a new message on a specified thread. */\n  create: (\n    threadId: string,\n    role: MessageRole,\n    content: MessageInputContent,\n    options?: MessagesCreateMessageOptionalParams,\n  ) => Promise<ThreadMessage>;\n}\n\nfunction _getMessages(context: AgentsContext) {\n  return {\n    update: (threadId: string, messageId: string, options?: MessagesUpdateMessageOptionalParams) =>\n      updateMessage(context, threadId, messageId, options),\n    get: (threadId: string, messageId: string, options?: MessagesGetMessageOptionalParams) =>\n      getMessage(context, threadId, messageId, options),\n    list: (threadId: string, options?: MessagesListMessagesOptionalParams) =>\n      listMessages(context, threadId, options),\n    create: (\n      threadId: string,\n      role: MessageRole,\n      content: MessageInputContent,\n      options?: MessagesCreateMessageOptionalParams,\n    ) => createMessage(context, threadId, role, content, options),\n  };\n}\n\nexport function _getMessagesOperations(context: AgentsContext): MessagesOperations {\n  return {\n    ..._getMessages(context),\n  };\n}\n"]}
"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.AgentsClient = void 0;
const index_js_1 = require("./api/index.js");
const operations_js_1 = require("./api/operations.js");
const index_js_2 = require("./classic/vectorStoreFileBatches/index.js");
const index_js_3 = require("./classic/vectorStoreFiles/index.js");
const index_js_4 = require("./classic/vectorStores/index.js");
const index_js_5 = require("./classic/files/index.js");
const index_js_6 = require("./classic/runSteps/index.js");
const index_js_7 = require("./classic/runs/index.js");
const index_js_8 = require("./classic/messages/index.js");
const index_js_9 = require("./classic/threads/index.js");
class AgentsClient {
    constructor(endpointParam, credential, options = {}) {
        var _a;
        const prefixFromOptions = (_a = options === null || options === void 0 ? void 0 : options.userAgentOptions) === null || _a === void 0 ? void 0 : _a.userAgentPrefix;
        const userAgentPrefix = prefixFromOptions
            ? `${prefixFromOptions} azsdk-js-client`
            : `azsdk-js-client`;
        this._client = (0, index_js_1.createAgents)(endpointParam, credential, Object.assign(Object.assign({}, options), { userAgentOptions: { userAgentPrefix } }));
        this.pipeline = this._client.pipeline;
        this.vectorStoreFileBatches = (0, index_js_2._getVectorStoreFileBatchesOperations)(this._client);
        this.vectorStoreFiles = (0, index_js_3._getVectorStoreFilesOperations)(this._client);
        this.vectorStores = (0, index_js_4._getVectorStoresOperations)(this._client);
        this.files = (0, index_js_5._getFilesOperations)(this._client);
        this.runSteps = (0, index_js_6._getRunStepsOperations)(this._client);
        this.runs = (0, index_js_7._getRunsOperations)(this._client);
        this.messages = (0, index_js_8._getMessagesOperations)(this._client);
        this.threads = (0, index_js_9._getThreadsOperations)(this._client);
    }
    /** Deletes an agent. */
    deleteAgent(assistantId, options = { requestOptions: {} }) {
        return (0, operations_js_1.deleteAgent)(this._client, assistantId, options);
    }
    /** Modifies an existing agent. */
    updateAgent(assistantId, options = { requestOptions: {} }) {
        return (0, operations_js_1.updateAgent)(this._client, assistantId, options);
    }
    /** Retrieves an existing agent. */
    getAgent(assistantId, options = { requestOptions: {} }) {
        return (0, operations_js_1.getAgent)(this._client, assistantId, options);
    }
    /** Gets a list of agents that were previously created. */
    listAgents(options = { requestOptions: {} }) {
        return (0, operations_js_1.listAgents)(this._client, options);
    }
    /** Creates a new agent. */
    createAgent(model, options = { requestOptions: {} }) {
        return (0, operations_js_1.createAgent)(this._client, model, options);
    }
}
exports.AgentsClient = AgentsClient;
//# sourceMappingURL=agentsClient.js.map
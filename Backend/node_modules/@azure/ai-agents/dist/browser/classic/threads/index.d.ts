import { AgentsContext } from "../../api/agentsContext.js";
import { AgentThread, ThreadDeletionStatus } from "../../models/models.js";
import { ThreadsDeleteThreadOptionalParams, ThreadsUpdateThreadOptionalParams, ThreadsGetThreadOptionalParams, ThreadsListThreadsOptionalParams, ThreadsCreateThreadOptionalParams } from "../../api/threads/options.js";
import { PagedAsyncIterableIterator } from "../../static-helpers/pagingHelpers.js";
/** Interface representing a Threads operations. */
export interface ThreadsOperations {
    /** Deletes an existing thread. */
    delete: (threadId: string, options?: ThreadsDeleteThreadOptionalParams) => Promise<ThreadDeletionStatus>;
    /** Modifies an existing thread. */
    update: (threadId: string, options?: ThreadsUpdateThreadOptionalParams) => Promise<AgentThread>;
    /** Gets information about an existing thread. */
    get: (threadId: string, options?: ThreadsGetThreadOptionalParams) => Promise<AgentThread>;
    /** Gets a list of threads that were previously created. */
    list: (options?: ThreadsListThreadsOptionalParams) => PagedAsyncIterableIterator<AgentThread>;
    /** Creates a new thread. Threads contain messages and can be run by agents. */
    create: (options?: ThreadsCreateThreadOptionalParams) => Promise<AgentThread>;
}
export declare function _getThreadsOperations(context: AgentsContext): ThreadsOperations;
//# sourceMappingURL=index.d.ts.map
{"version":3,"file":"operations.js","sourceRoot":"","sources":["../../../../src/api/runs/operations.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { AgentsContext as Client } from \"../index.js\";\nimport type { ThreadRun, _AgentsPagedResultThreadRun, ToolOutput } from \"../../models/models.js\";\nimport {\n  toolDefinitionUnionArraySerializer,\n  agentsResponseFormatOptionSerializer,\n  threadMessageOptionsArraySerializer,\n  truncationObjectSerializer,\n  agentsToolChoiceOptionSerializer,\n  threadRunDeserializer,\n  _agentsPagedResultThreadRunDeserializer,\n  toolOutputArraySerializer,\n} from \"../../models/models.js\";\nimport type {\n  RunsCancelRunOptionalParams,\n  RunsSubmitToolOutputsToRunOptionalParams,\n  RunsUpdateRunOptionalParams,\n  RunsGetRunOptionalParams,\n  RunsListRunsOptionalParams,\n  RunsCreateRunOptionalParams,\n} from \"./options.js\";\nimport type { PagedAsyncIterableIterator } from \"../../static-helpers/pagingHelpers.js\";\nimport { buildPagedAsyncIterator } from \"../../static-helpers/pagingHelpers.js\";\nimport { expandUrlTemplate } from \"../../static-helpers/urlTemplate.js\";\nimport type { StreamableMethod, PathUncheckedResponse } from \"@azure-rest/core-client\";\nimport { createRestError, operationOptionsToRequestParameters } from \"@azure-rest/core-client\";\nimport type { AgentRunResponse, AgentEventMessageStream } from \"../../models/streamingModels.js\";\nimport { createRunStreaming, submitToolOutputsToRunStreaming } from \"../operations.js\";\nimport type { OperationState, OperationStatus, PollerLike } from \"@azure/core-lro\";\nimport { createPoller } from \"../poller.js\";\n\nexport function _cancelRunSend(\n  context: Client,\n  threadId: string,\n  runId: string,\n  options: RunsCancelRunOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  const path = expandUrlTemplate(\n    \"/threads/{threadId}/runs/{runId}/cancel{?api%2Dversion}\",\n    {\n      threadId: threadId,\n      runId: runId,\n      \"api%2Dversion\": context.apiVersion,\n    },\n    {\n      allowReserved: options?.requestOptions?.skipUrlEncoding,\n    },\n  );\n  return context.path(path).post({\n    ...operationOptionsToRequestParameters(options),\n    headers: {\n      accept: \"application/json\",\n      ...options.requestOptions?.headers,\n    },\n  });\n}\n\nexport async function _cancelRunDeserialize(result: PathUncheckedResponse): Promise<ThreadRun> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    throw createRestError(result);\n  }\n\n  return threadRunDeserializer(result.body);\n}\n\n/** Cancels a run of an in‐progress thread. */\nexport async function cancelRun(\n  context: Client,\n  threadId: string,\n  runId: string,\n  options: RunsCancelRunOptionalParams = { requestOptions: {} },\n): Promise<ThreadRun> {\n  const result = await _cancelRunSend(context, threadId, runId, options);\n  return _cancelRunDeserialize(result);\n}\n\nexport function _submitToolOutputsToRunSend(\n  context: Client,\n  threadId: string,\n  runId: string,\n  toolOutputs: ToolOutput[],\n  options: RunsSubmitToolOutputsToRunOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  const path = expandUrlTemplate(\n    \"/threads/{threadId}/runs/{runId}/submit_tool_outputs{?api%2Dversion}\",\n    {\n      threadId: threadId,\n      runId: runId,\n      \"api%2Dversion\": context.apiVersion,\n    },\n    {\n      allowReserved: options?.requestOptions?.skipUrlEncoding,\n    },\n  );\n  return context.path(path).post({\n    ...operationOptionsToRequestParameters(options),\n    contentType: \"application/json\",\n    headers: {\n      accept: \"application/json\",\n      ...options.requestOptions?.headers,\n    },\n    body: {\n      tool_outputs: toolOutputArraySerializer(toolOutputs),\n      stream: false,\n    },\n  });\n}\n\nexport async function _submitToolOutputsToRunDeserialize(\n  result: PathUncheckedResponse,\n): Promise<ThreadRun> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    throw createRestError(result);\n  }\n\n  return threadRunDeserializer(result.body);\n}\n\n/** Submits outputs from tools as requested by tool calls in a run. */\nexport function submitToolOutputsToRun(\n  context: Client,\n  threadId: string,\n  runId: string,\n  toolOutputs: ToolOutput[],\n  options: RunsSubmitToolOutputsToRunOptionalParams = { requestOptions: {} },\n): AgentRunResponse {\n  async function executeSubmitToolOutputsToRun(): Promise<ThreadRun> {\n    const result = await _submitToolOutputsToRunSend(\n      context,\n      threadId,\n      runId,\n      toolOutputs,\n      options,\n    );\n    return _submitToolOutputsToRunDeserialize(result);\n  }\n\n  return {\n    then: function (onFulfilled, onRejected) {\n      return executeSubmitToolOutputsToRun().then(onFulfilled, onRejected).catch(onRejected);\n    },\n    async stream(): Promise<AgentEventMessageStream> {\n      return submitToolOutputsToRunStreaming(context, threadId, runId, options);\n    },\n  };\n}\n\nexport function _updateRunSend(\n  context: Client,\n  threadId: string,\n  runId: string,\n  options: RunsUpdateRunOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  const path = expandUrlTemplate(\n    \"/threads/{threadId}/runs/{runId}{?api%2Dversion}\",\n    {\n      threadId: threadId,\n      runId: runId,\n      \"api%2Dversion\": context.apiVersion,\n    },\n    {\n      allowReserved: options?.requestOptions?.skipUrlEncoding,\n    },\n  );\n  return context.path(path).post({\n    ...operationOptionsToRequestParameters(options),\n    contentType: \"application/json\",\n    headers: {\n      accept: \"application/json\",\n      ...options.requestOptions?.headers,\n    },\n    body: { metadata: options?.metadata },\n  });\n}\n\nexport async function _updateRunDeserialize(result: PathUncheckedResponse): Promise<ThreadRun> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    throw createRestError(result);\n  }\n\n  return threadRunDeserializer(result.body);\n}\n\n/** Modifies an existing thread run. */\nexport async function updateRun(\n  context: Client,\n  threadId: string,\n  runId: string,\n  options: RunsUpdateRunOptionalParams = { requestOptions: {} },\n): Promise<ThreadRun> {\n  const result = await _updateRunSend(context, threadId, runId, options);\n  return _updateRunDeserialize(result);\n}\n\nexport function _getRunSend(\n  context: Client,\n  threadId: string,\n  runId: string,\n  options: RunsGetRunOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  const path = expandUrlTemplate(\n    \"/threads/{threadId}/runs/{runId}{?api%2Dversion}\",\n    {\n      threadId: threadId,\n      runId: runId,\n      \"api%2Dversion\": context.apiVersion,\n    },\n    {\n      allowReserved: options?.requestOptions?.skipUrlEncoding,\n    },\n  );\n  return context.path(path).get({\n    ...operationOptionsToRequestParameters(options),\n    headers: {\n      accept: \"application/json\",\n      ...options.requestOptions?.headers,\n    },\n  });\n}\n\nexport async function _getRunDeserialize(result: PathUncheckedResponse): Promise<ThreadRun> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    throw createRestError(result);\n  }\n\n  return threadRunDeserializer(result.body);\n}\n\n/** Gets an existing run from an existing thread. */\nexport async function getRun(\n  context: Client,\n  threadId: string,\n  runId: string,\n  options: RunsGetRunOptionalParams = { requestOptions: {} },\n): Promise<ThreadRun> {\n  const result = await _getRunSend(context, threadId, runId, options);\n  return _getRunDeserialize(result);\n}\n\nexport function _listRunsSend(\n  context: Client,\n  threadId: string,\n  options: RunsListRunsOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  const path = expandUrlTemplate(\n    \"/threads/{threadId}/runs{?api%2Dversion,limit,order,after,before}\",\n    {\n      threadId: threadId,\n      \"api%2Dversion\": context.apiVersion,\n      limit: options?.limit,\n      order: options?.order,\n      after: options?.after,\n      before: options?.before,\n    },\n    {\n      allowReserved: options?.requestOptions?.skipUrlEncoding,\n    },\n  );\n  return context.path(path).get({\n    ...operationOptionsToRequestParameters(options),\n    headers: {\n      accept: \"application/json\",\n      ...options.requestOptions?.headers,\n    },\n  });\n}\n\nexport async function _listRunsDeserialize(\n  result: PathUncheckedResponse,\n): Promise<_AgentsPagedResultThreadRun> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    throw createRestError(result);\n  }\n\n  return _agentsPagedResultThreadRunDeserializer(result.body);\n}\n\n/** Gets a list of runs for a specified thread. */\nexport function listRuns(\n  context: Client,\n  threadId: string,\n  options: RunsListRunsOptionalParams = { requestOptions: {} },\n): PagedAsyncIterableIterator<ThreadRun> {\n  return buildPagedAsyncIterator(\n    context,\n    () => _listRunsSend(context, threadId, options),\n    _listRunsDeserialize,\n    [\"200\"],\n    { itemName: \"data\" },\n  );\n}\n\nexport function _createRunSend(\n  context: Client,\n  threadId: string,\n  assistantId: string,\n  options: RunsCreateRunOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  const path = expandUrlTemplate(\n    \"/threads/{threadId}/runs{?api%2Dversion,include%5B%5D}\",\n    {\n      threadId: threadId,\n      \"api%2Dversion\": context.apiVersion,\n      \"include%5B%5D\": !options?.include\n        ? options?.include\n        : options?.include.map((p: any) => {\n            return p;\n          }),\n    },\n    {\n      allowReserved: options?.requestOptions?.skipUrlEncoding,\n    },\n  );\n  return context.path(path).post({\n    ...operationOptionsToRequestParameters(options),\n    contentType: \"application/json\",\n    headers: {\n      accept: \"application/json\",\n      ...options.requestOptions?.headers,\n    },\n    body: {\n      assistant_id: assistantId,\n      model: options?.model,\n      instructions: options?.instructions,\n      additional_instructions: options?.additionalInstructions,\n      additional_messages: !options?.additionalMessages\n        ? options?.additionalMessages\n        : threadMessageOptionsArraySerializer(options?.additionalMessages),\n      tools: !options?.tools ? options?.tools : toolDefinitionUnionArraySerializer(options?.tools),\n      stream: options?.stream,\n      temperature: options?.temperature,\n      top_p: options?.topP,\n      max_prompt_tokens: options?.maxPromptTokens,\n      max_completion_tokens: options?.maxCompletionTokens,\n      truncation_strategy: !options?.truncationStrategy\n        ? options?.truncationStrategy\n        : truncationObjectSerializer(options?.truncationStrategy),\n      tool_choice: !options?.toolChoice\n        ? options?.toolChoice\n        : agentsToolChoiceOptionSerializer(options?.toolChoice),\n      response_format: !options?.responseFormat\n        ? options?.responseFormat\n        : agentsResponseFormatOptionSerializer(options?.responseFormat),\n      parallel_tool_calls: options?.parallelToolCalls,\n      metadata: options?.metadata,\n    },\n  });\n}\n\nexport async function _createRunDeserialize(result: PathUncheckedResponse): Promise<ThreadRun> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    throw createRestError(result);\n  }\n\n  return threadRunDeserializer(result.body);\n}\n\n/** Creates a new run for an agent thread. */\nexport function createRun(\n  context: Client,\n  threadId: string,\n  assistantId: string,\n  options: RunsCreateRunOptionalParams = { requestOptions: {} },\n): AgentRunResponse {\n  async function executeCreateRun(): Promise<ThreadRun> {\n    const result = await _createRunSend(context, threadId, assistantId, options);\n    return _createRunDeserialize(result);\n  }\n\n  return {\n    then: function (onFulfilled, onRejected) {\n      return executeCreateRun().then(onFulfilled, onRejected).catch(onRejected);\n    },\n    async stream(): Promise<AgentEventMessageStream> {\n      return createRunStreaming(context, assistantId, threadId, options);\n    },\n  };\n}\n\nexport function createRunAndPoll(\n  context: Client,\n  threadId: string,\n  assistantId: string,\n  options: RunsCreateRunOptionalParams = { requestOptions: {} },\n): PollerLike<OperationState<ThreadRun>, ThreadRun> {\n  return createPoller<ThreadRun>({\n    initOperation: async () => {\n      const runResponse = createRun(context, threadId, assistantId, options);\n      return runResponse;\n    },\n    pollOperation: async (currentRun: ThreadRun) => {\n      return getRun(context, threadId, currentRun.id, options);\n    },\n    getOperationStatus: getLroOperationStatus,\n    intervalInMs: options.pollingOptions?.intervalInMs,\n  });\n}\n\nfunction getLroOperationStatus(result: ThreadRun): OperationStatus {\n  switch (result.status) {\n    case \"queued\":\n      return \"notStarted\";\n    case \"in_progress\":\n    case \"requires_action\":\n      return \"running\";\n    case \"completed\":\n      return \"succeeded\";\n    case \"cancelled\":\n    case \"expired\":\n    default:\n      return \"failed\";\n  }\n}\n"]}
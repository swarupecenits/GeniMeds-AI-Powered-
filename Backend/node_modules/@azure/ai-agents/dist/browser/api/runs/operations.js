// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { toolDefinitionUnionArraySerializer, agentsResponseFormatOptionSerializer, threadMessageOptionsArraySerializer, truncationObjectSerializer, agentsToolChoiceOptionSerializer, threadRunDeserializer, _agentsPagedResultThreadRunDeserializer, toolOutputArraySerializer, } from "../../models/models.js";
import { buildPagedAsyncIterator } from "../../static-helpers/pagingHelpers.js";
import { expandUrlTemplate } from "../../static-helpers/urlTemplate.js";
import { createRestError, operationOptionsToRequestParameters } from "@azure-rest/core-client";
import { createRunStreaming, submitToolOutputsToRunStreaming } from "../operations.js";
import { createPoller } from "../poller.js";
export function _cancelRunSend(context, threadId, runId, options = { requestOptions: {} }) {
    var _a, _b;
    const path = expandUrlTemplate("/threads/{threadId}/runs/{runId}/cancel{?api%2Dversion}", {
        threadId: threadId,
        runId: runId,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: (_a = options === null || options === void 0 ? void 0 : options.requestOptions) === null || _a === void 0 ? void 0 : _a.skipUrlEncoding,
    });
    return context.path(path).post(Object.assign(Object.assign({}, operationOptionsToRequestParameters(options)), { headers: Object.assign({ accept: "application/json" }, (_b = options.requestOptions) === null || _b === void 0 ? void 0 : _b.headers) }));
}
export async function _cancelRunDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        throw createRestError(result);
    }
    return threadRunDeserializer(result.body);
}
/** Cancels a run of an in‐progress thread. */
export async function cancelRun(context, threadId, runId, options = { requestOptions: {} }) {
    const result = await _cancelRunSend(context, threadId, runId, options);
    return _cancelRunDeserialize(result);
}
export function _submitToolOutputsToRunSend(context, threadId, runId, toolOutputs, options = { requestOptions: {} }) {
    var _a, _b;
    const path = expandUrlTemplate("/threads/{threadId}/runs/{runId}/submit_tool_outputs{?api%2Dversion}", {
        threadId: threadId,
        runId: runId,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: (_a = options === null || options === void 0 ? void 0 : options.requestOptions) === null || _a === void 0 ? void 0 : _a.skipUrlEncoding,
    });
    return context.path(path).post(Object.assign(Object.assign({}, operationOptionsToRequestParameters(options)), { contentType: "application/json", headers: Object.assign({ accept: "application/json" }, (_b = options.requestOptions) === null || _b === void 0 ? void 0 : _b.headers), body: {
            tool_outputs: toolOutputArraySerializer(toolOutputs),
            stream: false,
        } }));
}
export async function _submitToolOutputsToRunDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        throw createRestError(result);
    }
    return threadRunDeserializer(result.body);
}
/** Submits outputs from tools as requested by tool calls in a run. */
export function submitToolOutputsToRun(context, threadId, runId, toolOutputs, options = { requestOptions: {} }) {
    async function executeSubmitToolOutputsToRun() {
        const result = await _submitToolOutputsToRunSend(context, threadId, runId, toolOutputs, options);
        return _submitToolOutputsToRunDeserialize(result);
    }
    return {
        then: function (onFulfilled, onRejected) {
            return executeSubmitToolOutputsToRun().then(onFulfilled, onRejected).catch(onRejected);
        },
        async stream() {
            return submitToolOutputsToRunStreaming(context, threadId, runId, options);
        },
    };
}
export function _updateRunSend(context, threadId, runId, options = { requestOptions: {} }) {
    var _a, _b;
    const path = expandUrlTemplate("/threads/{threadId}/runs/{runId}{?api%2Dversion}", {
        threadId: threadId,
        runId: runId,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: (_a = options === null || options === void 0 ? void 0 : options.requestOptions) === null || _a === void 0 ? void 0 : _a.skipUrlEncoding,
    });
    return context.path(path).post(Object.assign(Object.assign({}, operationOptionsToRequestParameters(options)), { contentType: "application/json", headers: Object.assign({ accept: "application/json" }, (_b = options.requestOptions) === null || _b === void 0 ? void 0 : _b.headers), body: { metadata: options === null || options === void 0 ? void 0 : options.metadata } }));
}
export async function _updateRunDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        throw createRestError(result);
    }
    return threadRunDeserializer(result.body);
}
/** Modifies an existing thread run. */
export async function updateRun(context, threadId, runId, options = { requestOptions: {} }) {
    const result = await _updateRunSend(context, threadId, runId, options);
    return _updateRunDeserialize(result);
}
export function _getRunSend(context, threadId, runId, options = { requestOptions: {} }) {
    var _a, _b;
    const path = expandUrlTemplate("/threads/{threadId}/runs/{runId}{?api%2Dversion}", {
        threadId: threadId,
        runId: runId,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: (_a = options === null || options === void 0 ? void 0 : options.requestOptions) === null || _a === void 0 ? void 0 : _a.skipUrlEncoding,
    });
    return context.path(path).get(Object.assign(Object.assign({}, operationOptionsToRequestParameters(options)), { headers: Object.assign({ accept: "application/json" }, (_b = options.requestOptions) === null || _b === void 0 ? void 0 : _b.headers) }));
}
export async function _getRunDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        throw createRestError(result);
    }
    return threadRunDeserializer(result.body);
}
/** Gets an existing run from an existing thread. */
export async function getRun(context, threadId, runId, options = { requestOptions: {} }) {
    const result = await _getRunSend(context, threadId, runId, options);
    return _getRunDeserialize(result);
}
export function _listRunsSend(context, threadId, options = { requestOptions: {} }) {
    var _a, _b;
    const path = expandUrlTemplate("/threads/{threadId}/runs{?api%2Dversion,limit,order,after,before}", {
        threadId: threadId,
        "api%2Dversion": context.apiVersion,
        limit: options === null || options === void 0 ? void 0 : options.limit,
        order: options === null || options === void 0 ? void 0 : options.order,
        after: options === null || options === void 0 ? void 0 : options.after,
        before: options === null || options === void 0 ? void 0 : options.before,
    }, {
        allowReserved: (_a = options === null || options === void 0 ? void 0 : options.requestOptions) === null || _a === void 0 ? void 0 : _a.skipUrlEncoding,
    });
    return context.path(path).get(Object.assign(Object.assign({}, operationOptionsToRequestParameters(options)), { headers: Object.assign({ accept: "application/json" }, (_b = options.requestOptions) === null || _b === void 0 ? void 0 : _b.headers) }));
}
export async function _listRunsDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        throw createRestError(result);
    }
    return _agentsPagedResultThreadRunDeserializer(result.body);
}
/** Gets a list of runs for a specified thread. */
export function listRuns(context, threadId, options = { requestOptions: {} }) {
    return buildPagedAsyncIterator(context, () => _listRunsSend(context, threadId, options), _listRunsDeserialize, ["200"], { itemName: "data" });
}
export function _createRunSend(context, threadId, assistantId, options = { requestOptions: {} }) {
    var _a, _b;
    const path = expandUrlTemplate("/threads/{threadId}/runs{?api%2Dversion,include%5B%5D}", {
        threadId: threadId,
        "api%2Dversion": context.apiVersion,
        "include%5B%5D": !(options === null || options === void 0 ? void 0 : options.include)
            ? options === null || options === void 0 ? void 0 : options.include
            : options === null || options === void 0 ? void 0 : options.include.map((p) => {
                return p;
            }),
    }, {
        allowReserved: (_a = options === null || options === void 0 ? void 0 : options.requestOptions) === null || _a === void 0 ? void 0 : _a.skipUrlEncoding,
    });
    return context.path(path).post(Object.assign(Object.assign({}, operationOptionsToRequestParameters(options)), { contentType: "application/json", headers: Object.assign({ accept: "application/json" }, (_b = options.requestOptions) === null || _b === void 0 ? void 0 : _b.headers), body: {
            assistant_id: assistantId,
            model: options === null || options === void 0 ? void 0 : options.model,
            instructions: options === null || options === void 0 ? void 0 : options.instructions,
            additional_instructions: options === null || options === void 0 ? void 0 : options.additionalInstructions,
            additional_messages: !(options === null || options === void 0 ? void 0 : options.additionalMessages)
                ? options === null || options === void 0 ? void 0 : options.additionalMessages
                : threadMessageOptionsArraySerializer(options === null || options === void 0 ? void 0 : options.additionalMessages),
            tools: !(options === null || options === void 0 ? void 0 : options.tools) ? options === null || options === void 0 ? void 0 : options.tools : toolDefinitionUnionArraySerializer(options === null || options === void 0 ? void 0 : options.tools),
            stream: options === null || options === void 0 ? void 0 : options.stream,
            temperature: options === null || options === void 0 ? void 0 : options.temperature,
            top_p: options === null || options === void 0 ? void 0 : options.topP,
            max_prompt_tokens: options === null || options === void 0 ? void 0 : options.maxPromptTokens,
            max_completion_tokens: options === null || options === void 0 ? void 0 : options.maxCompletionTokens,
            truncation_strategy: !(options === null || options === void 0 ? void 0 : options.truncationStrategy)
                ? options === null || options === void 0 ? void 0 : options.truncationStrategy
                : truncationObjectSerializer(options === null || options === void 0 ? void 0 : options.truncationStrategy),
            tool_choice: !(options === null || options === void 0 ? void 0 : options.toolChoice)
                ? options === null || options === void 0 ? void 0 : options.toolChoice
                : agentsToolChoiceOptionSerializer(options === null || options === void 0 ? void 0 : options.toolChoice),
            response_format: !(options === null || options === void 0 ? void 0 : options.responseFormat)
                ? options === null || options === void 0 ? void 0 : options.responseFormat
                : agentsResponseFormatOptionSerializer(options === null || options === void 0 ? void 0 : options.responseFormat),
            parallel_tool_calls: options === null || options === void 0 ? void 0 : options.parallelToolCalls,
            metadata: options === null || options === void 0 ? void 0 : options.metadata,
        } }));
}
export async function _createRunDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        throw createRestError(result);
    }
    return threadRunDeserializer(result.body);
}
/** Creates a new run for an agent thread. */
export function createRun(context, threadId, assistantId, options = { requestOptions: {} }) {
    async function executeCreateRun() {
        const result = await _createRunSend(context, threadId, assistantId, options);
        return _createRunDeserialize(result);
    }
    return {
        then: function (onFulfilled, onRejected) {
            return executeCreateRun().then(onFulfilled, onRejected).catch(onRejected);
        },
        async stream() {
            return createRunStreaming(context, assistantId, threadId, options);
        },
    };
}
export function createRunAndPoll(context, threadId, assistantId, options = { requestOptions: {} }) {
    var _a;
    return createPoller({
        initOperation: async () => {
            const runResponse = createRun(context, threadId, assistantId, options);
            return runResponse;
        },
        pollOperation: async (currentRun) => {
            return getRun(context, threadId, currentRun.id, options);
        },
        getOperationStatus: getLroOperationStatus,
        intervalInMs: (_a = options.pollingOptions) === null || _a === void 0 ? void 0 : _a.intervalInMs,
    });
}
function getLroOperationStatus(result) {
    switch (result.status) {
        case "queued":
            return "notStarted";
        case "in_progress":
        case "requires_action":
            return "running";
        case "completed":
            return "succeeded";
        case "cancelled":
        case "expired":
        default:
            return "failed";
    }
}
//# sourceMappingURL=operations.js.map
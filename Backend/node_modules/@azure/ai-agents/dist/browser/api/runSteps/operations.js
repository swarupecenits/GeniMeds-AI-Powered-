// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { runStepDeserializer, _agentsPagedResultRunStepDeserializer, } from "../../models/models.js";
import { buildPagedAsyncIterator, } from "../../static-helpers/pagingHelpers.js";
import { expandUrlTemplate } from "../../static-helpers/urlTemplate.js";
import { createRestError, operationOptionsToRequestParameters, } from "@azure-rest/core-client";
export function _listRunStepsSend(context, threadId, runId, options = { requestOptions: {} }) {
    var _a, _b;
    const path = expandUrlTemplate("/threads/{threadId}/runs/{runId}/steps{?include%5B%5D,api%2Dversion,limit,order,after,before}", {
        threadId: threadId,
        runId: runId,
        "include%5B%5D": !(options === null || options === void 0 ? void 0 : options.include)
            ? options === null || options === void 0 ? void 0 : options.include
            : options === null || options === void 0 ? void 0 : options.include.map((p) => {
                return p;
            }),
        "api%2Dversion": context.apiVersion,
        limit: options === null || options === void 0 ? void 0 : options.limit,
        order: options === null || options === void 0 ? void 0 : options.order,
        after: options === null || options === void 0 ? void 0 : options.after,
        before: options === null || options === void 0 ? void 0 : options.before,
    }, {
        allowReserved: (_a = options === null || options === void 0 ? void 0 : options.requestOptions) === null || _a === void 0 ? void 0 : _a.skipUrlEncoding,
    });
    return context.path(path).get(Object.assign(Object.assign({}, operationOptionsToRequestParameters(options)), { headers: Object.assign({ accept: "application/json" }, (_b = options.requestOptions) === null || _b === void 0 ? void 0 : _b.headers) }));
}
export async function _listRunStepsDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        throw createRestError(result);
    }
    return _agentsPagedResultRunStepDeserializer(result.body);
}
/** Gets a list of run steps from a thread run. */
export function listRunSteps(context, threadId, runId, options = { requestOptions: {} }) {
    return buildPagedAsyncIterator(context, () => _listRunStepsSend(context, threadId, runId, options), _listRunStepsDeserialize, ["200"], { itemName: "data" });
}
export function _getRunStepSend(context, threadId, runId, stepId, options = { requestOptions: {} }) {
    var _a, _b;
    const path = expandUrlTemplate("/threads/{threadId}/runs/{runId}/steps/{stepId}{?api%2Dversion,include%5B%5D}", {
        threadId: threadId,
        runId: runId,
        stepId: stepId,
        "api%2Dversion": context.apiVersion,
        "include%5B%5D": !(options === null || options === void 0 ? void 0 : options.include)
            ? options === null || options === void 0 ? void 0 : options.include
            : options === null || options === void 0 ? void 0 : options.include.map((p) => {
                return p;
            }),
    }, {
        allowReserved: (_a = options === null || options === void 0 ? void 0 : options.requestOptions) === null || _a === void 0 ? void 0 : _a.skipUrlEncoding,
    });
    return context.path(path).get(Object.assign(Object.assign({}, operationOptionsToRequestParameters(options)), { headers: Object.assign({ accept: "application/json" }, (_b = options.requestOptions) === null || _b === void 0 ? void 0 : _b.headers) }));
}
export async function _getRunStepDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        throw createRestError(result);
    }
    return runStepDeserializer(result.body);
}
/** Retrieves a single run step from a thread run. */
export async function getRunStep(context, threadId, runId, stepId, options = { requestOptions: {} }) {
    const result = await _getRunStepSend(context, threadId, runId, stepId, options);
    return _getRunStepDeserialize(result);
}
//# sourceMappingURL=operations.js.map
import { AgentsContext as Client } from "../index.js";
import { MessageRole, MessageInputContent, ThreadMessage, _AgentsPagedResultThreadMessage } from "../../models/models.js";
import { MessagesUpdateMessageOptionalParams, MessagesGetMessageOptionalParams, MessagesListMessagesOptionalParams, MessagesCreateMessageOptionalParams } from "./options.js";
import { PagedAsyncIterableIterator } from "../../static-helpers/pagingHelpers.js";
import { StreamableMethod, PathUncheckedResponse } from "@azure-rest/core-client";
export declare function _updateMessageSend(context: Client, threadId: string, messageId: string, options?: MessagesUpdateMessageOptionalParams): StreamableMethod;
export declare function _updateMessageDeserialize(result: PathUncheckedResponse): Promise<ThreadMessage>;
/** Modifies an existing message on an existing thread. */
export declare function updateMessage(context: Client, threadId: string, messageId: string, options?: MessagesUpdateMessageOptionalParams): Promise<ThreadMessage>;
export declare function _getMessageSend(context: Client, threadId: string, messageId: string, options?: MessagesGetMessageOptionalParams): StreamableMethod;
export declare function _getMessageDeserialize(result: PathUncheckedResponse): Promise<ThreadMessage>;
/** Retrieves an existing message. */
export declare function getMessage(context: Client, threadId: string, messageId: string, options?: MessagesGetMessageOptionalParams): Promise<ThreadMessage>;
export declare function _listMessagesSend(context: Client, threadId: string, options?: MessagesListMessagesOptionalParams): StreamableMethod;
export declare function _listMessagesDeserialize(result: PathUncheckedResponse): Promise<_AgentsPagedResultThreadMessage>;
/** Gets a list of messages that exist on a thread. */
export declare function listMessages(context: Client, threadId: string, options?: MessagesListMessagesOptionalParams): PagedAsyncIterableIterator<ThreadMessage>;
export declare function _createMessageSend(context: Client, threadId: string, role: MessageRole, content: MessageInputContent, options?: MessagesCreateMessageOptionalParams): StreamableMethod;
export declare function _createMessageDeserialize(result: PathUncheckedResponse): Promise<ThreadMessage>;
/** Creates a new message on a specified thread. */
export declare function createMessage(context: Client, threadId: string, role: MessageRole, content: MessageInputContent, options?: MessagesCreateMessageOptionalParams): Promise<ThreadMessage>;
//# sourceMappingURL=operations.d.ts.map
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { messageInputContentSerializer, messageAttachmentArraySerializer, threadMessageDeserializer, _agentsPagedResultThreadMessageDeserializer, } from "../../models/models.js";
import { buildPagedAsyncIterator, } from "../../static-helpers/pagingHelpers.js";
import { expandUrlTemplate } from "../../static-helpers/urlTemplate.js";
import { createRestError, operationOptionsToRequestParameters, } from "@azure-rest/core-client";
export function _updateMessageSend(context, threadId, messageId, options = { requestOptions: {} }) {
    var _a, _b;
    const path = expandUrlTemplate("/threads/{threadId}/messages/{messageId}{?api%2Dversion}", {
        threadId: threadId,
        messageId: messageId,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: (_a = options === null || options === void 0 ? void 0 : options.requestOptions) === null || _a === void 0 ? void 0 : _a.skipUrlEncoding,
    });
    return context.path(path).post(Object.assign(Object.assign({}, operationOptionsToRequestParameters(options)), { contentType: "application/json", headers: Object.assign({ accept: "application/json" }, (_b = options.requestOptions) === null || _b === void 0 ? void 0 : _b.headers), body: { metadata: options === null || options === void 0 ? void 0 : options.metadata } }));
}
export async function _updateMessageDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        throw createRestError(result);
    }
    return threadMessageDeserializer(result.body);
}
/** Modifies an existing message on an existing thread. */
export async function updateMessage(context, threadId, messageId, options = { requestOptions: {} }) {
    const result = await _updateMessageSend(context, threadId, messageId, options);
    return _updateMessageDeserialize(result);
}
export function _getMessageSend(context, threadId, messageId, options = { requestOptions: {} }) {
    var _a, _b;
    const path = expandUrlTemplate("/threads/{threadId}/messages/{messageId}{?api%2Dversion}", {
        threadId: threadId,
        messageId: messageId,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: (_a = options === null || options === void 0 ? void 0 : options.requestOptions) === null || _a === void 0 ? void 0 : _a.skipUrlEncoding,
    });
    return context.path(path).get(Object.assign(Object.assign({}, operationOptionsToRequestParameters(options)), { headers: Object.assign({ accept: "application/json" }, (_b = options.requestOptions) === null || _b === void 0 ? void 0 : _b.headers) }));
}
export async function _getMessageDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        throw createRestError(result);
    }
    return threadMessageDeserializer(result.body);
}
/** Retrieves an existing message. */
export async function getMessage(context, threadId, messageId, options = { requestOptions: {} }) {
    const result = await _getMessageSend(context, threadId, messageId, options);
    return _getMessageDeserialize(result);
}
export function _listMessagesSend(context, threadId, options = { requestOptions: {} }) {
    var _a, _b;
    const path = expandUrlTemplate("/threads/{threadId}/messages{?run_id,api%2Dversion,limit,order,after,before}", {
        threadId: threadId,
        run_id: options === null || options === void 0 ? void 0 : options.runId,
        "api%2Dversion": context.apiVersion,
        limit: options === null || options === void 0 ? void 0 : options.limit,
        order: options === null || options === void 0 ? void 0 : options.order,
        after: options === null || options === void 0 ? void 0 : options.after,
        before: options === null || options === void 0 ? void 0 : options.before,
    }, {
        allowReserved: (_a = options === null || options === void 0 ? void 0 : options.requestOptions) === null || _a === void 0 ? void 0 : _a.skipUrlEncoding,
    });
    return context.path(path).get(Object.assign(Object.assign({}, operationOptionsToRequestParameters(options)), { headers: Object.assign({ accept: "application/json" }, (_b = options.requestOptions) === null || _b === void 0 ? void 0 : _b.headers) }));
}
export async function _listMessagesDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        throw createRestError(result);
    }
    return _agentsPagedResultThreadMessageDeserializer(result.body);
}
/** Gets a list of messages that exist on a thread. */
export function listMessages(context, threadId, options = { requestOptions: {} }) {
    return buildPagedAsyncIterator(context, () => _listMessagesSend(context, threadId, options), _listMessagesDeserialize, ["200"], { itemName: "data" });
}
export function _createMessageSend(context, threadId, role, content, options = { requestOptions: {} }) {
    var _a, _b;
    const path = expandUrlTemplate("/threads/{threadId}/messages{?api%2Dversion}", {
        threadId: threadId,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: (_a = options === null || options === void 0 ? void 0 : options.requestOptions) === null || _a === void 0 ? void 0 : _a.skipUrlEncoding,
    });
    return context.path(path).post(Object.assign(Object.assign({}, operationOptionsToRequestParameters(options)), { contentType: "application/json", headers: Object.assign({ accept: "application/json" }, (_b = options.requestOptions) === null || _b === void 0 ? void 0 : _b.headers), body: {
            role: role,
            content: messageInputContentSerializer(content),
            attachments: !(options === null || options === void 0 ? void 0 : options.attachments)
                ? options === null || options === void 0 ? void 0 : options.attachments
                : messageAttachmentArraySerializer(options === null || options === void 0 ? void 0 : options.attachments),
            metadata: options === null || options === void 0 ? void 0 : options.metadata,
        } }));
}
export async function _createMessageDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        throw createRestError(result);
    }
    return threadMessageDeserializer(result.body);
}
/** Creates a new message on a specified thread. */
export async function createMessage(context, threadId, role, content, options = { requestOptions: {} }) {
    const result = await _createMessageSend(context, threadId, role, content, options);
    return _createMessageDeserialize(result);
}
//# sourceMappingURL=operations.js.map
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable @typescript-eslint/explicit-module-boundary-types */
import { randomUUID } from "@azure/core-util";
export function toolDefinitionSerializer(item) {
    return { type: item["type"] };
}
export function toolDefinitionDeserializer(item) {
    return {
        type: item["type"],
    };
}
export function toolDefinitionUnionSerializer(item) {
    switch (item.type) {
        case "code_interpreter":
            return codeInterpreterToolDefinitionSerializer(item);
        case "file_search":
            return fileSearchToolDefinitionSerializer(item);
        case "function":
            return functionToolDefinitionSerializer(item);
        case "bing_grounding":
            return bingGroundingToolDefinitionSerializer(item);
        case "fabric_dataagent":
            return microsoftFabricToolDefinitionSerializer(item);
        case "sharepoint_grounding":
            return sharepointToolDefinitionSerializer(item);
        case "azure_ai_search":
            return azureAISearchToolDefinitionSerializer(item);
        case "openapi":
            return openApiToolDefinitionSerializer(item);
        case "bing_custom_search":
            return bingCustomSearchToolDefinitionSerializer(item);
        case "connected_agent":
            return connectedAgentToolDefinitionSerializer(item);
        case "azure_function":
            return azureFunctionToolDefinitionSerializer(item);
        default:
            return toolDefinitionSerializer(item);
    }
}
export function toolDefinitionUnionDeserializer(item) {
    switch (item.type) {
        case "code_interpreter":
            return codeInterpreterToolDefinitionDeserializer(item);
        case "file_search":
            return fileSearchToolDefinitionDeserializer(item);
        case "function":
            return functionToolDefinitionDeserializer(item);
        case "bing_grounding":
            return bingGroundingToolDefinitionDeserializer(item);
        case "fabric_dataagent":
            return microsoftFabricToolDefinitionDeserializer(item);
        case "sharepoint_grounding":
            return sharepointToolDefinitionDeserializer(item);
        case "azure_ai_search":
            return azureAISearchToolDefinitionDeserializer(item);
        case "openapi":
            return openApiToolDefinitionDeserializer(item);
        case "bing_custom_search":
            return bingCustomSearchToolDefinitionDeserializer(item);
        case "connected_agent":
            return connectedAgentToolDefinitionDeserializer(item);
        case "azure_function":
            return azureFunctionToolDefinitionDeserializer(item);
        default:
            return toolDefinitionDeserializer(item);
    }
}
export function codeInterpreterToolDefinitionSerializer(item) {
    return { type: item["type"] };
}
export function codeInterpreterToolDefinitionDeserializer(item) {
    return {
        type: item["type"],
    };
}
export function fileSearchToolDefinitionSerializer(item) {
    return {
        type: item["type"],
        file_search: !item["fileSearch"]
            ? item["fileSearch"]
            : fileSearchToolDefinitionDetailsSerializer(item["fileSearch"]),
    };
}
export function fileSearchToolDefinitionDeserializer(item) {
    return {
        type: item["type"],
        fileSearch: !item["file_search"]
            ? item["file_search"]
            : fileSearchToolDefinitionDetailsDeserializer(item["file_search"]),
    };
}
export function fileSearchToolDefinitionDetailsSerializer(item) {
    return {
        max_num_results: item["maxNumResults"],
        ranking_options: !item["rankingOptions"]
            ? item["rankingOptions"]
            : fileSearchRankingOptionsSerializer(item["rankingOptions"]),
    };
}
export function fileSearchToolDefinitionDetailsDeserializer(item) {
    return {
        maxNumResults: item["max_num_results"],
        rankingOptions: !item["ranking_options"]
            ? item["ranking_options"]
            : fileSearchRankingOptionsDeserializer(item["ranking_options"]),
    };
}
export function fileSearchRankingOptionsSerializer(item) {
    return { ranker: item["ranker"], score_threshold: item["scoreThreshold"] };
}
export function fileSearchRankingOptionsDeserializer(item) {
    return {
        ranker: item["ranker"],
        scoreThreshold: item["score_threshold"],
    };
}
export function functionToolDefinitionSerializer(item) {
    return {
        type: item["type"],
        function: functionDefinitionSerializer(item["function"]),
    };
}
export function functionToolDefinitionDeserializer(item) {
    return {
        type: item["type"],
        function: functionDefinitionDeserializer(item["function"]),
    };
}
export function functionDefinitionSerializer(item) {
    return {
        name: item["name"],
        description: item["description"],
        parameters: item["parameters"],
    };
}
export function functionDefinitionDeserializer(item) {
    return {
        name: item["name"],
        description: item["description"],
        parameters: item["parameters"],
    };
}
export function bingGroundingToolDefinitionSerializer(item) {
    return {
        type: item["type"],
        bing_grounding: bingGroundingSearchConfigurationListSerializer(item["bingGrounding"]),
    };
}
export function bingGroundingToolDefinitionDeserializer(item) {
    return {
        type: item["type"],
        bingGrounding: bingGroundingSearchConfigurationListDeserializer(item["bing_grounding"]),
    };
}
export function bingGroundingSearchConfigurationListSerializer(item) {
    return {
        search_configurations: bingGroundingSearchConfigurationArraySerializer(item["searchConfigurations"]),
    };
}
export function bingGroundingSearchConfigurationListDeserializer(item) {
    // Handle the case where item might be undefined
    if (!item) {
        return { searchConfigurations: [] };
    }
    return {
        searchConfigurations: bingGroundingSearchConfigurationArrayDeserializer(item["search_configurations"]),
    };
}
export function bingGroundingSearchConfigurationArraySerializer(result) {
    return result.map((item) => {
        return bingGroundingSearchConfigurationSerializer(item);
    });
}
export function bingGroundingSearchConfigurationArrayDeserializer(result) {
    // Handle the case where result might be undefined
    if (!result) {
        return [];
    }
    return result.map((item) => {
        return bingGroundingSearchConfigurationDeserializer(item);
    });
}
export function bingGroundingSearchConfigurationSerializer(item) {
    return {
        connection_id: item["connectionId"],
        market: item["market"],
        set_lang: item["setLang"],
        count: item["count"],
        freshness: item["freshness"],
    };
}
export function bingGroundingSearchConfigurationDeserializer(item) {
    return {
        connectionId: item["connection_id"],
        market: item["market"],
        setLang: item["set_lang"],
        count: item["count"],
        freshness: item["freshness"],
    };
}
export function microsoftFabricToolDefinitionSerializer(item) {
    return {
        type: item["type"],
        fabric_dataagent: toolConnectionListSerializer(item["fabricDataagent"]),
    };
}
export function microsoftFabricToolDefinitionDeserializer(item) {
    return {
        type: item["type"],
        fabricDataagent: toolConnectionListDeserializer(item["fabric_dataagent"]),
    };
}
export function toolConnectionListSerializer(item) {
    return {
        connections: !item["connectionList"]
            ? item["connectionList"]
            : toolConnectionArraySerializer(item["connectionList"]),
    };
}
export function toolConnectionListDeserializer(item) {
    return {
        connectionList: !item["connections"]
            ? item["connections"]
            : toolConnectionArrayDeserializer(item["connections"]),
    };
}
export function toolConnectionArraySerializer(result) {
    return result.map((item) => {
        return toolConnectionSerializer(item);
    });
}
export function toolConnectionArrayDeserializer(result) {
    return result.map((item) => {
        return toolConnectionDeserializer(item);
    });
}
export function toolConnectionSerializer(item) {
    return { connection_id: item["connectionId"] };
}
export function toolConnectionDeserializer(item) {
    return {
        connectionId: item["connection_id"],
    };
}
export function sharepointToolDefinitionSerializer(item) {
    return {
        type: item["type"],
        sharepoint_grounding: toolConnectionListSerializer(item["sharepointGrounding"]),
    };
}
export function sharepointToolDefinitionDeserializer(item) {
    return {
        type: item["type"],
        sharepointGrounding: toolConnectionListDeserializer(item["sharepoint_grounding"]),
    };
}
export function azureAISearchToolDefinitionSerializer(item) {
    return { type: item["type"] };
}
export function azureAISearchToolDefinitionDeserializer(item) {
    return {
        type: item["type"],
    };
}
export function openApiToolDefinitionSerializer(item) {
    return {
        type: item["type"],
        openapi: openApiFunctionDefinitionSerializer(item["openapi"]),
    };
}
export function openApiToolDefinitionDeserializer(item) {
    return {
        type: item["type"],
        openapi: openApiFunctionDefinitionDeserializer(item["openapi"]),
    };
}
export function openApiFunctionDefinitionSerializer(item) {
    return {
        name: item["name"],
        description: item["description"],
        spec: item["spec"],
        auth: openApiAuthDetailsUnionSerializer(item["auth"]),
        default_params: !item["defaultParams"]
            ? item["defaultParams"]
            : item["defaultParams"].map((p) => {
                return p;
            }),
    };
}
export function openApiFunctionDefinitionDeserializer(item) {
    return {
        name: item["name"],
        description: item["description"],
        spec: item["spec"],
        auth: openApiAuthDetailsUnionDeserializer(item["auth"]),
        defaultParams: !item["default_params"]
            ? item["default_params"]
            : item["default_params"].map((p) => {
                return p;
            }),
    };
}
export function openApiAuthDetailsSerializer(item) {
    return { type: item["type"] };
}
export function openApiAuthDetailsDeserializer(item) {
    return {
        type: item["type"],
    };
}
export function openApiAuthDetailsUnionSerializer(item) {
    switch (item.type) {
        case "anonymous":
            return openApiAnonymousAuthDetailsSerializer(item);
        case "connection":
            return openApiConnectionAuthDetailsSerializer(item);
        case "managed_identity":
            return openApiManagedAuthDetailsSerializer(item);
        default:
            return openApiAuthDetailsSerializer(item);
    }
}
export function openApiAuthDetailsUnionDeserializer(item) {
    switch (item.type) {
        case "anonymous":
            return openApiAnonymousAuthDetailsDeserializer(item);
        case "connection":
            return openApiConnectionAuthDetailsDeserializer(item);
        case "managed_identity":
            return openApiManagedAuthDetailsDeserializer(item);
        default:
            return openApiAuthDetailsDeserializer(item);
    }
}
export function openApiAnonymousAuthDetailsSerializer(item) {
    return { type: item["type"] };
}
export function openApiAnonymousAuthDetailsDeserializer(item) {
    return {
        type: item["type"],
    };
}
export function openApiConnectionAuthDetailsSerializer(item) {
    return {
        type: item["type"],
        security_scheme: openApiConnectionSecuritySchemeSerializer(item["securityScheme"]),
    };
}
export function openApiConnectionAuthDetailsDeserializer(item) {
    return {
        type: item["type"],
        securityScheme: openApiConnectionSecuritySchemeDeserializer(item["security_scheme"]),
    };
}
export function openApiConnectionSecuritySchemeSerializer(item) {
    return { connection_id: item["connectionId"] };
}
export function openApiConnectionSecuritySchemeDeserializer(item) {
    return {
        connectionId: item["connection_id"],
    };
}
export function openApiManagedAuthDetailsSerializer(item) {
    return {
        type: item["type"],
        security_scheme: openApiManagedSecuritySchemeSerializer(item["securityScheme"]),
    };
}
export function openApiManagedAuthDetailsDeserializer(item) {
    return {
        type: item["type"],
        securityScheme: openApiManagedSecuritySchemeDeserializer(item["security_scheme"]),
    };
}
export function openApiManagedSecuritySchemeSerializer(item) {
    return { audience: item["audience"] };
}
export function openApiManagedSecuritySchemeDeserializer(item) {
    return {
        audience: item["audience"],
    };
}
export function bingCustomSearchToolDefinitionSerializer(item) {
    return {
        type: item["type"],
        bing_custom_search: bingCustomSearchConfigurationListSerializer(item["bingCustomSearch"]),
    };
}
export function bingCustomSearchToolDefinitionDeserializer(item) {
    return {
        type: item["type"],
        bingCustomSearch: bingCustomSearchConfigurationListDeserializer(item["bing_custom_search"]),
    };
}
export function bingCustomSearchConfigurationListSerializer(item) {
    return {
        search_configurations: bingCustomSearchConfigurationArraySerializer(item["searchConfigurations"]),
    };
}
export function bingCustomSearchConfigurationListDeserializer(item) {
    return {
        searchConfigurations: bingCustomSearchConfigurationArrayDeserializer(item["search_configurations"]),
    };
}
export function bingCustomSearchConfigurationArraySerializer(result) {
    return result.map((item) => {
        return bingCustomSearchConfigurationSerializer(item);
    });
}
export function bingCustomSearchConfigurationArrayDeserializer(result) {
    return result.map((item) => {
        return bingCustomSearchConfigurationDeserializer(item);
    });
}
export function bingCustomSearchConfigurationSerializer(item) {
    return {
        connection_id: item["connectionId"],
        instance_name: item["instanceName"],
        market: item["market"],
        set_lang: item["setLang"],
        count: item["count"],
        freshness: item["freshness"],
    };
}
export function bingCustomSearchConfigurationDeserializer(item) {
    return {
        connectionId: item["connection_id"],
        instanceName: item["instance_name"],
        market: item["market"],
        setLang: item["set_lang"],
        count: item["count"],
        freshness: item["freshness"],
    };
}
export function connectedAgentToolDefinitionSerializer(item) {
    return {
        type: item["type"],
        connected_agent: connectedAgentDetailsSerializer(item["connectedAgent"]),
    };
}
export function connectedAgentToolDefinitionDeserializer(item) {
    return {
        type: item["type"],
        connectedAgent: connectedAgentDetailsDeserializer(item["connected_agent"]),
    };
}
export function connectedAgentDetailsSerializer(item) {
    return {
        id: item["id"],
        name: item["name"],
        description: item["description"],
    };
}
export function connectedAgentDetailsDeserializer(item) {
    return {
        id: item["id"],
        name: item["name"],
        description: item["description"],
    };
}
export function azureFunctionToolDefinitionSerializer(item) {
    return {
        type: item["type"],
        azure_function: azureFunctionDefinitionSerializer(item["azureFunction"]),
    };
}
export function azureFunctionToolDefinitionDeserializer(item) {
    return {
        type: item["type"],
        azureFunction: azureFunctionDefinitionDeserializer(item["azure_function"]),
    };
}
export function azureFunctionDefinitionSerializer(item) {
    return {
        function: functionDefinitionSerializer(item["function"]),
        input_binding: azureFunctionBindingSerializer(item["inputBinding"]),
        output_binding: azureFunctionBindingSerializer(item["outputBinding"]),
    };
}
export function azureFunctionDefinitionDeserializer(item) {
    return {
        function: functionDefinitionDeserializer(item["function"]),
        inputBinding: azureFunctionBindingDeserializer(item["input_binding"]),
        outputBinding: azureFunctionBindingDeserializer(item["output_binding"]),
    };
}
export function azureFunctionBindingSerializer(item) {
    return {
        type: item["type"],
        storage_queue: azureFunctionStorageQueueSerializer(item["storageQueue"]),
    };
}
export function azureFunctionBindingDeserializer(item) {
    return {
        type: item["type"],
        storageQueue: azureFunctionStorageQueueDeserializer(item["storage_queue"]),
    };
}
export function azureFunctionStorageQueueSerializer(item) {
    return {
        queue_service_endpoint: item["storageServiceEndpoint"],
        queue_name: item["queueName"],
    };
}
export function azureFunctionStorageQueueDeserializer(item) {
    return {
        storageServiceEndpoint: item["queue_service_endpoint"],
        queueName: item["queue_name"],
    };
}
export function toolResourcesSerializer(item) {
    return {
        code_interpreter: !item["codeInterpreter"]
            ? item["codeInterpreter"]
            : codeInterpreterToolResourceSerializer(item["codeInterpreter"]),
        file_search: !item["fileSearch"]
            ? item["fileSearch"]
            : fileSearchToolResourceSerializer(item["fileSearch"]),
        azure_ai_search: !item["azureAISearch"]
            ? item["azureAISearch"]
            : azureAISearchResourceSerializer(item["azureAISearch"]),
    };
}
export function toolResourcesDeserializer(item) {
    return {
        codeInterpreter: !item["code_interpreter"]
            ? item["code_interpreter"]
            : codeInterpreterToolResourceDeserializer(item["code_interpreter"]),
        fileSearch: !item["file_search"]
            ? item["file_search"]
            : fileSearchToolResourceDeserializer(item["file_search"]),
        azureAISearch: !item["azure_ai_search"]
            ? item["azure_ai_search"]
            : azureAISearchResourceDeserializer(item["azure_ai_search"]),
    };
}
export function codeInterpreterToolResourceSerializer(item) {
    return {
        file_ids: !item["fileIds"]
            ? item["fileIds"]
            : item["fileIds"].map((p) => {
                return p;
            }),
        data_sources: !item["dataSources"]
            ? item["dataSources"]
            : vectorStoreDataSourceArraySerializer(item["dataSources"]),
    };
}
export function codeInterpreterToolResourceDeserializer(item) {
    return {
        fileIds: !item["file_ids"]
            ? item["file_ids"]
            : item["file_ids"].map((p) => {
                return p;
            }),
        dataSources: !item["data_sources"]
            ? item["data_sources"]
            : vectorStoreDataSourceArrayDeserializer(item["data_sources"]),
    };
}
export function vectorStoreDataSourceArraySerializer(result) {
    return result.map((item) => {
        return vectorStoreDataSourceSerializer(item);
    });
}
export function vectorStoreDataSourceArrayDeserializer(result) {
    return result.map((item) => {
        return vectorStoreDataSourceDeserializer(item);
    });
}
export function vectorStoreDataSourceSerializer(item) {
    return { uri: item["assetIdentifier"], type: item["assetType"] };
}
export function vectorStoreDataSourceDeserializer(item) {
    return {
        assetIdentifier: item["uri"],
        assetType: item["type"],
    };
}
/**
 * Type of vector storage asset. Asset type may be a uri_asset, in this case it should contain asset URI ID,
 * in the case of id_asset it should contain the data ID.
 */
export var VectorStoreDataSourceAssetType;
(function (VectorStoreDataSourceAssetType) {
    VectorStoreDataSourceAssetType["UriAsset"] = "uri_asset";
    VectorStoreDataSourceAssetType["IdAsset"] = "id_asset";
})(VectorStoreDataSourceAssetType || (VectorStoreDataSourceAssetType = {}));
export function fileSearchToolResourceSerializer(item) {
    return {
        vector_store_ids: !item["vectorStoreIds"]
            ? item["vectorStoreIds"]
            : item["vectorStoreIds"].map((p) => {
                return p;
            }),
        vector_stores: !item["vectorStores"]
            ? item["vectorStores"]
            : vectorStoreConfigurationsArraySerializer(item["vectorStores"]),
    };
}
export function fileSearchToolResourceDeserializer(item) {
    return {
        vectorStoreIds: !item["vector_store_ids"]
            ? item["vector_store_ids"]
            : item["vector_store_ids"].map((p) => {
                return p;
            }),
        vectorStores: !item["vector_stores"]
            ? item["vector_stores"]
            : vectorStoreConfigurationsArrayDeserializer(item["vector_stores"]),
    };
}
export function vectorStoreConfigurationsArraySerializer(result) {
    return result.map((item) => {
        return vectorStoreConfigurationsSerializer(item);
    });
}
export function vectorStoreConfigurationsArrayDeserializer(result) {
    return result.map((item) => {
        return vectorStoreConfigurationsDeserializer(item);
    });
}
export function vectorStoreConfigurationsSerializer(item) {
    return {
        name: item["storeName"],
        configuration: vectorStoreConfigurationSerializer(item["storeConfiguration"]),
    };
}
export function vectorStoreConfigurationsDeserializer(item) {
    return {
        storeName: item["name"],
        storeConfiguration: vectorStoreConfigurationDeserializer(item["configuration"]),
    };
}
export function vectorStoreConfigurationSerializer(item) {
    return {
        data_sources: vectorStoreDataSourceArraySerializer(item["dataSources"]),
    };
}
export function vectorStoreConfigurationDeserializer(item) {
    return {
        dataSources: vectorStoreDataSourceArrayDeserializer(item["data_sources"]),
    };
}
export function azureAISearchResourceSerializer(item) {
    return {
        indexes: !item["indexList"]
            ? item["indexList"]
            : aiSearchIndexResourceArraySerializer(item["indexList"]),
    };
}
export function azureAISearchResourceDeserializer(item) {
    return {
        indexList: !item["indexes"]
            ? item["indexes"]
            : aiSearchIndexResourceArrayDeserializer(item["indexes"]),
    };
}
export function aiSearchIndexResourceArraySerializer(result) {
    return result.map((item) => {
        return aiSearchIndexResourceSerializer(item);
    });
}
export function aiSearchIndexResourceArrayDeserializer(result) {
    return result.map((item) => {
        return aiSearchIndexResourceDeserializer(item);
    });
}
export function aiSearchIndexResourceSerializer(item) {
    return {
        index_connection_id: item["indexConnectionId"],
        index_name: item["indexName"],
        query_type: item["queryType"],
        top_k: item["topK"],
        filter: item["filter"],
        index_asset_id: item["indexAssetId"],
    };
}
export function aiSearchIndexResourceDeserializer(item) {
    return {
        indexConnectionId: item["index_connection_id"],
        indexName: item["index_name"],
        queryType: item["query_type"],
        topK: item["top_k"],
        filter: item["filter"],
        indexAssetId: item["index_asset_id"],
    };
}
export function agentsResponseFormatSerializer(item) {
    return { type: item["type"] };
}
export function agentsResponseFormatDeserializer(item) {
    return {
        type: item["type"],
    };
}
export function responseFormatJsonSchemaTypeSerializer(item) {
    return {
        type: item["type"],
        json_schema: responseFormatJsonSchemaSerializer(item["jsonSchema"]),
    };
}
export function responseFormatJsonSchemaTypeDeserializer(item) {
    return {
        type: item["type"],
        jsonSchema: responseFormatJsonSchemaDeserializer(item["json_schema"]),
    };
}
export function responseFormatJsonSchemaSerializer(item) {
    return {
        description: item["description"],
        name: item["name"],
        schema: item["schema"],
    };
}
export function responseFormatJsonSchemaDeserializer(item) {
    return {
        description: item["description"],
        name: item["name"],
        schema: item["schema"],
    };
}
export function toolDefinitionUnionArraySerializer(result) {
    return result.map((item) => {
        return toolDefinitionUnionSerializer(item);
    });
}
export function toolDefinitionUnionArrayDeserializer(result) {
    return result.map((item) => {
        return toolDefinitionUnionDeserializer(item);
    });
}
export function agentsResponseFormatOptionSerializer(item) {
    return item;
}
export function agentsResponseFormatOptionDeserializer(item) {
    return item;
}
export function agentDeserializer(item) {
    return {
        id: item["id"],
        object: item["object"],
        createdAt: new Date(item["created_at"] * 1000),
        name: item["name"],
        description: item["description"],
        model: item["model"],
        instructions: item["instructions"],
        tools: toolDefinitionUnionArrayDeserializer(item["tools"]),
        toolResources: !item["tool_resources"]
            ? item["tool_resources"]
            : toolResourcesDeserializer(item["tool_resources"]),
        temperature: item["temperature"],
        topP: item["top_p"],
        responseFormat: !item["response_format"]
            ? item["response_format"]
            : agentsResponseFormatOptionDeserializer(item["response_format"]),
        metadata: item["metadata"],
    };
}
export function _agentsPagedResultAgentDeserializer(item) {
    return {
        data: agentArrayDeserializer(item["data"]),
        lastId: item["last_id"],
        hasMore: item["has_more"],
    };
}
export function agentArrayDeserializer(result) {
    return result.map((item) => {
        return agentDeserializer(item);
    });
}
export function agentDeletionStatusDeserializer(item) {
    return {
        id: item["id"],
        deleted: item["deleted"],
        object: item["object"],
    };
}
export function agentThreadCreationOptionsSerializer(item) {
    return {
        messages: !item["messages"]
            ? item["messages"]
            : threadMessageOptionsArraySerializer(item["messages"]),
        tool_resources: !item["toolResources"]
            ? item["toolResources"]
            : toolResourcesSerializer(item["toolResources"]),
        metadata: item["metadata"],
    };
}
export function threadMessageOptionsArraySerializer(result) {
    return result.map((item) => {
        return threadMessageOptionsSerializer(item);
    });
}
export function threadMessageOptionsSerializer(item) {
    return {
        role: item["role"],
        content: messageInputContentSerializer(item["content"]),
        attachments: !item["attachments"]
            ? item["attachments"]
            : messageAttachmentArraySerializer(item["attachments"]),
        metadata: item["metadata"],
    };
}
export function messageInputContentSerializer(item) {
    return item;
}
export function messageInputContentBlockUnionArraySerializer(result) {
    return result.map((item) => {
        return messageInputContentBlockUnionSerializer(item);
    });
}
export function messageInputContentBlockSerializer(item) {
    return { type: item["type"] };
}
export function messageInputContentBlockUnionSerializer(item) {
    switch (item.type) {
        case "text":
            return messageInputTextBlockSerializer(item);
        case "image_file":
            return messageInputImageFileBlockSerializer(item);
        case "image_url":
            return messageInputImageUrlBlockSerializer(item);
        default:
            return messageInputContentBlockSerializer(item);
    }
}
export function messageInputTextBlockSerializer(item) {
    return { type: item["type"], text: item["text"] };
}
export function messageInputImageFileBlockSerializer(item) {
    return {
        type: item["type"],
        image_file: messageImageFileParamSerializer(item["imageFile"]),
    };
}
export function messageImageFileParamSerializer(item) {
    return { file_id: item["fileId"], detail: item["detail"] };
}
export function messageInputImageUrlBlockSerializer(item) {
    return {
        type: item["type"],
        image_url: messageImageUrlParamSerializer(item["imageUrl"]),
    };
}
export function messageImageUrlParamSerializer(item) {
    return { url: item["url"], detail: item["detail"] };
}
export function messageAttachmentArraySerializer(result) {
    return result.map((item) => {
        return messageAttachmentSerializer(item);
    });
}
export function messageAttachmentArrayDeserializer(result) {
    return result.map((item) => {
        return messageAttachmentDeserializer(item);
    });
}
export function messageAttachmentSerializer(item) {
    return {
        file_id: item["fileId"],
        data_source: !item["dataSource"]
            ? item["dataSource"]
            : vectorStoreDataSourceSerializer(item["dataSource"]),
        tools: messageAttachmentToolDefinitionArraySerializer(item["tools"]),
    };
}
export function messageAttachmentDeserializer(item) {
    return {
        fileId: item["file_id"],
        dataSource: !item["data_source"]
            ? item["data_source"]
            : vectorStoreDataSourceDeserializer(item["data_source"]),
        tools: messageAttachmentToolDefinitionArrayDeserializer(item["tools"]),
    };
}
export function messageAttachmentToolDefinitionArraySerializer(result) {
    return result.map((item) => {
        return messageAttachmentToolDefinitionSerializer(item);
    });
}
export function messageAttachmentToolDefinitionArrayDeserializer(result) {
    return result.map((item) => {
        return messageAttachmentToolDefinitionDeserializer(item);
    });
}
export function messageAttachmentToolDefinitionSerializer(item) {
    return item;
}
export function messageAttachmentToolDefinitionDeserializer(item) {
    return item;
}
export function _messageAttachmentToolSerializer(item) {
    return item;
}
export function _messageAttachmentToolDeserializer(item) {
    return item;
}
export function updateToolResourcesOptionsSerializer(item) {
    return {
        code_interpreter: !item["codeInterpreter"]
            ? item["codeInterpreter"]
            : updateCodeInterpreterToolResourceOptionsSerializer(item["codeInterpreter"]),
        file_search: !item["fileSearch"]
            ? item["fileSearch"]
            : updateFileSearchToolResourceOptionsSerializer(item["fileSearch"]),
        azure_ai_search: !item["azureAISearch"]
            ? item["azureAISearch"]
            : azureAISearchResourceSerializer(item["azureAISearch"]),
    };
}
export function updateToolResourcesOptionsDeserializer(item) {
    return {
        codeInterpreter: !item["code_interpreter"]
            ? item["code_interpreter"]
            : updateCodeInterpreterToolResourceOptionsDeserializer(item["code_interpreter"]),
        fileSearch: !item["file_search"]
            ? item["file_search"]
            : updateFileSearchToolResourceOptionsDeserializer(item["file_search"]),
        azureAISearch: !item["azure_ai_search"]
            ? item["azure_ai_search"]
            : azureAISearchResourceDeserializer(item["azure_ai_search"]),
    };
}
export function updateCodeInterpreterToolResourceOptionsSerializer(item) {
    return {
        file_ids: !item["fileIds"]
            ? item["fileIds"]
            : item["fileIds"].map((p) => {
                return p;
            }),
    };
}
export function updateCodeInterpreterToolResourceOptionsDeserializer(item) {
    return {
        fileIds: !item["file_ids"]
            ? item["file_ids"]
            : item["file_ids"].map((p) => {
                return p;
            }),
    };
}
export function updateFileSearchToolResourceOptionsSerializer(item) {
    return {
        vector_store_ids: !item["vectorStoreIds"]
            ? item["vectorStoreIds"]
            : item["vectorStoreIds"].map((p) => {
                return p;
            }),
    };
}
export function updateFileSearchToolResourceOptionsDeserializer(item) {
    return {
        vectorStoreIds: !item["vector_store_ids"]
            ? item["vector_store_ids"]
            : item["vector_store_ids"].map((p) => {
                return p;
            }),
    };
}
export function truncationObjectSerializer(item) {
    return { type: item["type"], last_messages: item["lastMessages"] };
}
export function truncationObjectDeserializer(item) {
    return {
        type: item["type"],
        lastMessages: item["last_messages"],
    };
}
export function agentsNamedToolChoiceSerializer(item) {
    return {
        type: item["type"],
        function: !item["function"] ? item["function"] : functionNameSerializer(item["function"]),
    };
}
export function agentsNamedToolChoiceDeserializer(item) {
    return {
        type: item["type"],
        function: !item["function"] ? item["function"] : functionNameDeserializer(item["function"]),
    };
}
export function functionNameSerializer(item) {
    return { name: item["name"] };
}
export function functionNameDeserializer(item) {
    return {
        name: item["name"],
    };
}
export function agentsToolChoiceOptionSerializer(item) {
    return item;
}
export function agentsToolChoiceOptionDeserializer(item) {
    return item;
}
export function threadRunDeserializer(item) {
    return {
        id: item["id"],
        object: item["object"],
        threadId: item["thread_id"],
        assistantId: item["assistant_id"],
        status: item["status"],
        requiredAction: !item["required_action"]
            ? item["required_action"]
            : requiredActionUnionDeserializer(item["required_action"]),
        lastError: !item["last_error"] ? item["last_error"] : runErrorDeserializer(item["last_error"]),
        model: item["model"],
        instructions: item["instructions"],
        tools: toolDefinitionUnionArrayDeserializer(item["tools"]),
        createdAt: new Date(item["created_at"] * 1000),
        expiresAt: !item["expires_at"] ? item["expires_at"] : new Date(item["expires_at"] * 1000),
        startedAt: !item["started_at"] ? item["started_at"] : new Date(item["started_at"] * 1000),
        completedAt: !item["completed_at"]
            ? item["completed_at"]
            : new Date(item["completed_at"] * 1000),
        cancelledAt: !item["cancelled_at"]
            ? item["cancelled_at"]
            : new Date(item["cancelled_at"] * 1000),
        failedAt: !item["failed_at"] ? item["failed_at"] : new Date(item["failed_at"] * 1000),
        incompleteDetails: !item["incomplete_details"]
            ? item["incomplete_details"]
            : incompleteRunDetailsDeserializer(item["incomplete_details"]),
        usage: !item["usage"] ? item["usage"] : runCompletionUsageDeserializer(item["usage"]),
        temperature: item["temperature"],
        topP: item["top_p"],
        maxPromptTokens: item["max_prompt_tokens"],
        maxCompletionTokens: item["max_completion_tokens"],
        truncationStrategy: !item["truncation_strategy"]
            ? item["truncation_strategy"]
            : truncationObjectDeserializer(item["truncation_strategy"]),
        toolChoice: !item["tool_choice"]
            ? item["tool_choice"]
            : agentsToolChoiceOptionDeserializer(item["tool_choice"]),
        responseFormat: !item["response_format"]
            ? item["response_format"]
            : agentsResponseFormatOptionDeserializer(item["response_format"]),
        metadata: item["metadata"],
        toolResources: !item["tool_resources"]
            ? item["tool_resources"]
            : updateToolResourcesOptionsDeserializer(item["tool_resources"]),
        parallelToolCalls: item["parallel_tool_calls"],
    };
}
export function requiredActionDeserializer(item) {
    return {
        type: item["type"],
    };
}
export function requiredActionUnionDeserializer(item) {
    switch (item.type) {
        case "submit_tool_outputs":
            return submitToolOutputsActionDeserializer(item);
        default:
            return requiredActionDeserializer(item);
    }
}
export function submitToolOutputsActionDeserializer(item) {
    return {
        type: item["type"],
        submitToolOutputs: submitToolOutputsDetailsDeserializer(item["submit_tool_outputs"]),
    };
}
export function submitToolOutputsDetailsDeserializer(item) {
    return {
        toolCalls: requiredToolCallUnionArrayDeserializer(item["tool_calls"]),
    };
}
export function requiredToolCallUnionArrayDeserializer(result) {
    return result.map((item) => {
        return requiredToolCallUnionDeserializer(item);
    });
}
export function requiredToolCallDeserializer(item) {
    return {
        type: item["type"],
        id: item["id"],
    };
}
export function requiredToolCallUnionDeserializer(item) {
    switch (item.type) {
        case "function":
            return requiredFunctionToolCallDeserializer(item);
        default:
            return requiredToolCallDeserializer(item);
    }
}
export function requiredFunctionToolCallDeserializer(item) {
    return {
        type: item["type"],
        id: item["id"],
        function: requiredFunctionToolCallDetailsDeserializer(item["function"]),
    };
}
export function requiredFunctionToolCallDetailsDeserializer(item) {
    return {
        name: item["name"],
        arguments: item["arguments"],
    };
}
export function runErrorDeserializer(item) {
    return {
        code: item["code"],
        message: item["message"],
    };
}
export function incompleteRunDetailsDeserializer(item) {
    return {
        reason: item["reason"],
    };
}
export function runCompletionUsageDeserializer(item) {
    return {
        completionTokens: item["completion_tokens"],
        promptTokens: item["prompt_tokens"],
        totalTokens: item["total_tokens"],
    };
}
export function agentThreadDeserializer(item) {
    return {
        id: item["id"],
        object: item["object"],
        createdAt: new Date(item["created_at"] * 1000),
        toolResources: !item["tool_resources"]
            ? item["tool_resources"]
            : toolResourcesDeserializer(item["tool_resources"]),
        metadata: item["metadata"],
    };
}
export function _agentsPagedResultAgentThreadDeserializer(item) {
    return {
        data: agentThreadArrayDeserializer(item["data"]),
        lastId: item["last_id"],
        hasMore: item["has_more"],
    };
}
export function agentThreadArrayDeserializer(result) {
    return result.map((item) => {
        return agentThreadDeserializer(item);
    });
}
export function threadDeletionStatusDeserializer(item) {
    return {
        id: item["id"],
        deleted: item["deleted"],
        object: item["object"],
    };
}
export function threadMessageDeserializer(item) {
    return {
        id: item["id"],
        object: item["object"],
        createdAt: new Date(item["created_at"] * 1000),
        threadId: item["thread_id"],
        status: item["status"],
        incompleteDetails: !item["incomplete_details"]
            ? item["incomplete_details"]
            : messageIncompleteDetailsDeserializer(item["incomplete_details"]),
        completedAt: !item["completed_at"]
            ? item["completed_at"]
            : new Date(item["completed_at"] * 1000),
        incompleteAt: !item["incomplete_at"]
            ? item["incomplete_at"]
            : new Date(item["incomplete_at"] * 1000),
        role: item["role"],
        content: messageContentUnionArrayDeserializer(item["content"]),
        assistantId: item["assistant_id"],
        runId: item["run_id"],
        attachments: !item["attachments"]
            ? item["attachments"]
            : messageAttachmentArrayDeserializer(item["attachments"]),
        metadata: item["metadata"],
    };
}
export function messageIncompleteDetailsDeserializer(item) {
    return {
        reason: item["reason"],
    };
}
export function messageContentUnionArrayDeserializer(result) {
    return result.map((item) => {
        return messageContentUnionDeserializer(item);
    });
}
export function messageContentDeserializer(item) {
    return {
        type: item["type"],
    };
}
export function messageContentUnionDeserializer(item) {
    switch (item.type) {
        case "text":
            return messageTextContentDeserializer(item);
        case "image_file":
            return messageImageFileContentDeserializer(item);
        default:
            return messageContentDeserializer(item);
    }
}
export function messageTextContentDeserializer(item) {
    return {
        type: item["type"],
        text: messageTextDetailsDeserializer(item["text"]),
    };
}
export function messageTextDetailsDeserializer(item) {
    return {
        value: item["value"],
        annotations: messageTextAnnotationUnionArrayDeserializer(item["annotations"]),
    };
}
export function messageTextAnnotationUnionArrayDeserializer(result) {
    return result.map((item) => {
        return messageTextAnnotationUnionDeserializer(item);
    });
}
export function messageTextAnnotationDeserializer(item) {
    return {
        type: item["type"],
        text: item["text"],
    };
}
export function messageTextAnnotationUnionDeserializer(item) {
    switch (item.type) {
        case "url_citation":
            return messageTextUrlCitationAnnotationDeserializer(item);
        case "file_citation":
            return messageTextFileCitationAnnotationDeserializer(item);
        case "file_path":
            return messageTextFilePathAnnotationDeserializer(item);
        default:
            return messageTextAnnotationDeserializer(item);
    }
}
export function messageTextUrlCitationAnnotationDeserializer(item) {
    return {
        type: item["type"],
        text: item["text"],
        urlCitation: messageTextUrlCitationDetailsDeserializer(item["url_citation"]),
        startIndex: item["start_index"],
        endIndex: item["end_index"],
    };
}
export function messageTextUrlCitationDetailsDeserializer(item) {
    return {
        url: item["url"],
        title: item["title"],
    };
}
export function messageTextFileCitationAnnotationDeserializer(item) {
    return {
        type: item["type"],
        text: item["text"],
        fileCitation: messageTextFileCitationDetailsDeserializer(item["file_citation"]),
        startIndex: item["start_index"],
        endIndex: item["end_index"],
    };
}
export function messageTextFileCitationDetailsDeserializer(item) {
    return {
        fileId: item["file_id"],
        quote: item["quote"],
    };
}
export function messageTextFilePathAnnotationDeserializer(item) {
    return {
        type: item["type"],
        text: item["text"],
        filePath: messageTextFilePathDetailsDeserializer(item["file_path"]),
        startIndex: item["start_index"],
        endIndex: item["end_index"],
    };
}
export function messageTextFilePathDetailsDeserializer(item) {
    return {
        fileId: item["file_id"],
    };
}
export function messageImageFileContentDeserializer(item) {
    return {
        type: item["type"],
        imageFile: messageImageFileDetailsDeserializer(item["image_file"]),
    };
}
export function messageImageFileDetailsDeserializer(item) {
    return {
        fileId: item["file_id"],
    };
}
export function _agentsPagedResultThreadMessageDeserializer(item) {
    return {
        data: threadMessageArrayDeserializer(item["data"]),
        lastId: item["last_id"],
        hasMore: item["has_more"],
    };
}
export function threadMessageArrayDeserializer(result) {
    return result.map((item) => {
        return threadMessageDeserializer(item);
    });
}
export function _agentsPagedResultThreadRunDeserializer(item) {
    return {
        data: threadRunArrayDeserializer(item["data"]),
        lastId: item["last_id"],
        hasMore: item["has_more"],
    };
}
export function threadRunArrayDeserializer(result) {
    return result.map((item) => {
        return threadRunDeserializer(item);
    });
}
export function toolOutputSerializer(item) {
    return { tool_call_id: item["toolCallId"], output: item["output"] };
}
export function toolOutputArraySerializer(result) {
    return result.map((item) => {
        return toolOutputSerializer(item);
    });
}
export function runStepDeserializer(item) {
    return {
        id: item["id"],
        object: item["object"],
        type: item["type"],
        assistantId: item["assistant_id"],
        threadId: item["thread_id"],
        runId: item["run_id"],
        status: item["status"],
        stepDetails: runStepDetailsUnionDeserializer(item["step_details"]),
        lastError: !item["last_error"]
            ? item["last_error"]
            : runStepErrorDeserializer(item["last_error"]),
        createdAt: new Date(item["created_at"] * 1000),
        expiredAt: !item["expired_at"] ? item["expired_at"] : new Date(item["expired_at"] * 1000),
        completedAt: !item["completed_at"]
            ? item["completed_at"]
            : new Date(item["completed_at"] * 1000),
        cancelledAt: !item["cancelled_at"]
            ? item["cancelled_at"]
            : new Date(item["cancelled_at"] * 1000),
        failedAt: !item["failed_at"] ? item["failed_at"] : new Date(item["failed_at"] * 1000),
        usage: !item["usage"] ? item["usage"] : runStepCompletionUsageDeserializer(item["usage"]),
        metadata: item["metadata"],
    };
}
export function runStepDetailsDeserializer(item) {
    return {
        type: item["type"],
    };
}
export function runStepDetailsUnionDeserializer(item) {
    switch (item.type) {
        case "message_creation":
            return runStepMessageCreationDetailsDeserializer(item);
        case "tool_calls":
            return runStepToolCallDetailsDeserializer(item);
        default:
            return runStepDetailsDeserializer(item);
    }
}
export function runStepMessageCreationDetailsDeserializer(item) {
    return {
        type: item["type"],
        messageCreation: runStepMessageCreationReferenceDeserializer(item["message_creation"]),
    };
}
export function runStepMessageCreationReferenceDeserializer(item) {
    return {
        messageId: item["message_id"],
    };
}
export function runStepToolCallDetailsDeserializer(item) {
    return {
        type: item["type"],
        toolCalls: runStepToolCallUnionArrayDeserializer(item["tool_calls"]),
    };
}
export function runStepToolCallUnionArrayDeserializer(result) {
    return result.map((item) => {
        return runStepToolCallUnionDeserializer(item);
    });
}
export function runStepToolCallDeserializer(item) {
    return {
        type: item["type"],
        id: item["id"],
    };
}
export function runStepToolCallUnionDeserializer(item) {
    switch (item.type) {
        case "code_interpreter":
            return runStepCodeInterpreterToolCallDeserializer(item);
        case "file_search":
            return runStepFileSearchToolCallDeserializer(item);
        case "bing_grounding":
            return runStepBingGroundingToolCallDeserializer(item);
        case "azure_ai_search":
            return runStepAzureAISearchToolCallDeserializer(item);
        case "sharepoint_grounding":
            return runStepSharepointToolCallDeserializer(item);
        case "fabric_dataagent":
            return runStepMicrosoftFabricToolCallDeserializer(item);
        case "bing_custom_search":
            return runStepBingCustomSearchToolCallDeserializer(item);
        case "function":
            return runStepFunctionToolCallDeserializer(item);
        case "openapi":
            return runStepOpenAPIToolCallDeserializer(item);
        default:
            return runStepToolCallDeserializer(item);
    }
}
export function runStepCodeInterpreterToolCallDeserializer(item) {
    return {
        type: item["type"],
        id: item["id"],
        codeInterpreter: runStepCodeInterpreterToolCallDetailsDeserializer(item["code_interpreter"]),
    };
}
export function runStepCodeInterpreterToolCallDetailsDeserializer(item) {
    return {
        input: item["input"],
        outputs: runStepCodeInterpreterToolCallOutputUnionArrayDeserializer(item["outputs"]),
    };
}
export function runStepCodeInterpreterToolCallOutputUnionArrayDeserializer(result) {
    return result.map((item) => {
        return runStepCodeInterpreterToolCallOutputUnionDeserializer(item);
    });
}
export function runStepCodeInterpreterToolCallOutputDeserializer(item) {
    return {
        type: item["type"],
    };
}
export function runStepCodeInterpreterToolCallOutputUnionDeserializer(item) {
    switch (item.type) {
        case "logs":
            return runStepCodeInterpreterLogOutputDeserializer(item);
        case "image":
            return runStepCodeInterpreterImageOutputDeserializer(item);
        default:
            return runStepCodeInterpreterToolCallOutputDeserializer(item);
    }
}
export function runStepCodeInterpreterLogOutputDeserializer(item) {
    return {
        type: item["type"],
        logs: item["logs"],
    };
}
export function runStepCodeInterpreterImageOutputDeserializer(item) {
    return {
        type: item["type"],
        image: runStepCodeInterpreterImageReferenceDeserializer(item["image"]),
    };
}
export function runStepCodeInterpreterImageReferenceDeserializer(item) {
    return {
        fileId: item["file_id"],
    };
}
export function runStepFileSearchToolCallDeserializer(item) {
    return {
        type: item["type"],
        id: item["id"],
        fileSearch: runStepFileSearchToolCallResultsDeserializer(item["file_search"]),
    };
}
export function runStepFileSearchToolCallResultsDeserializer(item) {
    return {
        rankingOptions: !item["ranking_options"]
            ? item["ranking_options"]
            : fileSearchRankingOptionsDeserializer(item["ranking_options"]),
        results: runStepFileSearchToolCallResultArrayDeserializer(item["results"]),
    };
}
export function runStepFileSearchToolCallResultArrayDeserializer(result) {
    return result.map((item) => {
        return runStepFileSearchToolCallResultDeserializer(item);
    });
}
export function runStepFileSearchToolCallResultDeserializer(item) {
    return {
        fileId: item["file_id"],
        fileName: item["file_name"],
        score: item["score"],
        content: !item["content"]
            ? item["content"]
            : fileSearchToolCallContentArrayDeserializer(item["content"]),
    };
}
export function fileSearchToolCallContentArrayDeserializer(result) {
    return result.map((item) => {
        return fileSearchToolCallContentDeserializer(item);
    });
}
export function fileSearchToolCallContentDeserializer(item) {
    return {
        type: item["type"],
        text: item["text"],
    };
}
export function runStepBingGroundingToolCallDeserializer(item) {
    return {
        type: item["type"],
        id: item["id"],
        bingGrounding: item["bing_grounding"],
    };
}
export function runStepAzureAISearchToolCallDeserializer(item) {
    return {
        type: item["type"],
        id: item["id"],
        azureAISearch: item["azure_ai_search"],
    };
}
export function runStepSharepointToolCallDeserializer(item) {
    return {
        type: item["type"],
        id: item["id"],
        sharePoint: item["sharepoint_grounding"],
    };
}
export function runStepMicrosoftFabricToolCallDeserializer(item) {
    return {
        type: item["type"],
        id: item["id"],
        microsoftFabric: item["fabric_dataagent"],
    };
}
export function runStepBingCustomSearchToolCallDeserializer(item) {
    return {
        type: item["type"],
        id: item["id"],
        bingCustomSearch: item["bing_custom_search"],
    };
}
export function runStepFunctionToolCallDeserializer(item) {
    return {
        type: item["type"],
        id: item["id"],
        function: runStepFunctionToolCallDetailsDeserializer(item["function"]),
    };
}
export function runStepFunctionToolCallDetailsDeserializer(item) {
    return {
        name: item["name"],
        arguments: item["arguments"],
    };
}
export function runStepOpenAPIToolCallDeserializer(item) {
    return {
        type: item["type"],
        id: item["id"],
        openAPI: item["openapi"],
    };
}
export function runStepErrorDeserializer(item) {
    return {
        code: item["code"],
        message: item["message"],
    };
}
export function runStepCompletionUsageDeserializer(item) {
    return {
        completionTokens: item["completion_tokens"],
        promptTokens: item["prompt_tokens"],
        totalTokens: item["total_tokens"],
    };
}
export function _agentsPagedResultRunStepDeserializer(item) {
    return {
        data: runStepArrayDeserializer(item["data"]),
        lastId: item["last_id"],
        hasMore: item["has_more"],
    };
}
export function runStepArrayDeserializer(result) {
    return result.map((item) => {
        return runStepDeserializer(item);
    });
}
export function fileListResponseDeserializer(item) {
    return {
        object: item["object"],
        data: fileInfoArrayDeserializer(item["data"]),
    };
}
export function fileInfoArrayDeserializer(result) {
    return result.map((item) => {
        return fileInfoDeserializer(item);
    });
}
export function fileInfoDeserializer(item) {
    return {
        object: item["object"],
        id: item["id"],
        bytes: item["bytes"],
        filename: item["filename"],
        createdAt: new Date(item["created_at"] * 1000),
        purpose: item["purpose"],
        status: item["status"],
        statusDetails: item["status_details"],
    };
}
export function _uploadFileRequestSerializer(item) {
    var _a;
    return [
        { name: "file", body: item["file"], filename: (_a = item["filename"]) !== null && _a !== void 0 ? _a : randomUUID() },
        { name: "purpose", body: item["purpose"] },
    ];
}
export function fileDeletionStatusDeserializer(item) {
    return {
        id: item["id"],
        deleted: item["deleted"],
        object: item["object"],
    };
}
export function _agentsPagedResultVectorStoreDeserializer(item) {
    return {
        data: vectorStoreArrayDeserializer(item["data"]),
        lastId: item["last_id"],
        hasMore: item["has_more"],
    };
}
export function vectorStoreArrayDeserializer(result) {
    return result.map((item) => {
        return vectorStoreDeserializer(item);
    });
}
export function vectorStoreDeserializer(item) {
    return {
        id: item["id"],
        object: item["object"],
        createdAt: new Date(item["created_at"] * 1000),
        name: item["name"],
        usageBytes: item["usage_bytes"],
        fileCounts: vectorStoreFileCountDeserializer(item["file_counts"]),
        status: item["status"],
        expiresAfter: !item["expires_after"]
            ? item["expires_after"]
            : vectorStoreExpirationPolicyDeserializer(item["expires_after"]),
        expiresAt: !item["expires_at"] ? item["expires_at"] : new Date(item["expires_at"] * 1000),
        lastActiveAt: !item["last_active_at"]
            ? item["last_active_at"]
            : new Date(item["last_active_at"] * 1000),
        metadata: item["metadata"],
    };
}
export function vectorStoreFileCountDeserializer(item) {
    return {
        inProgress: item["in_progress"],
        completed: item["completed"],
        failed: item["failed"],
        cancelled: item["cancelled"],
        total: item["total"],
    };
}
export function vectorStoreExpirationPolicySerializer(item) {
    return { anchor: item["anchor"], days: item["days"] };
}
export function vectorStoreExpirationPolicyDeserializer(item) {
    return {
        anchor: item["anchor"],
        days: item["days"],
    };
}
export function vectorStoreChunkingStrategyRequestSerializer(item) {
    return { type: item["type"] };
}
export function vectorStoreChunkingStrategyRequestUnionSerializer(item) {
    switch (item.type) {
        case "auto":
            return vectorStoreAutoChunkingStrategyRequestSerializer(item);
        case "static":
            return vectorStoreStaticChunkingStrategyRequestSerializer(item);
        default:
            return vectorStoreChunkingStrategyRequestSerializer(item);
    }
}
export function vectorStoreAutoChunkingStrategyRequestSerializer(item) {
    return { type: item["type"] };
}
export function vectorStoreStaticChunkingStrategyRequestSerializer(item) {
    return {
        type: item["type"],
        static: vectorStoreStaticChunkingStrategyOptionsSerializer(item["static"]),
    };
}
export function vectorStoreStaticChunkingStrategyOptionsSerializer(item) {
    return {
        max_chunk_size_tokens: item["maxChunkSizeTokens"],
        chunk_overlap_tokens: item["chunkOverlapTokens"],
    };
}
export function vectorStoreStaticChunkingStrategyOptionsDeserializer(item) {
    return {
        maxChunkSizeTokens: item["max_chunk_size_tokens"],
        chunkOverlapTokens: item["chunk_overlap_tokens"],
    };
}
export function vectorStoreDeletionStatusDeserializer(item) {
    return {
        id: item["id"],
        deleted: item["deleted"],
        object: item["object"],
    };
}
export function _agentsPagedResultVectorStoreFileDeserializer(item) {
    return {
        data: vectorStoreFileArrayDeserializer(item["data"]),
        lastId: item["last_id"],
        hasMore: item["has_more"],
    };
}
export function vectorStoreFileArrayDeserializer(result) {
    return result.map((item) => {
        return vectorStoreFileDeserializer(item);
    });
}
export function vectorStoreFileDeserializer(item) {
    return {
        id: item["id"],
        object: item["object"],
        usageBytes: item["usage_bytes"],
        createdAt: new Date(item["created_at"] * 1000),
        vectorStoreId: item["vector_store_id"],
        status: item["status"],
        lastError: !item["last_error"]
            ? item["last_error"]
            : vectorStoreFileErrorDeserializer(item["last_error"]),
        chunkingStrategy: !item["chunking_strategy"]
            ? item["chunking_strategy"]
            : vectorStoreChunkingStrategyResponseUnionDeserializer(item["chunking_strategy"]),
    };
}
export function vectorStoreFileErrorDeserializer(item) {
    return {
        code: item["code"],
        message: item["message"],
    };
}
export function vectorStoreChunkingStrategyResponseDeserializer(item) {
    return {
        type: item["type"],
    };
}
export function vectorStoreChunkingStrategyResponseUnionDeserializer(item) {
    switch (item.type) {
        case "other":
            return vectorStoreAutoChunkingStrategyResponseDeserializer(item);
        case "static":
            return vectorStoreStaticChunkingStrategyResponseDeserializer(item);
        default:
            return vectorStoreChunkingStrategyResponseDeserializer(item);
    }
}
export function vectorStoreAutoChunkingStrategyResponseDeserializer(item) {
    return {
        type: item["type"],
    };
}
export function vectorStoreStaticChunkingStrategyResponseDeserializer(item) {
    return {
        type: item["type"],
        static: vectorStoreStaticChunkingStrategyOptionsDeserializer(item["static"]),
    };
}
export function vectorStoreFileDeletionStatusDeserializer(item) {
    return {
        id: item["id"],
        deleted: item["deleted"],
        object: item["object"],
    };
}
export function vectorStoreFileBatchDeserializer(item) {
    return {
        id: item["id"],
        object: item["object"],
        createdAt: new Date(item["created_at"] * 1000),
        vectorStoreId: item["vector_store_id"],
        status: item["status"],
        fileCounts: vectorStoreFileCountDeserializer(item["file_counts"]),
    };
}
export function messageDeltaChunkDeserializer(item) {
    return {
        id: item["id"],
        object: item["object"],
        delta: messageDeltaDeserializer(item["delta"]),
    };
}
export function messageDeltaDeserializer(item) {
    return {
        role: item["role"],
        content: messageDeltaContentUnionArrayDeserializer(item["content"]),
    };
}
export function messageDeltaContentUnionArrayDeserializer(result) {
    return result.map((item) => {
        return messageDeltaContentUnionDeserializer(item);
    });
}
export function messageDeltaContentDeserializer(item) {
    return {
        index: item["index"],
        type: item["type"],
    };
}
export function messageDeltaContentUnionDeserializer(item) {
    switch (item.type) {
        case "image_file":
            return messageDeltaImageFileContentDeserializer(item);
        case "text":
            return messageDeltaTextContentDeserializer(item);
        default:
            return messageDeltaContentDeserializer(item);
    }
}
export function messageDeltaImageFileContentDeserializer(item) {
    return {
        index: item["index"],
        type: item["type"],
        imageFile: !item["image_file"]
            ? item["image_file"]
            : messageDeltaImageFileContentObjectDeserializer(item["image_file"]),
    };
}
export function messageDeltaImageFileContentObjectDeserializer(item) {
    return {
        fileId: item["file_id"],
    };
}
export function messageDeltaTextContentDeserializer(item) {
    return {
        index: item["index"],
        type: item["type"],
        text: !item["text"] ? item["text"] : messageDeltaTextContentObjectDeserializer(item["text"]),
    };
}
export function messageDeltaTextContentObjectDeserializer(item) {
    return {
        value: item["value"],
        annotations: !item["annotations"]
            ? item["annotations"]
            : messageDeltaTextAnnotationUnionArrayDeserializer(item["annotations"]),
    };
}
export function messageDeltaTextAnnotationUnionArrayDeserializer(result) {
    return result.map((item) => {
        return messageDeltaTextAnnotationUnionDeserializer(item);
    });
}
export function messageDeltaTextAnnotationDeserializer(item) {
    return {
        index: item["index"],
        type: item["type"],
    };
}
export function messageDeltaTextAnnotationUnionDeserializer(item) {
    switch (item.type) {
        case "url_citation":
            return messageDeltaTextUrlCitationAnnotationDeserializer(item);
        case "file_citation":
            return messageDeltaTextFileCitationAnnotationDeserializer(item);
        case "file_path":
            return messageDeltaTextFilePathAnnotationDeserializer(item);
        default:
            return messageDeltaTextAnnotationDeserializer(item);
    }
}
export function messageDeltaTextUrlCitationAnnotationDeserializer(item) {
    return {
        index: item["index"],
        type: item["type"],
        urlCitation: messageDeltaTextUrlCitationDetailsDeserializer(item["url_citation"]),
        startIndex: item["start_index"],
        endIndex: item["end_index"],
    };
}
export function messageDeltaTextUrlCitationDetailsDeserializer(item) {
    return {
        url: item["url"],
        title: item["title"],
    };
}
export function messageDeltaTextFileCitationAnnotationDeserializer(item) {
    return {
        index: item["index"],
        type: item["type"],
        fileCitation: !item["file_citation"]
            ? item["file_citation"]
            : messageDeltaTextFileCitationAnnotationObjectDeserializer(item["file_citation"]),
        text: item["text"],
        startIndex: item["start_index"],
        endIndex: item["end_index"],
    };
}
export function messageDeltaTextFileCitationAnnotationObjectDeserializer(item) {
    return {
        fileId: item["file_id"],
        quote: item["quote"],
    };
}
export function messageDeltaTextFilePathAnnotationDeserializer(item) {
    return {
        index: item["index"],
        type: item["type"],
        filePath: !item["file_path"]
            ? item["file_path"]
            : messageDeltaTextFilePathAnnotationObjectDeserializer(item["file_path"]),
        startIndex: item["start_index"],
        endIndex: item["end_index"],
        text: item["text"],
    };
}
export function messageDeltaTextFilePathAnnotationObjectDeserializer(item) {
    return {
        fileId: item["file_id"],
    };
}
export function runStepDeltaChunkDeserializer(item) {
    return {
        id: item["id"],
        object: item["object"],
        delta: runStepDeltaDeserializer(item["delta"]),
    };
}
export function runStepDeltaDeserializer(item) {
    return {
        stepDetails: !item["step_details"]
            ? item["step_details"]
            : runStepDeltaDetailUnionDeserializer(item["step_details"]),
    };
}
export function runStepDeltaDetailDeserializer(item) {
    return {
        type: item["type"],
    };
}
export function runStepDeltaDetailUnionDeserializer(item) {
    switch (item.type) {
        case "message_creation":
            return runStepDeltaMessageCreationDeserializer(item);
        case "tool_calls":
            return runStepDeltaToolCallObjectDeserializer(item);
        default:
            return runStepDeltaDetailDeserializer(item);
    }
}
export function runStepDeltaMessageCreationDeserializer(item) {
    return {
        type: item["type"],
        messageCreation: !item["message_creation"]
            ? item["message_creation"]
            : runStepDeltaMessageCreationObjectDeserializer(item["message_creation"]),
    };
}
export function runStepDeltaMessageCreationObjectDeserializer(item) {
    return {
        messageId: item["message_id"],
    };
}
export function runStepDeltaToolCallObjectDeserializer(item) {
    return {
        type: item["type"],
        toolCalls: !item["tool_calls"]
            ? item["tool_calls"]
            : runStepDeltaToolCallUnionArrayDeserializer(item["tool_calls"]),
    };
}
export function runStepDeltaToolCallUnionArrayDeserializer(result) {
    return result.map((item) => {
        return runStepDeltaToolCallUnionDeserializer(item);
    });
}
export function runStepDeltaToolCallDeserializer(item) {
    return {
        index: item["index"],
        id: item["id"],
        type: item["type"],
    };
}
export function runStepDeltaToolCallUnionDeserializer(item) {
    switch (item.type) {
        case "function":
            return runStepDeltaFunctionToolCallDeserializer(item);
        case "file_search":
            return runStepDeltaFileSearchToolCallDeserializer(item);
        case "code_interpreter":
            return runStepDeltaCodeInterpreterToolCallDeserializer(item);
        default:
            return runStepDeltaToolCallDeserializer(item);
    }
}
export function runStepDeltaFunctionToolCallDeserializer(item) {
    return {
        index: item["index"],
        id: item["id"],
        type: item["type"],
        function: !item["function"]
            ? item["function"]
            : runStepDeltaFunctionDeserializer(item["function"]),
    };
}
export function runStepDeltaFunctionDeserializer(item) {
    return {
        name: item["name"],
        arguments: item["arguments"],
        output: item["output"],
    };
}
export function runStepDeltaFileSearchToolCallDeserializer(item) {
    return {
        index: item["index"],
        id: item["id"],
        type: item["type"],
        fileSearch: !item["file_search"]
            ? item["file_search"]
            : runStepFileSearchToolCallResultsDeserializer(item["file_search"]),
    };
}
export function runStepDeltaCodeInterpreterToolCallDeserializer(item) {
    return {
        index: item["index"],
        id: item["id"],
        type: item["type"],
        codeInterpreter: !item["code_interpreter"]
            ? item["code_interpreter"]
            : runStepDeltaCodeInterpreterDetailItemObjectDeserializer(item["code_interpreter"]),
    };
}
export function runStepDeltaCodeInterpreterDetailItemObjectDeserializer(item) {
    return {
        input: item["input"],
        outputs: !item["outputs"]
            ? item["outputs"]
            : runStepDeltaCodeInterpreterOutputUnionArrayDeserializer(item["outputs"]),
    };
}
export function runStepDeltaCodeInterpreterOutputUnionArrayDeserializer(result) {
    return result.map((item) => {
        return runStepDeltaCodeInterpreterOutputUnionDeserializer(item);
    });
}
export function runStepDeltaCodeInterpreterOutputDeserializer(item) {
    return {
        index: item["index"],
        type: item["type"],
    };
}
export function runStepDeltaCodeInterpreterOutputUnionDeserializer(item) {
    switch (item.type) {
        case "logs":
            return runStepDeltaCodeInterpreterLogOutputDeserializer(item);
        case "image":
            return runStepDeltaCodeInterpreterImageOutputDeserializer(item);
        default:
            return runStepDeltaCodeInterpreterOutputDeserializer(item);
    }
}
export function runStepDeltaCodeInterpreterLogOutputDeserializer(item) {
    return {
        index: item["index"],
        type: item["type"],
        logs: item["logs"],
    };
}
export function runStepDeltaCodeInterpreterImageOutputDeserializer(item) {
    return {
        index: item["index"],
        type: item["type"],
        image: !item["image"]
            ? item["image"]
            : runStepDeltaCodeInterpreterImageOutputObjectDeserializer(item["image"]),
    };
}
export function runStepDeltaCodeInterpreterImageOutputObjectDeserializer(item) {
    return {
        fileId: item["file_id"],
    };
}
export function agentStreamEventDeserializer(item) {
    return item;
}
/** Thread operation related streaming events */
export var ThreadStreamEvent;
(function (ThreadStreamEvent) {
    /** Event emitted when a thread is created */
    ThreadStreamEvent["Created"] = "thread.created";
})(ThreadStreamEvent || (ThreadStreamEvent = {}));
/** Run operation related streaming events */
export var RunStreamEvent;
(function (RunStreamEvent) {
    /** Event emitted when a run is created */
    RunStreamEvent["ThreadRunCreated"] = "thread.run.created";
    /** Event emitted when a run is queued */
    RunStreamEvent["ThreadRunQueued"] = "thread.run.queued";
    /** Event emitted when a run is in progress */
    RunStreamEvent["ThreadRunInProgress"] = "thread.run.in_progress";
    /** Event emitted when a run requires action */
    RunStreamEvent["ThreadRunRequiresAction"] = "thread.run.requires_action";
    /** Event emitted when a run is completed */
    RunStreamEvent["ThreadRunCompleted"] = "thread.run.completed";
    /** Event emitted when a run is incomplete */
    RunStreamEvent["ThreadRunIncomplete"] = "thread.run.incomplete";
    /** Event emitted when a run has failed */
    RunStreamEvent["ThreadRunFailed"] = "thread.run.failed";
    /** Event emitted when a run is being cancelled */
    RunStreamEvent["ThreadRunCancelling"] = "thread.run.cancelling";
    /** Event emitted when a run has been cancelled */
    RunStreamEvent["ThreadRunCancelled"] = "thread.run.cancelled";
    /** Event emitted when a run has expired */
    RunStreamEvent["ThreadRunExpired"] = "thread.run.expired";
})(RunStreamEvent || (RunStreamEvent = {}));
/** Run step operation related streaming events */
export var RunStepStreamEvent;
(function (RunStepStreamEvent) {
    /** Event emitted when a run step is created */
    RunStepStreamEvent["ThreadRunStepCreated"] = "thread.run.step.created";
    /** Event emitted when a run step is in progress */
    RunStepStreamEvent["ThreadRunStepInProgress"] = "thread.run.step.in_progress";
    /** Event emitted when a run step delta is received */
    RunStepStreamEvent["ThreadRunStepDelta"] = "thread.run.step.delta";
    /** Event emitted when a run step is completed */
    RunStepStreamEvent["ThreadRunStepCompleted"] = "thread.run.step.completed";
    /** Event emitted when a run step has failed */
    RunStepStreamEvent["ThreadRunStepFailed"] = "thread.run.step.failed";
    /** Event emitted when a run step has been cancelled */
    RunStepStreamEvent["ThreadRunStepCancelled"] = "thread.run.step.cancelled";
    /** Event emitted when a run step has expired */
    RunStepStreamEvent["ThreadRunStepExpired"] = "thread.run.step.expired";
})(RunStepStreamEvent || (RunStepStreamEvent = {}));
/** Message operation related streaming events */
export var MessageStreamEvent;
(function (MessageStreamEvent) {
    /** Event emitted when a message is created */
    MessageStreamEvent["ThreadMessageCreated"] = "thread.message.created";
    /** Event emitted when a message is in progress */
    MessageStreamEvent["ThreadMessageInProgress"] = "thread.message.in_progress";
    /** Event emitted when a message delta is received */
    MessageStreamEvent["ThreadMessageDelta"] = "thread.message.delta";
    /** Event emitted when a message is completed */
    MessageStreamEvent["ThreadMessageCompleted"] = "thread.message.completed";
    /** Event emitted when a message is incomplete */
    MessageStreamEvent["ThreadMessageIncomplete"] = "thread.message.incomplete";
})(MessageStreamEvent || (MessageStreamEvent = {}));
/** Terminal event indicating a server side error while streaming. */
export var ErrorEvent;
(function (ErrorEvent) {
    /** Server error while streaming */
    ErrorEvent["Error"] = "error";
})(ErrorEvent || (ErrorEvent = {}));
/** Terminal event indicating the successful end of a stream. */
export var DoneEvent;
(function (DoneEvent) {
    /** Event emitted when a stream has completed successfully */
    DoneEvent["Done"] = "done";
})(DoneEvent || (DoneEvent = {}));
/** Azure AI Agents API versions */
export var KnownVersions;
(function (KnownVersions) {
    /** Azure AI API version 2025-05-15. */
    KnownVersions["_20250515Preview"] = "2025-05-15-preview";
    /** Azure AI API version 2025-05-01. */
    KnownVersions["V20250501"] = "2025-05-01";
    /** Azure AI API version v1. */
    KnownVersions["V1"] = "v1";
})(KnownVersions || (KnownVersions = {}));
//# sourceMappingURL=models.js.map
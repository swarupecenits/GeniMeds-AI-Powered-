{"version":3,"file":"streamingModels.js","sourceRoot":"","sources":["../../../src/models/streamingModels.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAgDlC,gDAAgD;AAChD,MAAM,CAAN,IAAY,iBAGX;AAHD,WAAY,iBAAiB;IAC3B,6FAA6F;IAC7F,qDAAgC,CAAA;AAClC,CAAC,EAHW,iBAAiB,KAAjB,iBAAiB,QAG5B;AAED,6CAA6C;AAC7C,MAAM,CAAN,IAAY,cA2BX;AA3BD,WAAY,cAAc;IACxB,wFAAwF;IACxF,yDAAuC,CAAA;IAEvC,kGAAkG;IAClG,uDAAqC,CAAA;IAErC,uGAAuG;IACvG,gEAA8C,CAAA;IAE9C,2GAA2G;IAC3G,wEAAsD,CAAA;IAEtD,sFAAsF;IACtF,6DAA2C,CAAA;IAE3C,+EAA+E;IAC/E,uDAAqC,CAAA;IAErC,sGAAsG;IACtG,+DAA6C,CAAA;IAE7C,sFAAsF;IACtF,6DAA2C,CAAA;IAE3C,oFAAoF;IACpF,yDAAuC,CAAA;AACzC,CAAC,EA3BW,cAAc,KAAd,cAAc,QA2BzB;AAED,kDAAkD;AAClD,MAAM,CAAN,IAAY,kBAqBX;AArBD,WAAY,kBAAkB;IAC5B,kGAAkG;IAClG,sEAAgD,CAAA;IAEhD,0GAA0G;IAC1G,6EAAuD,CAAA;IAEvD,wGAAwG;IACxG,kEAA4C,CAAA;IAE5C,yFAAyF;IACzF,0EAAoD,CAAA;IAEpD,kFAAkF;IAClF,oEAA8C,CAAA;IAE9C,yFAAyF;IACzF,0EAAoD,CAAA;IAEpD,uFAAuF;IACvF,sEAAgD,CAAA;AAClD,CAAC,EArBW,kBAAkB,KAAlB,kBAAkB,QAqB7B;AAED,iDAAiD;AACjD,MAAM,CAAN,IAAY,kBAeX;AAfD,WAAY,kBAAkB;IAC5B,gGAAgG;IAChG,qEAA+C,CAAA;IAE/C,+GAA+G;IAC/G,4EAAsD,CAAA;IAEtD,uGAAuG;IACvG,iEAA2C,CAAA;IAE3C,8FAA8F;IAC9F,yEAAmD,CAAA;IAEnD,gGAAgG;IAChG,2EAAqD,CAAA;AACvD,CAAC,EAfW,kBAAkB,KAAlB,kBAAkB,QAe7B;AAED,qEAAqE;AACrE,MAAM,CAAN,IAAY,UAGX;AAHD,WAAY,UAAU;IACpB,sFAAsF;IACtF,6BAAe,CAAA;AACjB,CAAC,EAHW,UAAU,KAAV,UAAU,QAGrB;AAED,gEAAgE;AAChE,MAAM,CAAN,IAAY,SAGX;AAHD,WAAY,SAAS;IACnB,0CAA0C;IAC1C,0BAAa,CAAA;AACf,CAAC,EAHW,SAAS,KAAT,SAAS,QAGpB","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport {\n  AgentStreamEvent,\n  AgentThread,\n  MessageDeltaChunk,\n  RunStep,\n  RunStepDeltaChunk,\n  ThreadMessage,\n  ThreadRun,\n} from \"./models.js\";\n\n/**\nEach event in a server-sent events stream has an `event` and `data` property:\n*  \n* @example\n* ``` ts\n*  event: thread.created\n*  data: {\"id\": \"thread_123\", \"object\": \"thread\", ...}\n* ``` \n* \n*  We emit events whenever a new object is created, transitions to a new state, or is being\n*  streamed in parts (deltas). For example, we emit `thread.run.created` when a new run\n*  is created, `thread.run.completed` when a run completes, and so on. When an Agent chooses\n*  to create a message during a run, we emit a `thread.message.created event`, a\n*  `thread.message.in_progress` event, many `thread.message.delta` events, and finally a\n*  `thread.message.completed` event.\n*  \n*  We may add additional events over time, so we recommend handling unknown events gracefully\n*  in your code.\n**/\nexport interface AgentEventMessage {\n  /** The data of the event. The data can be of type AgentThreadOutput, ThreadRunOutput, RunStepOutput, ThreadMessageOutput, MessageDeltaChunk,RunStepDeltaChunk  */\n  data: AgentEventStreamData;\n  /** The type of the event. */\n  event: AgentStreamEvent | string;\n}\n\n/** Represents a stream event data in the agent. */\nexport type AgentEventStreamData =\n  | AgentThread\n  | ThreadRun\n  | RunStep\n  | ThreadMessage\n  | MessageDeltaChunk\n  | RunStepDeltaChunk\n  | string;\n\n/** Thread operation related streaming events */\nexport enum ThreadStreamEvent {\n  /** Event sent when a new thread is created. The data of this event is of type AgentThread */\n  ThreadCreated = \"thread.created\",\n}\n\n/** Run operation related streaming events */\nexport enum RunStreamEvent {\n  /** Event sent when a new run is created. The data of this event is of type ThreadRun */\n  ThreadRunCreated = \"thread.run.created\",\n\n  /** Event sent when a run moves to `queued` status. The data of this event is of type ThreadRun */\n  ThreadRunQueued = \"thread.run.queued\",\n\n  /** Event sent when a run moves to `in_progress` status. The data of this event is of type ThreadRun */\n  ThreadRunInProgress = \"thread.run.in_progress\",\n\n  /** Event sent when a run moves to `requires_action` status. The data of this event is of type ThreadRun */\n  ThreadRunRequiresAction = \"thread.run.requires_action\",\n\n  /** Event sent when a run is completed. The data of this event is of type ThreadRun */\n  ThreadRunCompleted = \"thread.run.completed\",\n\n  /** Event sent when a run fails. The data of this event is of type ThreadRun */\n  ThreadRunFailed = \"thread.run.failed\",\n\n  /** Event sent when a run moves to `cancelling` status. The data of this event is of type ThreadRun */\n  ThreadRunCancelling = \"thread.run.cancelling\",\n\n  /** Event sent when a run is cancelled. The data of this event is of type ThreadRun */\n  ThreadRunCancelled = \"thread.run.cancelled\",\n\n  /** Event sent when a run is expired. The data of this event is of type ThreadRun */\n  ThreadRunExpired = \"thread.run.expired\",\n}\n\n/** Run step operation related streaming events */\nexport enum RunStepStreamEvent {\n  /** Event sent when a new thread run step is created. The data of this event is of type RunStep */\n  ThreadRunStepCreated = \"thread.run.step.created\",\n\n  /** Event sent when a run step moves to `in_progress` status. The data of this event is of type RunStep */\n  ThreadRunStepInProgress = \"thread.run.step.in_progress\",\n\n  /** Event sent when a run step is being streamed. The data of this event is of type RunStepDeltaChunk */\n  ThreadRunStepDelta = \"thread.run.step.delta\",\n\n  /** Event sent when a run step is completed. The data of this event is of type RunStep */\n  ThreadRunStepCompleted = \"thread.run.step.completed\",\n\n  /** Event sent when a run step fails. The data of this event is of type RunStep */\n  ThreadRunStepFailed = \"thread.run.step.failed\",\n\n  /** Event sent when a run step is cancelled. The data of this event is of type RunStep */\n  ThreadRunStepCancelled = \"thread.run.step.cancelled\",\n\n  /** Event sent when a run step is expired. The data of this event is of type RunStep */\n  ThreadRunStepExpired = \"thread.run.step.expired\",\n}\n\n/** Message operation related streaming events */\nexport enum MessageStreamEvent {\n  /** Event sent when a new message is created. The data of this event is of type ThreadMessage */\n  ThreadMessageCreated = \"thread.message.created\",\n\n  /** Event sent when a message moves to `in_progress` status. The data of this event is of type ThreadMessage */\n  ThreadMessageInProgress = \"thread.message.in_progress\",\n\n  /** Event sent when a message is being streamed. The data of this event is of type MessageDeltaChunk */\n  ThreadMessageDelta = \"thread.message.delta\",\n\n  /** Event sent when a message is completed. The data of this event is of type ThreadMessage */\n  ThreadMessageCompleted = \"thread.message.completed\",\n\n  /** Event sent before a message is completed. The data of this event is of type ThreadMessage */\n  ThreadMessageIncomplete = \"thread.message.incomplete\",\n}\n\n/** Terminal event indicating a server side error while streaming. */\nexport enum ErrorEvent {\n  /** Event sent when an error occurs, such as an internal server error or a timeout. */\n  Error = \"error\",\n}\n\n/** Terminal event indicating the successful end of a stream. */\nexport enum DoneEvent {\n  /** Event sent when the stream is done. */\n  Done = \"done\",\n}\n\n/** Represents a stream of agent event message. */\nexport interface AgentEventMessageStream\n  extends AsyncDisposable,\n    AsyncIterable<AgentEventMessage> {}\n\n/**\n * Agent run response with support to stream.\n */\nexport type AgentRunResponse = PromiseLike<ThreadRun> & {\n  /**\n   * Function to start streaming the agent event messages.\n   * @returns A promise that resolves to an AgentEventMessageStream.\n   */\n  stream: () => Promise<AgentEventMessageStream>;\n};\n"]}
{"version":3,"file":"index.js","sources":["../../src/instrumentation.ts"],"sourcesContent":["/*\n * Copyright Traceloop\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport type * as openai from \"openai\";\nimport { context, trace, Span, Attributes, SpanKind } from \"@opentelemetry/api\";\nimport {\n  InstrumentationBase,\n  InstrumentationModuleDefinition,\n  InstrumentationNodeModuleDefinition,\n  safeExecuteInTheMiddle,\n} from \"@opentelemetry/instrumentation\";\nimport {\n  CONTEXT_KEY_ALLOW_TRACE_CONTENT,\n  SpanAttributes,\n} from \"@traceloop/ai-semantic-conventions\";\nimport { OpenAIInstrumentationConfig } from \"./types\";\nimport type {\n  ChatCompletion,\n  ChatCompletionChunk,\n  ChatCompletionCreateParamsNonStreaming,\n  ChatCompletionCreateParamsStreaming,\n  Completion,\n  CompletionChoice,\n  CompletionCreateParamsNonStreaming,\n  CompletionCreateParamsStreaming,\n} from \"openai/resources\";\nimport type { Stream } from \"openai/streaming\";\nimport { version } from \"../package.json\";\nimport { encodingForModel, TiktokenModel, Tiktoken } from \"js-tiktoken\";\nimport { APIPromise } from \"openai/core\";\n\nexport class OpenAIInstrumentation extends InstrumentationBase {\n  declare protected _config: OpenAIInstrumentationConfig;\n\n  constructor(config: OpenAIInstrumentationConfig = {}) {\n    super(\"@traceloop/instrumentation-openai\", version, config);\n  }\n\n  public override setConfig(config: OpenAIInstrumentationConfig = {}) {\n    super.setConfig(config);\n  }\n\n  public manuallyInstrument(module: typeof openai.OpenAI) {\n    this._diag.debug(`Manually instrumenting openai`);\n\n    // Old version of OpenAI API (v3.1.0)\n    if ((module as any).OpenAIApi) {\n      this._wrap(\n        (module as any).OpenAIApi.prototype,\n        \"createChatCompletion\",\n        this.patchOpenAI(\"chat\", \"v3\"),\n      );\n      this._wrap(\n        (module as any).OpenAIApi.prototype,\n        \"createCompletion\",\n        this.patchOpenAI(\"completion\", \"v3\"),\n      );\n    } else {\n      this._wrap(\n        module.Chat.Completions.prototype,\n        \"create\",\n        this.patchOpenAI(\"chat\"),\n      );\n      this._wrap(\n        module.Completions.prototype,\n        \"create\",\n        this.patchOpenAI(\"completion\"),\n      );\n    }\n  }\n\n  protected init(): InstrumentationModuleDefinition {\n    const module = new InstrumentationNodeModuleDefinition(\n      \"openai\",\n      [\">=3.1.0 <5\"],\n      this.patch.bind(this),\n      this.unpatch.bind(this),\n    );\n    return module;\n  }\n\n  private patch(moduleExports: typeof openai, moduleVersion?: string) {\n    this._diag.debug(`Patching openai@${moduleVersion}`);\n\n    // Old version of OpenAI API (v3.1.0)\n    if ((moduleExports as any).OpenAIApi) {\n      this._wrap(\n        (moduleExports as any).OpenAIApi.prototype,\n        \"createChatCompletion\",\n        this.patchOpenAI(\"chat\", \"v3\"),\n      );\n      this._wrap(\n        (moduleExports as any).OpenAIApi.prototype,\n        \"createCompletion\",\n        this.patchOpenAI(\"completion\", \"v3\"),\n      );\n    } else {\n      this._wrap(\n        moduleExports.OpenAI.Chat.Completions.prototype,\n        \"create\",\n        this.patchOpenAI(\"chat\"),\n      );\n      this._wrap(\n        moduleExports.OpenAI.Completions.prototype,\n        \"create\",\n        this.patchOpenAI(\"completion\"),\n      );\n    }\n    return moduleExports;\n  }\n\n  private unpatch(moduleExports: typeof openai, moduleVersion?: string): void {\n    this._diag.debug(`Unpatching openai@${moduleVersion}`);\n\n    // Old version of OpenAI API (v3.1.0)\n    if ((moduleExports as any).OpenAIApi) {\n      this._unwrap(\n        (moduleExports as any).OpenAIApi.prototype,\n        \"createChatCompletion\",\n      );\n      this._unwrap(\n        (moduleExports as any).OpenAIApi.prototype,\n        \"createCompletion\",\n      );\n    } else {\n      this._unwrap(moduleExports.OpenAI.Chat.Completions.prototype, \"create\");\n      this._unwrap(moduleExports.OpenAI.Completions.prototype, \"create\");\n    }\n  }\n\n  private patchOpenAI(\n    type: \"chat\" | \"completion\",\n    version: \"v3\" | \"v4\" = \"v4\",\n  ) {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const plugin = this;\n    // eslint-disable-next-line\n    return (original: Function) => {\n      return function method(this: any, ...args: unknown[]) {\n        const span =\n          type === \"chat\"\n            ? plugin.startSpan({\n                type,\n                params: args[0] as ChatCompletionCreateParamsNonStreaming & {\n                  extraAttributes?: Record<string, any>;\n                },\n              })\n            : plugin.startSpan({\n                type,\n                params: args[0] as CompletionCreateParamsNonStreaming & {\n                  extraAttributes?: Record<string, any>;\n                },\n              });\n\n        const execContext = trace.setSpan(context.active(), span);\n        const execPromise = safeExecuteInTheMiddle(\n          () => {\n            return context.with(execContext, () => {\n              if ((args?.[0] as any)?.extraAttributes) {\n                delete (args[0] as any).extraAttributes;\n              }\n              return original.apply(this, args);\n            });\n          },\n          (e) => {\n            if (e) {\n              plugin._diag.error(\"OpenAI instrumentation: error\", e);\n            }\n          },\n        );\n\n        if (\n          (\n            args[0] as\n              | ChatCompletionCreateParamsStreaming\n              | CompletionCreateParamsStreaming\n          ).stream\n        ) {\n          return context.bind(\n            execContext,\n            plugin._streamingWrapPromise({\n              span,\n              type,\n              params: args[0] as any,\n              promise: execPromise,\n            }),\n          );\n        }\n\n        const wrappedPromise = plugin._wrapPromise(\n          type,\n          version,\n          span,\n          execPromise,\n        );\n\n        return context.bind(execContext, wrappedPromise as any);\n      };\n    };\n  }\n\n  private startSpan({\n    type,\n    params,\n  }:\n    | {\n        type: \"chat\";\n        params: ChatCompletionCreateParamsNonStreaming & {\n          extraAttributes?: Record<string, any>;\n        };\n      }\n    | {\n        type: \"completion\";\n        params: CompletionCreateParamsNonStreaming & {\n          extraAttributes?: Record<string, any>;\n        };\n      }): Span {\n    const attributes: Attributes = {\n      [SpanAttributes.LLM_SYSTEM]: \"OpenAI\",\n      [SpanAttributes.LLM_REQUEST_TYPE]: type,\n    };\n\n    try {\n      attributes[SpanAttributes.LLM_REQUEST_MODEL] = params.model;\n      if (params.max_tokens) {\n        attributes[SpanAttributes.LLM_REQUEST_MAX_TOKENS] = params.max_tokens;\n      }\n      if (params.temperature) {\n        attributes[SpanAttributes.LLM_REQUEST_TEMPERATURE] = params.temperature;\n      }\n      if (params.top_p) {\n        attributes[SpanAttributes.LLM_REQUEST_TOP_P] = params.top_p;\n      }\n      if (params.frequency_penalty) {\n        attributes[SpanAttributes.LLM_FREQUENCY_PENALTY] =\n          params.frequency_penalty;\n      }\n      if (params.presence_penalty) {\n        attributes[SpanAttributes.LLM_PRESENCE_PENALTY] =\n          params.presence_penalty;\n      }\n\n      if (\n        params.extraAttributes !== undefined &&\n        typeof params.extraAttributes === \"object\"\n      ) {\n        Object.keys(params.extraAttributes).forEach((key: string) => {\n          attributes[key] = params.extraAttributes![key];\n        });\n      }\n\n      if (this._shouldSendPrompts()) {\n        if (type === \"chat\") {\n          params.messages.forEach((message, index) => {\n            attributes[`${SpanAttributes.LLM_PROMPTS}.${index}.role`] =\n              message.role;\n            if (typeof message.content === \"string\") {\n              attributes[`${SpanAttributes.LLM_PROMPTS}.${index}.content`] =\n                (message.content as string) || \"\";\n            } else {\n              attributes[`${SpanAttributes.LLM_PROMPTS}.${index}.content`] =\n                JSON.stringify(message.content);\n            }\n          });\n          params.functions?.forEach((func, index) => {\n            attributes[\n              `${SpanAttributes.LLM_REQUEST_FUNCTIONS}.${index}.name`\n            ] = func.name;\n            attributes[\n              `${SpanAttributes.LLM_REQUEST_FUNCTIONS}.${index}.description`\n            ] = func.description;\n            attributes[\n              `${SpanAttributes.LLM_REQUEST_FUNCTIONS}.${index}.arguments`\n            ] = JSON.stringify(func.parameters);\n          });\n          params.tools?.forEach((tool, index) => {\n            if (!tool.function) {\n              return;\n            }\n\n            attributes[\n              `${SpanAttributes.LLM_REQUEST_FUNCTIONS}.${index}.name`\n            ] = tool.function.name;\n            attributes[\n              `${SpanAttributes.LLM_REQUEST_FUNCTIONS}.${index}.description`\n            ] = tool.function.description;\n            attributes[\n              `${SpanAttributes.LLM_REQUEST_FUNCTIONS}.${index}.arguments`\n            ] = JSON.stringify(tool.function.parameters);\n          });\n        } else {\n          attributes[`${SpanAttributes.LLM_PROMPTS}.0.role`] = \"user\";\n          if (typeof params.prompt === \"string\") {\n            attributes[`${SpanAttributes.LLM_PROMPTS}.0.content`] =\n              params.prompt;\n          } else {\n            attributes[`${SpanAttributes.LLM_PROMPTS}.0.content`] =\n              JSON.stringify(params.prompt);\n          }\n        }\n      }\n    } catch (e) {\n      this._diag.debug(e);\n      this._config.exceptionLogger?.(e);\n    }\n\n    return this.tracer.startSpan(`openai.${type}`, {\n      kind: SpanKind.CLIENT,\n      attributes,\n    });\n  }\n\n  private async *_streamingWrapPromise({\n    span,\n    type,\n    params,\n    promise,\n  }:\n    | {\n        span: Span;\n        type: \"chat\";\n        params: ChatCompletionCreateParamsStreaming;\n        promise: APIPromise<Stream<ChatCompletionChunk>>;\n      }\n    | {\n        span: Span;\n        params: CompletionCreateParamsStreaming;\n        type: \"completion\";\n        promise: APIPromise<Stream<Completion>>;\n      }) {\n    if (type === \"chat\") {\n      const result: ChatCompletion = {\n        id: \"0\",\n        created: -1,\n        model: \"\",\n        choices: [\n          {\n            index: 0,\n            logprobs: null,\n            finish_reason: \"stop\",\n            message: {\n              role: \"assistant\",\n              content: \"\",\n              refusal: null,\n              tool_calls: [],\n            },\n          },\n        ],\n        object: \"chat.completion\",\n      };\n      for await (const chunk of await promise) {\n        yield chunk;\n\n        result.id = chunk.id;\n        result.created = chunk.created;\n        result.model = chunk.model;\n\n        if (chunk.choices[0]?.finish_reason) {\n          result.choices[0].finish_reason = chunk.choices[0].finish_reason;\n        }\n        if (chunk.choices[0]?.logprobs) {\n          result.choices[0].logprobs = chunk.choices[0].logprobs;\n        }\n        if (chunk.choices[0]?.delta.content) {\n          result.choices[0].message.content += chunk.choices[0].delta.content;\n        }\n        if (\n          chunk.choices[0]?.delta.function_call &&\n          chunk.choices[0]?.delta.function_call.arguments &&\n          chunk.choices[0]?.delta.function_call.name\n        ) {\n          // I needed to re-build the object so that Typescript will understand that `name` and `argument` are not null.\n          result.choices[0].message.function_call = {\n            name: chunk.choices[0].delta.function_call.name,\n            arguments: chunk.choices[0].delta.function_call.arguments,\n          };\n        }\n        for (const toolCall of chunk.choices[0]?.delta?.tool_calls ?? []) {\n          if (\n            (result.choices[0].message.tool_calls?.length ?? 0) <\n            toolCall.index + 1\n          ) {\n            result.choices[0].message.tool_calls?.push({\n              function: {\n                name: \"\",\n                arguments: \"\",\n              },\n              id: \"\",\n              type: \"function\",\n            });\n          }\n\n          if (result.choices[0].message.tool_calls) {\n            if (toolCall.id) {\n              result.choices[0].message.tool_calls[toolCall.index].id +=\n                toolCall.id;\n            }\n            if (toolCall.type) {\n              result.choices[0].message.tool_calls[toolCall.index].type +=\n                toolCall.type;\n            }\n            if (toolCall.function?.name) {\n              result.choices[0].message.tool_calls[\n                toolCall.index\n              ].function.name += toolCall.function.name;\n            }\n            if (toolCall.function?.arguments) {\n              result.choices[0].message.tool_calls[\n                toolCall.index\n              ].function.arguments += toolCall.function.arguments;\n            }\n          }\n        }\n      }\n\n      if (result.choices[0].logprobs?.content) {\n        this._addLogProbsEvent(span, result.choices[0].logprobs);\n      }\n\n      if (this._config.enrichTokens) {\n        let promptTokens = 0;\n        for (const message of params.messages) {\n          promptTokens +=\n            this.tokenCountFromString(\n              message.content as string,\n              result.model,\n            ) ?? 0;\n        }\n\n        const completionTokens = this.tokenCountFromString(\n          result.choices[0].message.content ?? \"\",\n          result.model,\n        );\n        if (completionTokens) {\n          result.usage = {\n            prompt_tokens: promptTokens,\n            completion_tokens: completionTokens,\n            total_tokens: promptTokens + completionTokens,\n          };\n        }\n      }\n\n      this._endSpan({ span, type, result });\n    } else {\n      const result: Completion = {\n        id: \"0\",\n        created: -1,\n        model: \"\",\n        choices: [\n          {\n            index: 0,\n            logprobs: null,\n            finish_reason: \"stop\",\n            text: \"\",\n          },\n        ],\n        object: \"text_completion\",\n      };\n      for await (const chunk of await promise) {\n        yield chunk;\n\n        try {\n          result.id = chunk.id;\n          result.created = chunk.created;\n          result.model = chunk.model;\n\n          if (chunk.choices[0]?.finish_reason) {\n            result.choices[0].finish_reason = chunk.choices[0].finish_reason;\n          }\n          if (chunk.choices[0]?.logprobs) {\n            result.choices[0].logprobs = chunk.choices[0].logprobs;\n          }\n          if (chunk.choices[0]?.text) {\n            result.choices[0].text += chunk.choices[0].text;\n          }\n        } catch (e) {\n          this._diag.debug(e);\n          this._config.exceptionLogger?.(e);\n        }\n      }\n\n      try {\n        if (result.choices[0].logprobs) {\n          this._addLogProbsEvent(span, result.choices[0].logprobs);\n        }\n\n        if (this._config.enrichTokens) {\n          const promptTokens =\n            this.tokenCountFromString(params.prompt as string, result.model) ??\n            0;\n\n          const completionTokens = this.tokenCountFromString(\n            result.choices[0].text ?? \"\",\n            result.model,\n          );\n          if (completionTokens) {\n            result.usage = {\n              prompt_tokens: promptTokens,\n              completion_tokens: completionTokens,\n              total_tokens: promptTokens + completionTokens,\n            };\n          }\n        }\n      } catch (e) {\n        this._diag.debug(e);\n        this._config.exceptionLogger?.(e);\n      }\n\n      this._endSpan({ span, type, result });\n    }\n  }\n\n  private _wrapPromise<T>(\n    type: \"chat\" | \"completion\",\n    version: \"v3\" | \"v4\",\n    span: Span,\n    promise: APIPromise<T>,\n  ): APIPromise<T> {\n    return promise._thenUnwrap((result) => {\n      if (version === \"v3\") {\n        if (type === \"chat\") {\n          this._addLogProbsEvent(\n            span,\n            ((result as any).data as ChatCompletion).choices[0].logprobs,\n          );\n          this._endSpan({\n            type,\n            span,\n            result: (result as any).data as ChatCompletion,\n          });\n        } else {\n          this._addLogProbsEvent(\n            span,\n            ((result as any).data as Completion).choices[0].logprobs,\n          );\n          this._endSpan({\n            type,\n            span,\n            result: (result as any).data as Completion,\n          });\n        }\n      } else {\n        if (type === \"chat\") {\n          this._addLogProbsEvent(\n            span,\n            (result as ChatCompletion).choices[0].logprobs,\n          );\n          this._endSpan({ type, span, result: result as ChatCompletion });\n        } else {\n          this._addLogProbsEvent(\n            span,\n            (result as Completion).choices[0].logprobs,\n          );\n          this._endSpan({ type, span, result: result as Completion });\n        }\n      }\n\n      return result;\n    });\n  }\n\n  private _endSpan({\n    span,\n    type,\n    result,\n  }:\n    | { span: Span; type: \"chat\"; result: ChatCompletion }\n    | { span: Span; type: \"completion\"; result: Completion }) {\n    try {\n      span.setAttribute(SpanAttributes.LLM_RESPONSE_MODEL, result.model);\n      if (result.usage) {\n        span.setAttribute(\n          SpanAttributes.LLM_USAGE_TOTAL_TOKENS,\n          result.usage?.total_tokens,\n        );\n        span.setAttribute(\n          SpanAttributes.LLM_USAGE_COMPLETION_TOKENS,\n          result.usage?.completion_tokens,\n        );\n        span.setAttribute(\n          SpanAttributes.LLM_USAGE_PROMPT_TOKENS,\n          result.usage?.prompt_tokens,\n        );\n      }\n\n      if (this._shouldSendPrompts()) {\n        if (type === \"chat\") {\n          result.choices.forEach((choice, index) => {\n            span.setAttribute(\n              `${SpanAttributes.LLM_COMPLETIONS}.${index}.finish_reason`,\n              choice.finish_reason,\n            );\n            span.setAttribute(\n              `${SpanAttributes.LLM_COMPLETIONS}.${index}.role`,\n              choice.message.role,\n            );\n            span.setAttribute(\n              `${SpanAttributes.LLM_COMPLETIONS}.${index}.content`,\n              choice.message.content ?? \"\",\n            );\n\n            if (choice.message.function_call) {\n              span.setAttribute(\n                `${SpanAttributes.LLM_COMPLETIONS}.${index}.function_call.name`,\n                choice.message.function_call.name,\n              );\n              span.setAttribute(\n                `${SpanAttributes.LLM_COMPLETIONS}.${index}.function_call.arguments`,\n                choice.message.function_call.arguments,\n              );\n            }\n            for (const [\n              toolIndex,\n              toolCall,\n            ] of choice?.message?.tool_calls?.entries() || []) {\n              span.setAttribute(\n                `${SpanAttributes.LLM_COMPLETIONS}.${index}.tool_calls.${toolIndex}.name`,\n                toolCall.function.name,\n              );\n              span.setAttribute(\n                `${SpanAttributes.LLM_COMPLETIONS}.${index}.tool_calls.${toolIndex}.arguments`,\n                toolCall.function.arguments,\n              );\n            }\n          });\n        } else {\n          result.choices.forEach((choice, index) => {\n            span.setAttribute(\n              `${SpanAttributes.LLM_COMPLETIONS}.${index}.finish_reason`,\n              choice.finish_reason,\n            );\n            span.setAttribute(\n              `${SpanAttributes.LLM_COMPLETIONS}.${index}.role`,\n              \"assistant\",\n            );\n            span.setAttribute(\n              `${SpanAttributes.LLM_COMPLETIONS}.${index}.content`,\n              choice.text,\n            );\n          });\n        }\n      }\n    } catch (e) {\n      this._diag.debug(e);\n      this._config.exceptionLogger?.(e);\n    }\n\n    span.end();\n  }\n\n  private _shouldSendPrompts() {\n    const contextShouldSendPrompts = context\n      .active()\n      .getValue(CONTEXT_KEY_ALLOW_TRACE_CONTENT);\n\n    if (contextShouldSendPrompts !== undefined) {\n      return contextShouldSendPrompts;\n    }\n\n    return this._config.traceContent !== undefined\n      ? this._config.traceContent\n      : true;\n  }\n\n  private _addLogProbsEvent(\n    span: Span,\n    logprobs:\n      | ChatCompletion.Choice.Logprobs\n      | ChatCompletionChunk.Choice.Logprobs\n      | CompletionChoice.Logprobs\n      | null,\n  ) {\n    try {\n      let result: { token: string; logprob: number }[] = [];\n\n      if (!logprobs) {\n        return;\n      }\n\n      const chatLogprobs = logprobs as\n        | ChatCompletion.Choice.Logprobs\n        | ChatCompletionChunk.Choice.Logprobs;\n      const completionLogprobs = logprobs as CompletionChoice.Logprobs;\n      if (chatLogprobs.content) {\n        result = chatLogprobs.content.map((logprob) => {\n          return {\n            token: logprob.token,\n            logprob: logprob.logprob,\n          };\n        });\n      } else if (\n        completionLogprobs?.tokens &&\n        completionLogprobs?.token_logprobs\n      ) {\n        completionLogprobs.tokens.forEach((token, index) => {\n          const logprob = completionLogprobs.token_logprobs?.at(index);\n          if (logprob) {\n            result.push({\n              token,\n              logprob,\n            });\n          }\n        });\n      }\n\n      span.addEvent(\"logprobs\", { logprobs: JSON.stringify(result) });\n    } catch (e) {\n      this._diag.debug(e);\n      this._config.exceptionLogger?.(e);\n    }\n  }\n\n  private _encodingCache = new Map<string, Tiktoken>();\n\n  private tokenCountFromString(text: string, model: string) {\n    if (!text) {\n      return 0;\n    }\n\n    let encoding = this._encodingCache.get(model);\n\n    if (!encoding) {\n      try {\n        encoding = encodingForModel(model as TiktokenModel);\n        this._encodingCache.set(model, encoding);\n      } catch (e) {\n        this._diag.debug(e);\n        this._config.exceptionLogger?.(e);\n        return 0;\n      }\n    }\n\n    return encoding.encode(text).length;\n  }\n}\n"],"names":["InstrumentationBase","InstrumentationNodeModuleDefinition","trace","context","safeExecuteInTheMiddle","SpanAttributes","SpanKind","__asyncGenerator","__asyncValues","__await","CONTEXT_KEY_ALLOW_TRACE_CONTENT","encodingForModel"],"mappings":"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"}